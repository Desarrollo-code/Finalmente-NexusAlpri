// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?                @default(now())
  isActive              Boolean                  @default(true)
  xp                    Int?                     @default(0)
  theme                 String?

  courses               Course[]                 @relation("CreatedCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  announcements         Announcement[]           @relation("Author")
  notifications         Notification[]
  eventsCreated         CalendarEvent[]          @relation("EventCreators")
  eventsAttending       CalendarEvent[]          @relation("EventAttendees")
  resourcesUploaded     Resource[]               @relation("Uploader")
  resourcesSharedWith   Resource[]               @relation("ResourceSharedWith")
  securityLogs          SecurityLog[]
  notes                 UserNote[]
  achievements          UserAchievement[]
  templates             LessonTemplate[]
  createdForms          Form[]                   @relation("FormCreator")
  sharedForms           Form[]                   @relation("FormSharedWith")
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
  answerAttempts        AnswerAttempt[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id                String            @id @default(cuid())
  title             String            @db.VarChar(255)
  description       String?           @db.Text
  imageUrl          String?
  category          String?
  status            CourseStatus      @default(DRAFT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publicationDate   DateTime?
  
  instructorId      String?
  instructor        User?             @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules           Module[]
  enrollments       Enrollment[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text
  maxAttempts  Int?
  contentBlockId String      @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String         @db.Text
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  progress     CourseProgress?
  
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                     @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?                     @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                  @updatedAt
  
  user               User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment         Enrollment                 @relation(fields: [id], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String        @id @default(cuid())
  progressId   String
  lessonId     String
  type         String        // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime      @default(now())
  
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id             String          @id @default(cuid())
  userId         String
  quizId         String
  attemptNumber  Int
  score          Float
  submittedAt    DateTime        @default(now())
  
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        AnswerAttempt[]
}

model AnswerAttempt {
    id              String          @id @default(cuid())
    attemptId       String
    questionId      String
    selectedOptionId String

    attempt         QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption    @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  primaryColor            String?
  secondaryColor          String?
  accentColor             String?
  backgroundColorLight    String?
  fontHeadline            String?
  fontBody                String?
  primaryColorDark        String?
  backgroundColorDark     String?
  logoUrl                 String?   @db.Text
  watermarkUrl            String?   @db.Text
  landingImageUrl         String?   @db.Text
  authImageUrl            String?   @db.Text
  aboutImageUrl           String?   @db.Text
  benefitsImageUrl        String?   @db.Text

  updatedAt                 DateTime  @updatedAt
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String?
  tags        String?
  url         String?      @db.Text
  uploadDate  DateTime     @default(now())
  
  uploaderId  String?
  uploader    User?        @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)

  pin         String?

  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children    Resource[]   @relation("FolderChildren")

  ispublic    Boolean      @default(true)
  sharedWith  User[]       @relation("ResourceSharedWith")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json     @default("[\"ALL\"]") // "ALL", ["STUDENT"], ["INSTRUCTOR"], etc.
  priority   String   @default("Normal") // Normal, Urgente
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  title      String
  description String? @db.Text
  link        String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        String   @default("ALL") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String   @default("blue")
  creatorId           String
  videoConferenceLink String?
  attachments         Json?
  
  creator             User     @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
}

model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userId        String?
  emailAttempt  String?
  details       String?           @db.Text
  userAgent     String?           @db.Text
  country       String?
  city          String?
  createdAt     DateTime          @default(now())
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Achievement {
  id                  String            @id @default(cuid())
  slug                AchievementSlug   @unique
  name                String
  description         String
  icon                String
  points              Int
  users               UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("FormSharedWith")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  options      Json?
  placeholder  String?
  order        Int
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormResponseAnswer[]
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id           String               @id @default(cuid())
  formId       String
  userId       String
  submittedAt  DateTime             @default(now())
  score        Float?
  form         Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormResponseAnswer[]
}

model FormResponseAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String       @db.Text
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
