// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- USER & AUTHENTICATION ---
model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  avatar               String?
  role                 UserRole          @default(STUDENT)
  isActive             Boolean           @default(true)
  registeredDate       DateTime          @default(now())
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  xp                   Int               @default(0)
  
  createdCourses       Course[]          @relation("InstructorCourses")
  enrollments          Enrollment[]
  notes                UserNote[]
  notifications        Notification[]
  securityLogs         SecurityLog[]
  achievements         UserAchievement[]
  uploadedResources    Resource[]
  createdAnnouncements Announcement[]
  createdEvents        CalendarEvent[]   @relation("UserToCreator")
  attendedEvents       CalendarEvent[]   @relation("EventAttendees")
  createdForms         Form[]
  formResponses        FormResponse[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE STRUCTURE ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String
  instructor      User           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  maxAttempts    Int?          
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  answers  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  feedback   String?         @db.Text
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]

  @@index([questionId])
}

// --- USER PROGRESS & ENGAGEMENT ---
model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime       @default(now())
  type         String         // 'view', 'video', 'quiz'
  score        Float?         // Score from quiz if applicable

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

// --- PLATFORM CONTENT & SETTINGS ---
model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")
  fontHeadline                String?
  fontBody                    String?
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  resourceCategories          String?
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  updatedAt                   DateTime  @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        String
  url         String?
  uploadDate  DateTime @default(now())
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderChildren")
  category    String?
  tags        String?
  ispublic    Boolean  @default(true)
  pin         String?
  sharedWith  User[]

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json
  priority  String   @default("Normal") // Normal, Urgente
  
  @@index([authorId])
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?     @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean     @default(false)
  location            String?
  audienceType        String      // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String?     @default("blue")
  videoConferenceLink String?
  attachments         Json?
  
  creatorId           String
  creator             User        @relation("UserToCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]      @relation("EventAttendees")

  @@index([creatorId])
}

// --- GAMIFICATION & NOTIFICATIONS ---
model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  userAchievements  UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?
  createdAt    DateTime         @default(now())
  userAgent    String?
  country      String?
  city         String?

  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- TEMPLATES ---
model LessonTemplate {
    id             String           @id @default(cuid())
    name           String
    description    String?
    type           String           // SYSTEM, USER
    creatorId      String?          
    creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    templateBlocks TemplateBlock[]
    createdAt      DateTime         @default(now())

    @@index([creatorId])
}

model TemplateBlock {
    id         String     @id @default(cuid())
    type       LessonType
    order      Int
    templateId String
    template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
    
    @@index([templateId])
}

// --- FORMS ---
model Form {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    status      FormStatus @default(DRAFT)
    isQuiz      Boolean    @default(false)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    creatorId   String
    creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]     @relation("FormSharedWith")

    @@index([creatorId])
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

model FormField {
    id          String   @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json? // Para select, radio, checkbox
    required    Boolean  @default(false)
    placeholder String?
    order       Int
    formId      String
    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]

    @@index([formId])
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

model FormResponse {
    id          String       @id @default(cuid())
    formId      String
    form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt DateTime     @default(now())
    score       Float?       // Puntuación si es un quiz
    answers     FormAnswer[]

    @@index([formId])
    @@index([userId])
}

model FormAnswer {
    id         String       @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: NoAction)
    value      String       @db.Text

    @@index([responseId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
