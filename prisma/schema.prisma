// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                   String            @id @default(uuid())
  name                 String?
  email                String            @unique
  password             String
  avatar               String?
  role                 UserRole
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime?         @default(now())
  
  colorTheme           String?           @default("corporate-blue")
  customThemeColors    Json?

  coursesAsInstructor  Course[]          @relation("InstructorCourses")
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  createdEvents        CalendarEvent[]   @relation("EventCreator")
  attendedEvents       CalendarEvent[]   @relation("EventAttendees")
  uploadedResources    Resource[]
  createdAnnouncements Announcement[]
  notifications        Notification[]
  securityLogs         SecurityLog[]

  @@map("users")
}

model Course {
  id              String       @id @default(uuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  instructorId    String?
  instructor      User?        @relation("InstructorCourses", fields: [instructorId], references: [id])

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  
  @@index([instructorId])
  @@map("courses")
}

model Module {
  id        String   @id @default(uuid())
  title     String
  order     Int
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id        String  @id @default(uuid())
  title     String
  order     Int
  type      String? // Legacy field, contentBlocks is preferred
  content   String? @db.Text // Legacy field

  moduleId  String
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(uuid())
  type      LessonType
  content   String?    @db.Text
  order     Int

  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?

  @@map("content_blocks")
}


model Enrollment {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String   @id @default(uuid())
  userId             String
  courseId           String
  progressPercentage Float    @default(0)
  completedLessonIds Json     @default("[]") // Stores array of { lessonId, type, score? }
  updatedAt          DateTime @updatedAt
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  enrollmentId       String?      @unique
  enrollment         Enrollment?  @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId])
  @@map("course_progress")
}

model Quiz {
  id             String @id @default(uuid())
  title          String
  description    String?
  
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]

  @@map("quizzes")
}

model Question {
  id      String       @id @default(uuid())
  text    String
  type    QuestionType @default(SINGLE_CHOICE)
  order   Int
  
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]

  @@map("questions")
}

model AnswerOption {
  id          String   @id @default(uuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answer_options")
}

model Resource {
  id            String       @id @default(uuid())
  title         String
  description   String?      @db.Text
  type          ResourceType
  url           String?
  category      String
  tags          Json?
  pin           String?      // Hashed PIN
  uploadDate    DateTime     @default(now())
  
  uploaderId    String?
  uploader      User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId      String?      // For folder structure
  parent        Resource?    @relation("FolderStructure", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]   @relation("FolderStructure")
  
  @@index([parentId])
  @@map("resources")
}


model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?
  
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

model CalendarEvent {
  id            String            @id @default(uuid())
  title         String
  description   String?           @db.Text
  location      String?
  start         DateTime
  end           DateTime
  allDay        Boolean           @default(false)
  audienceType  EventAudienceType @default(SPECIFIC) // e.g., 'ALL', 'STUDENT', 'SPECIFIC'
  color         String?

  creatorId     String
  creator       User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  attendees     User[]            @relation("EventAttendees")
  
  @@map("calendar_events")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model PlatformSettings {
  id                         String    @id @default(uuid())
  platformName               String    @default("NexusAlpri")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  emailWhitelist             String?   @db.Text // Comma-separated list
  
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)

  resourceCategories         Json      @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")
  updatedAt                  DateTime  @updatedAt

  @@map("platform_settings")
}


model LessonTemplate {
  id              String   @id @default(uuid())
  name            String
  description     String?
  type            TemplateType
  
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks  TemplateBlock[]
  createdAt       DateTime @default(now())
}

model TemplateBlock {
  id              String      @id @default(uuid())
  type            LessonType
  order           Int
  
  templateId      String
  lessonTemplate  LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}


model SecurityLog {
  id           String         @id @default(uuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?        // For failed logins where userId is unknown
  userId       String?
  details      String?        @db.Text
  createdAt    DateTime       @default(now())

  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("security_logs")
}

enum TemplateType {
  SYSTEM
  USER
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

enum EventAudienceType {
  ALL
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}
