// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  role                UserRole              @default(STUDENT)
  avatar              String?
  registeredDate      DateTime              @default(now())
  isTwoFactorEnabled  Boolean               @default(false)
  twoFactorSecret     String?
  theme               String?               @default("dark")
  xp                  Int?                  @default(0)
  isActive            Boolean               @default(true) // <-- CAMPO AÃ‘ADIDO

  courses             Course[]              @relation("InstructorCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]       @relation("CreatedBy")
  attendedEvents      CalendarEvent[]       @relation("EventAttendees")
  resources           Resource[]            @relation("Uploader")
  sharedResources     Resource[]            @relation("SharedWithUser")
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  UserNote            UserNote[]
  achievements        UserAchievement[]
  createdForms        Form[]                @relation("CreatedForms")
  formResponses       FormResponse[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes     UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType @default(TEXT)
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float?                   @default(0)
  lastActivity       DateTime?                @updatedAt
  completedAt        DateTime?                
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view' or 'quiz'
  score       Float? // Only for quizzes
  completedAt DateTime       @default(now())
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType @default(DOCUMENT)
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime @default(now())
  uploaderId  String?
  parentId    String?
  pin         String?

  ispublic    Boolean  @default(true)

  uploader    User?      @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parent      Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderHierarchy")
  sharedWith  User[]     @relation("SharedWithUser")
}


model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String   @db.Text
  date     DateTime @default(now())
  authorId String
  priority String   @default("Normal")
  audience Json
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  color               String   @default("blue")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?
  
  creatorId           String
  creator             User      @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]    @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?         // Null for SYSTEM templates
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  userId       String?
  emailAttempt String?
  details      String?          @db.Text
  country      String?
  city         String?
  createdAt    DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  require2faForAdmins       Boolean  @default(false)
  idleTimeoutMinutes        Int      @default(20)
  enableIdleTimeout         Boolean  @default(true)
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  resourceCategories        String   @db.Text
  primaryColor              String?  @default("#6366f1") // Indigo 500
  secondaryColor            String?  @default("#a5b4fc") // Indigo 300
  accentColor               String?  @default("#ec4899") // Pink 500
  backgroundColorLight      String?  @default("#f8fafc") // Slate 50
  primaryColorDark          String?  @default("#a5b4fc") // Indigo 300
  backgroundColorDark       String?  @default("#020617") // Slate 950
  fontHeadline              String?  @default("Space Grotesk")
  fontBody                  String?  @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model Achievement {
  id                String            @id @default(cuid())
  slug              String            @unique
  name              String
  description       String
  icon              String?
  points            Int               @default(50)
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Form {
    id              String          @id @default(cuid())
    title           String
    description     String?         @db.Text
    status          FormStatus      @default(DRAFT)
    isQuiz          Boolean         @default(false)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    creatorId       String
    creator         User            @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("SharedForms")
}

model FormField {
    id              String          @id @default(cuid())
    label           String
    type            FormFieldType
    placeholder     String?
    required        Boolean         @default(false)
    options         Json?           // Para SINGLE_CHOICE, MULTIPLE_CHOICE
    order           Int
    formId          String
    form            Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers         FormAnswer[]
}

model FormResponse {
    id              String          @id @default(cuid())
    formId          String
    form            Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt     DateTime        @default(now())
    answers         FormAnswer[]
    score           Float?          // Para quizzes
}

model FormAnswer {
    id              String          @id @default(cuid())
    responseId      String
    response        FormResponse    @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId         String
    field           FormField       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value           String          @db.Text
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum TemplateType {
    SYSTEM
    USER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}
