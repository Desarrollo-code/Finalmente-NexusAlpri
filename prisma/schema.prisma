
// Este es tu esquema de Prisma. Define los modelos de tu base de datos.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Importante para compatibilidad con PlanetScale/serverless
}

// --- ENUMS ---
// Usados para definir un conjunto de valores permitidos para un campo.

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE // Para PDF, imágenes, etc.
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELOS DE LA BASE DE DATOS ---

model User {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  password              String
  avatar                String?
  role                  UserRole          @default(STUDENT)
  xp                    Int               @default(0)
  isActive              Boolean           @default(true)
  isTwoFactorEnabled    Boolean           @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime          @default(now())
  lastLogin             DateTime?
  coursesCreated        Course[]
  enrollments           Enrollment[]
  notes                 UserNote[]
  progress              CourseProgress[]
  resourcesUploaded     Resource[]        @relation("UploadedResources")
  resourcesSharedWith   Resource[]        @relation("SharedResources")
  announcements         Announcement[]
  eventsCreated         CalendarEvent[]
  eventsAttending       CalendarEvent[]   @relation("EventAttendees")
  notifications         Notification[]
  securityLogs          SecurityLog[]
  templatesCreated      LessonTemplate[]
  achievements          UserAchievement[]
  quizAttempts          QuizAttempt[]
  formResponses         FormResponse[]
  formsCreated          Form[]
  formsSharedWith       Form[]            @relation("FormSharedWith")

  @@index([email])
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String                  @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  userNotes      UserNote[]
  template       LessonTemplate?         @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId     String?

  @@index([moduleId])
  @@index([templateId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String         @id @default(cuid())
  title           String
  description     String?
  contentBlockId  String         @unique
  contentBlock    ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
  maxAttempts     Int? // Número máximo de intentos permitidos. Null para ilimitados.
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean
  feedback     String?
  questionId   String
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction) // Evitar borrado en cascada cíclico
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction) // Evitar borrado en cascada cíclico

  @@index([quizAttemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type         String // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime       @default(now())

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model Resource {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text
  type         ResourceType
  category     String?
  url          String?
  uploadDate   DateTime      @default(now())
  tags         String?       // Lista de tags separada por comas
  pin          String?       // PIN hasheado
  ispublic     Boolean       @default(true)
  uploaderId   String?
  uploader     User?         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?     @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]    @relation("FolderChildren")
  sharedWith   User[]        @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json     @default("\"ALL\"") // ALL, o un array de UserRole

  @@index([authorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  attachments         Json[]   // [{ name: string, url: string }]
  audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String?
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  primaryColor               String?  @default("#6366f1")
  secondaryColor             String?  @default("#a5b4fc")
  accentColor                String?  @default("#ec4899")
  backgroundColorLight       String?  @default("#f8fafc")
  primaryColorDark           String?  @default("#a5b4fc")
  backgroundColorDark        String?  @default("#020617")
  fontHeadline               String?  @default("Space Grotesk")
  fontBody                   String?  @default("Inter")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?
  require2faForAdmins        Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories         String?
  updatedAt                  DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  emailAttempt String?
  city         String?
  country      String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String // 'SYSTEM' or 'USER'
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String         @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String?
  points      Int
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]   @relation("FormSharedWith")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json[] // [{ id: string, text: string, isCorrect: boolean, points: number }]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  score       Float? // Almacena el puntaje porcentual si es un quiz
  answers     FormResponseAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String       @db.Text // Almacena la respuesta, sea texto, ID de opción, o un array de IDs en JSON

  @@index([responseId])
  @@index([fieldId])
}

    