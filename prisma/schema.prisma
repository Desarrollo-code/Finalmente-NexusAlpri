// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---

model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String?
  avatar               String?
  role                 String            @default("STUDENT") // "STUDENT", "INSTRUCTOR", "ADMINISTRATOR"
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime          @default(now())
  theme                String?           @default("dark")
  createdCourses       Course[]          @relation("CreatorToCourse")
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  createdAnnouncements Announcement[]    @relation("CreatorToAnnouncement")
  notifications        Notification[]
  createdEvents        CalendarEvent[]   @relation("EventCreator")
  attendingEvents      CalendarEvent[]   @relation("EventAttendees")
  uploadedResources    Resource[]        @relation("UploaderToResource")
  sharedResources      Resource[]        @relation(name: "SharedWithUser")
  notes                UserNote[]
  quizAttempts         QuizAttempt[]
  securityLogs         SecurityLog[]
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        String
  details      String?          @db.Text
  ipAddress    String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
}


// --- COURSE MODELS ---

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?          @db.Text
  category        String?
  status          String           @default("DRAFT") // "DRAFT", "PUBLISHED", "ARCHIVED", "SCHEDULED"
  publicationDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  instructorId    String?
  instructor      User?            @relation("CreatorToCourse", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
  id        String   @id @default(cuid())
  type      String   // 'TEXT', 'VIDEO', 'QUIZ', 'FILE'
  content   String?  @db.Text
  order     Int
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

// --- QUIZ & PROGRESS MODELS ---

model Quiz {
  id             String      @id @default(cuid())
  title          String
  description    String?     @db.Text
  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String         @db.Text
  type    String         @default("MULTIPLE_CHOICE")
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String @id @default(cuid())
  text        String @db.Text
  isCorrect   Boolean
  feedback    String? @db.Text
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime        @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id              String        @id @default(cuid())
  attemptId       String
  attempt         QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId      String
  question        Question      @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId String
  selectedOption  AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String           @id @default(cuid())
  userId             String
  courseId           String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String           @unique
  enrollment         Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float            @default(0)
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progressId  String
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String          // 'view' or 'quiz'
    score       Float?          // Only for quiz type
    completedAt DateTime        @default(now())

    @@unique([progressId, lessonId])
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
}

// --- GLOBAL CONTENT MODELS ---

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  authorId  String
  author    User     @relation("CreatorToAnnouncement", fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json     // 'ALL', or an array of roles: ['STUDENT', 'INSTRUCTOR']
  priority  String?  @default("Normal")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  color               String?
  videoConferenceLink String?
  audienceType        String   // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees           User[]   @relation("EventAttendees")
  attachments         Json?
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         String   // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  url          String?  @db.Text
  category     String?
  tags         String?  // Comma-separated
  uploadDate   DateTime @default(now())
  ispublic     Boolean  @default(true)
  pin          String?  // Hashed PIN
  uploaderId   String?
  uploader     User?    @relation("UploaderToResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children     Resource[] @relation("FolderHierarchy")
  sharedWith   User[]   @relation(name: "SharedWithUser")
}

// --- SYSTEM SETTINGS ---

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text // Comma-separated domains
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
  
  // Theme settings
  primaryColor        String?   @default("#6366f1") // indigo-500
  secondaryColor      String?   @default("#a5b4fc") // indigo-300
  accentColor         String?   @default("#ec4899") // pink-500
  backgroundColorLight String?  @default("#f8fafc") // slate-50
  
  primaryColorDark    String?   @default("#a5b4fc") // indigo-300
  backgroundColorDark String?   @default("#020617") // slate-950

  fontHeadline        String?   @default("Space Grotesk")
  fontBody            String?   @default("Inter")
}

model LessonTemplate {
  id           String   @id @default(cuid())
  name         String
  description  String?
  type         String   // SYSTEM, USER
  creatorId    String?
  createdAt    DateTime @default(now())
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        String   // 'TEXT', 'VIDEO', 'QUIZ', 'FILE'
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
