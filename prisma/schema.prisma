// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMERACIONES ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

// --- MODELOS PRINCIPALES ---

model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isActive              Boolean                  @default(true)
  registeredDate        DateTime                 @default(now())
  lastLogin             DateTime?
  theme                 String?                  @default("dark")
  xp                    Int?                     @default(0)
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  coursesCreated        Course[]
  enrollments           Enrollment[]
  notifications         Notification[]
  notes                 UserNote[]
  resourcesUploaded     Resource[]
  createdAnnouncements  Announcement[]
  createdCalendarEvents CalendarEvent[]
  createdForms          Form[]
  formResponses         FormResponse[]
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  attendedEvents        CalendarEvent[]          @relation("EventAttendees")
  sharedForms           Form[]                   @relation("FormSharedWith")
  achievements          UserAchievement[]
  progress              CourseProgress[]         @relation("UserProgress")
  quizAttempts          QuizAttempt[]
  lessonTemplates       LessonTemplate[] // Relación inversa añadida
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]
}

model Lesson {
  id              String                   @id @default(cuid())
  title           String
  order           Int
  module          Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId        String
  contentBlocks   ContentBlock[]
  notes           UserNote[]
  completionRecords LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?
}

// --- QUIZ & EVALUACIONES ---
model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String        @unique
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?          // Número máximo de intentos permitidos. Null para ilimitado.
}

model Question {
  id             String          @id @default(cuid())
  text           String
  type           QuestionType    @default(SINGLE_CHOICE)
  order          Int
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  options        AnswerOption[]
  answerAttempts AnswerAttempt[] // Relación inversa añadida
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean         @default(false)
  feedback     String?
  points       Int             @default(0) // Puntos para esta opción
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  AnswerAttempt AnswerAttempt[]
}

// --- PROGRESO DEL ESTUDIANTE ---
model Enrollment {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId   String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     String
  type         String         // "view", "video", "quiz"
  score        Float?         // Puntuación obtenida si es un quiz
  completedAt  DateTime       @default(now())
  
  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
  
  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId String
}

// --- CONTENIDO GLOBAL Y COMUNICACIÓN ---
model Resource {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  uploadDate  DateTime   @default(now())
  uploader    User       @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String
  hasPin      Boolean    @default(false)
  pin         String?
  parentId    String?
  parent      Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderContent")
  ispublic    Boolean    @default(true)
  sharedWith  User[]     @relation("ResourceSharedWith")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  audience  Json
  priority  String?  @default("Normal") // "Normal", "Urgente"
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  audienceType        String       // "ALL", "ADMINISTRATOR", "INSTRUCTOR", "STUDENT", "SPECIFIC"
  color               String?      @default("blue")
  creator             User         @relation(fields: [creatorId], references: [id])
  creatorId           String
  attendees           User[]       @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json[]       @default([])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  city         String?
  country      String?
  createdAt    DateTime         @default(now())

  @@index([userId])
}

// --- PLANTILLAS Y GAMIFICACIÓN ---
model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

// --- FORMULARIOS Y ENCUESTAS ---
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")
  isQuiz      Boolean        @default(false) // Indica si es un quiz con puntuación
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  order       Int
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  submittedAt DateTime @default(now())
  answers     Answer[]
  score       Float?   // Puntuación si el formulario es un quiz
}

model Answer {
  id         String     @id @default(cuid())
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  field      FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId    String
  value      String     @db.Text
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}
// --- CONFIGURACIÓN DE PLATAFORMA ---
model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?   // Marca de agua para videos/imágenes
  landingImageUrl            String?   // Imagen principal para la página de inicio
  authImageUrl               String?   // Imagen para las páginas de login/registro
  aboutImageUrl              String?   // Imagen para la página "Sobre Nosotros"
  benefitsImageUrl           String?   // Imagen para la sección de beneficios en la landing
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  allowPublicRegistration    Boolean   @default(true)
  emailWhitelist             String?   // Dominios permitidos, separados por comas
  enableEmailNotifications   Boolean   @default(true)
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  resourceCategories         String?   @db.Text // Comma-separated
  updatedAt                  DateTime  @updatedAt
}

enum TemplateType {
  SYSTEM
  USER
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}
