// prisma/schema.prisma
// Este es el esquema para tu base de datos MySQL local.

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "preview-feature"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---
model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime         @default(now())
  isActive            Boolean          @default(true)
  xp                  Int              @default(0)
  lastLogin           DateTime?

  // Relationships
  createdCourses      Course[]         @relation("CreatedCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  userAchievements    UserAchievement[]
  notes               UserNote[]
  uploadedResources   Resource[]       @relation("UploadedResources")
  sharedResources     Resource[]       @relation("SharedResources")
  notifications       Notification[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  createdForms        Form[]           @relation("CreatedForms")
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
  sharedForms         Form[]           @relation("SharedForms")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?

  // Relationships
  instructorId    String
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  // Relationships
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id              String                @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  // Relationships
  module          Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes           UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  // Relationships
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String      @unique
  // Relationships
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id       String   @id @default(cuid())
  text     String
  order    Int
  quizId   String
  // Relationships
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?
  points     Int      @default(0)
  questionId String
  // Relationships
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- USER PROGRESS & ENGAGEMENT ---
model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  // Relationships
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollmentId       String                   @unique
  // Relationships
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view', 'quiz', 'video'
  score       Float?
  completedAt DateTime @default(now())
  // Relationships
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  // Relationships
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([userId, lessonId])
}

// --- GAMIFICATION ---
model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String
  points       Int
  // Relationships
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  // Relationships
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@id([userId, achievementId])
}

// --- GLOBAL CONTENT & SETTINGS ---
model Resource {
  id            String     @id @default(cuid())
  title         String
  description   String?    @db.Text
  type          ResourceType
  category      String?
  tags          String?    // Comma-separated
  url           String?
  uploadDate    DateTime   @default(now())
  pin           String?
  uploaderId    String?
  ispublic      Boolean    @default(true)
  sharedWith    User[]     @relation("SharedResources")
  parentId      String?
  // Relationships
  parent        Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Resource[] @relation("FolderContent")
  uploader      User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  audience   String   // 'ALL' o un array JSON de roles
  priority   String   @default("Normal")
  authorId   String
  // Relationships
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  audienceType        String   // 'ALL', rol o 'SPECIFIC'
  color               String   @default("blue")
  creatorId           String
  videoConferenceLink String?
  attachments         Json?
  // Relationships
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  emailAttempt String?
  // Relationships
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  emailWhitelist             String?
  require2faForAdmins        Boolean   @default(false)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories         String?
  updatedAt                  DateTime  @updatedAt
}

// --- FORMS & QUIZZES ---
model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String
  // Relationships
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("SharedForms")
}

model FormField {
  id            String        @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean       @default(false)
  placeholder   String?
  options       Json? // [{ id, text, isCorrect, points }, ...]
  order         Int
  formId        String
  // Relationships
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime        @default(now())
  score       Float? // Percentage score if it's a quiz
  // Relationships
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]
}

model AnswerAttempt {
  id        String      @id @default(cuid())
  responseId String
  fieldId   String
  value     String      @db.Text
  // Relationships
  response  FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field     FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

// --- TEMPLATES ---
model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           String           // 'SYSTEM' or 'USER'
  creatorId      String?
  createdAt      DateTime         @default(now())
  // Relationships
  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  // Relationships
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
