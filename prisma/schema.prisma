// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isActive            Boolean              @default(true)
  registeredDate      DateTime?            @default(now())
  lastLogin           DateTime?
  xp                  Int                  @default(0)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  theme               String?

  // Relations
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  createdResources    Resource[]           @relation("UploadedResources")
  sharedResources     Resource[]           @relation("SharedResources")
  announcements       Announcement[]
  createdEvents       CalendarEvent[]      @relation("EventCreators")
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  notifications       Notification[]
  securityLogs        SecurityLog[]
  notes               UserNote[]
  createdTemplates    LessonTemplate[]
  quizAttempts        QuizAttempt[]
  formResponses       FormResponse[]
  formsCreated        Form[]
  formsSharedWith     Form[]               @relation("FormCollaborators")
  achievements        UserAchievement[]
}

model Course {
  id              String       @id @default(cuid())
  title           String       @db.VarChar(255)
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructor   User?    @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module               Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId             String
  contentBlocks        ContentBlock[]
  completedBy          LessonCompletionRecord[]
  notes                UserNote[]
  associatedTemplates  LessonTemplate[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  maxAttempts Int?          // Nullable for unlimited attempts

  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique
  questions      Question[]
  attempts       QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id        String   @id @default(cuid())
  text      String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         AnswerOption[]
  answerAttempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?  @db.Text

  // Relations
  question        Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  selectedIn      AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
    id              String          @id @default(cuid())
    attemptNumber   Int
    score           Float
    submittedAt     DateTime        @default(now())

    // Relations
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId          String
    answers         AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id              String      @id @default(cuid())
    
    // Relations
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId       String
    question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId      String
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId String

    @@index([attemptId])
}

model Enrollment {
  id          String         @id @default(cuid())
  enrolledAt  DateTime       @default(now())

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  progress       CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float?
  completedAt        DateTime?
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  
  // Relations
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment       Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    completedAt DateTime @default(now())
    type        String   // 'view' or 'quiz'
    score       Float?   // Score for quizzes
    
    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    progressId  String
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId    String
    
    @@unique([progressId, lessonId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?      @db.Text
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  pin          String?      @db.Text
  ispublic     Boolean      @default(true)
  
  // Relations
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?

  parentId String?
  parent   Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children Resource[] @relation("FolderChildren")

  sharedWith User[] @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?
  
  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@index([authorId])
}

model CalendarEvent {
  id                   String            @id @default(cuid())
  title                String
  description          String?           @db.Text
  location             String?
  videoConferenceLink  String?
  start                DateTime
  end                  DateTime
  allDay               Boolean           @default(false)
  audienceType         EventAudienceType @default(ALL)
  color                String?
  attachments          Json?

  // Relations
  creator              User       @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]     @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  
  // Appearance
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?
  fontHeadline               String?
  fontBody                   String?

  // Security
  allowPublicRegistration    Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  enableEmailNotifications   Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  // Password Policy
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  // Content
  resourceCategories         String?  @db.Text
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  type        TemplateType
  
  // Relations
  creatorId         String?
  creator           User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks    TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  // Relations
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}


// --- GAMIFICATION ---

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String            // Name of the lucide-react icon
  points       Int
  
  UserAchievement UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  unlockedAt    DateTime  @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
  @@index([userId])
}

// --- FORMS & SURVEYS ---

model Form {
  id          String          @id @default(cuid())
  title       String
  description String?         @db.Text
  status      FormStatus      @default(DRAFT)
  isQuiz      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  creatorId       String
  creator         User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields          FormField[]
  responses       FormResponse[]
  sharedWith      User[]          @relation("FormCollaborators")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // [{id, text, isCorrect, points}, ...]
  order       Int

  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@index([formId])
}

model FormResponse {
  id          String    @id @default(cuid())
  submittedAt DateTime  @default(now())
  score       Float?    // Score for quizzes

  // Relations
  formId      String
  form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@index([formId])
  @@index([userId])
}

model Answer {
  id      String @id @default(cuid())
  value   String @db.Text

  // Relations
  fieldId      String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([fieldId])
  @@index([responseId])
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String

    @@unique([userId, lessonId])
}
