// Este es tu archivo de esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("postgresql://postgres.lhterxqcezyblzbprjce:Amkj2025*..@aws-1-sa-east-1.pooler.supabase.com:6543/postgres")
  directUrl    = env("postgresql://postgres:Amkj2025*..@db.lhterxqcezyblzbprjce.supabase.co:5432/postgres")
  relationMode = "prisma"
}


// --- ENUMS (Tipos de datos personalizados) ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// --- MODELOS PRINCIPALES ---

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  password                String?
  role                    UserRole                 @default(STUDENT)
  avatar                  String?
  registeredDate          DateTime                 @default(now())
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorSecret         String?
  isActive                Boolean                  @default(true)
  xp                      Int                      @default(0)
  theme                   String?

  createdCourses          Course[]                 @relation("CourseInstructor")
  enrollments             Enrollment[]
  progress                CourseProgress[]         @relation("UserProgress")
  quizAttempts            QuizAttempt[]
  resourcesUploaded       Resource[]               @relation("UploadedResources")
  resourcesSharedWith     Resource[]               @relation("SharedResources")
  announcementsAuthored   Announcement[]
  eventsCreated           CalendarEvent[]
  eventsAttending         CalendarEvent[]          @relation("EventAttendees")
  notifications           Notification[]
  userNotes               UserNote[]
  achievements            UserAchievement[]
  createdForms            Form[]                   @relation("FormCreator")
  formResponses           FormResponse[]
  sharedForms             Form[]                   @relation("FormSharedWith")
  createdTemplates        LessonTemplate[]
  securityLogs            SecurityLog[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?

  instructorId    String?
  instructor      User?            @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
  @@index([category])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType   @default(SINGLE_CHOICE)
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id             String          @id @default(cuid())
  text           String
  isCorrect      Boolean         @default(false)
  feedback       String?
  questionId     String
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt  AnswerAttempt[]
  points         Int             @default(0)

  @@index([questionId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String?                  @unique
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String        @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view', 'quiz', 'video'
  score       Float? // Only for quiz type
  completedAt DateTime      @default(now())
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  field            FormField?   @relation(fields: [formFieldId], references: [id])
  formFieldId      String?
  response         FormResponse? @relation(fields: [formResponseId], references: [id])
  formResponseId   String?
  
  @@index([attemptId])
  @@index([questionId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderContent", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children     Resource[]   @relation("FolderContent")
  category     String?
  tags         String?
  pin          String?
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   String   @default("ALL") // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR"
  priority   String   @default("Normal") // "Normal", "Urgente"
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String           @default("blue")
  creatorId           String
  creator             User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")
  location            String?
  videoConferenceLink String?
  attachments         Json?
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  country      String?
  city         String?

  @@index([userId])
  @@index([event])
}

model Achievement {
  id           String            @id @default(cuid())
  slug         String            @unique
  name         String
  description  String
  icon         String
  points       Int
  users        UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

// --- Formularios y Evaluaciones ---

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]   @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime        @default(now())
  score       Float?          // Score if the form is a quiz
  answers     AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}

// --- Plantillas de Lecciones ---

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?            @relation(fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// Modelo para los Apuntes del Usuario
model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  lessonId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- Configuración de la Plataforma ---
model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  
  primaryColor                String?   @default("#6366f1") // Indigo-500
  secondaryColor              String?   @default("#a5b4fc") // Indigo-300
  accentColor                 String?   @default("#ec4899") // Pink-500
  backgroundColorLight        String?   @default("#f8fafc") // Slate-50
  primaryColorDark            String?   @default("#a5b4fc") // Indigo-300
  backgroundColorDark         String?   @default("#020617") // Slate-950
  
  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
  
  allowPublicRegistration     Boolean   @default(true)
  emailWhitelist              String?   // Comma-separated domains
  enableEmailNotifications    Boolean   @default(true)
  
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)

  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  
  resourceCategories          String?   @db.Text // Comma-separated list
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}
