// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// ENUMS
// --------------------------------------
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --------------------------------------
// MODELS
// --------------------------------------

model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  xp                  Int              @default(0)
  registeredDate      DateTime         @default(now())
  isActive            Boolean          @default(true)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  createdCourses      Course[]         @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  quizAttempts        QuizAttempt[]
  notifications       Notification[]
  userNotes           UserNote[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  createdAnnouncements Announcement[]
  uploadedResources   Resource[]
  sharedResources     Resource[]       @relation("SharedWithUsers")
  securityLogs        SecurityLog[]
  createdForms        Form[]
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]
  unlockedAchievements UserAchievement[]

  @@map("User")
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("Course")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@orderBy([order])
  @@map("Module")
}

model Lesson {
  id          String        @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes   UserNote[]
  completions LessonCompletionRecord[]

  @@orderBy([order])
  @@map("Lesson")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@orderBy([order])
  @@map("ContentBlock")
}

model Quiz {
  id            String         @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?
  contentBlockId String         @unique
  contentBlock  ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]

  @@map("Quiz")
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@orderBy([order])
  @@map("Question")
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  feedback   String?
  points     Int             @default(0)
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@map("AnswerOption")
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model CourseProgress {
  id                String                   @id @default(cuid())
  userId            String
  courseId          String
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt       DateTime?
  enrollmentId      String                   @unique
  enrollment        Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@map("CourseProgress")
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime       @default(now())
  type         String         @default("view") // 'view', 'quiz', 'video'
  score        Float?

  @@unique([progressId, lessonId])
  @@map("LessonCompletionRecord")
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@map("QuizAttempt")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("AnswerAttempt")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  uploader    User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin      Boolean      @default(false)
  pin         String?
  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children    Resource[]   @relation("FolderChildren")
  ispublic    Boolean      @default(true)
  sharedWith  User[]       @relation("SharedWithUsers")

  @@map("Resource")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   @default("ALL") // Can be 'ALL', or a UserRole
  priority  String   @default("Normal")
  
  @@map("Announcement")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("Notification")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean   @default(false)
  location    String?
  audienceType EventAudienceType @default(ALL)
  attendees   User[]    @relation("EventAttendees")
  color       String    @default("blue")
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  videoConferenceLink String?
  attachments Json? // [{ name: string, url: string }]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("CalendarEvent")
}

model SecurityLog {
  id          String            @id @default(cuid())
  userId      String?
  user        User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  event       SecurityLogEvent
  ipAddress   String?
  userAgent   String?
  details     String?
  createdAt   DateTime          @default(now())
  country     String?
  city        String?
  emailAttempt String?
  
  @@map("SecurityLog")
}

model UserNote {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content    String   @db.Text
  color      String   @default("yellow")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("UserNote")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated list of domains
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  resourceCategories        String?   // Comma-separated list
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  updatedAt                 DateTime  @updatedAt
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sharedWith   User[]         @relation("SharedForms")
  
  @@map("Form")
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json?         // [{id: string, text: string, isCorrect?: boolean, points?: number}]
  required     Boolean       @default(false)
  placeholder  String?
  order        Int
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@map("FormField")
}

model FormResponse {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime      @default(now())
  answers     FormAnswer[]
  score       Float?        // For quizzes

  @@map("FormResponse")
}

model FormAnswer {
  id        String      @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId   String
  field     FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value     String

  @@map("FormAnswer")
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("USER") // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  createdAt      DateTime        @default(now())
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@orderBy([order])
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String?
  points      Int               @default(0)
  users       UserAchievement[]

  @@map("Achievement")
}

model UserAchievement {
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
  @@map("UserAchievement")
}
