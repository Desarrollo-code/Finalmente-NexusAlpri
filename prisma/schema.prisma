// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  CHECKBOX
  DATE
  NUMBER
}


// --- MODELS ---
model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  password              String
  role                  UserRole               @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?              @default(now())
  theme                 String?                @default("dark")
  xp                    Int?                   @default(0)

  // Relations
  createdCourses        Course[]               @relation("CreatedCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  notes                 UserNote[]
  createdLessonTemplates LessonTemplate[]       @relation("CreatedTemplates")
  uploadedResources     EnterpriseResource[]   @relation("UploadedResources")
  sharedResources       EnterpriseResource[]   @relation("SharedResources")
  createdEvents         CalendarEvent[]        @relation("CreatedEvents")
  attendingEvents       CalendarEvent[]        @relation("AttendingEvents")
  notifications         Notification[]
  announcements         Announcement[]
  createdForms          Form[]                 @relation("CreatedForms")
  sharedForms           Form[]                 @relation("SharedForms")
  formResponses         FormResponse[]

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Course {
  id              String           @id @default(uuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Module {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id            String          @id @default(uuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentBlock {
  id        String     @id @default(uuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Quiz {
  id             String        @id @default(uuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Question {
  id      String         @id @default(uuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AnswerOption {
  id        String   @id @default(uuid())
  text      String
  isCorrect Boolean
  feedback  String?  @db.Text
  questionId String
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Enrollment {
  id           String          @id @default(uuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(uuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float?                   @default(0)
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id String @id @default(uuid())
    progressId String
    progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId String
    lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type String // 'view' or 'quiz'
    score Float? // Only for quiz types

    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  submittedAt DateTime @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(uuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model EnterpriseResource {
  id           String    @id @default(uuid())
  title        String
  description  String?   @db.Text
  type         String    // FOLDER, DOCUMENT, GUIDE, VIDEO, LINK, etc.
  url          String?
  category     String
  tags         String?
  uploadDate   DateTime  @default(now())
  uploaderId   String
  uploader     User      @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("FolderChildren")
  pin          String?
  ispublic     Boolean   @default(true)
  sharedWith   User[]    @relation("SharedResources")
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model CalendarEvent {
  id                 String    @id @default(uuid())
  title              String
  description        String?   @db.Text
  start              DateTime
  end                DateTime
  allDay             Boolean   @default(false)
  location           String?
  videoConferenceLink String?
  color              String    @default("blue")
  attachments        Json?
  audienceType       String    // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  
  creatorId            String
  creator              User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees            User[]            @relation("AttendingEvents")

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     @default("\"ALL\"") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR
  priority  String   @default("Normal")
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model PlatformSettings {
  id                       String    @id @default(uuid())
  platformName             String    @default("NexusAlpri")
  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   // Comma-separated list of allowed domains or emails
  resourceCategories       String    @default("General,Recursos Humanos,TI,Ventas")
  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)
  require2faForAdmins      Boolean   @default(false)
  
  primaryColor             String?   @default("#6366f1")
  secondaryColor           String?   @default("#a5b4fc")
  accentColor              String?   @default("#ec4899")
  backgroundColorLight     String?   @default("#f8fafc")
  primaryColorDark         String?   @default("#a5b4fc")
  backgroundColorDark      String?   @default("#020617")

  fontHeadline             String?   @default("Space Grotesk")
  fontBody                 String?   @default("Inter")
  
  logoUrl                  String?
  watermarkUrl             String?
  landingImageUrl          String?
  authImageUrl             String?
  aboutImageUrl            String?
  benefitsImageUrl         String?

  updatedAt                DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(uuid())
  event        String
  details      String?          @db.Text
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  country      String?
  city         String?
}

model Achievement {
  id              String            @id @default(cuid())
  slug            String            @unique
  name            String
  description     String
  icon            String?
  points          Int               @default(50)
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement   @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime      @default(now())

  @@id([userId, achievementId])
}

model Form {
  id             String          @id @default(uuid())
  title          String
  description    String?         @db.Text
  status         FormStatus      @default(DRAFT)
  creatorId      String
  creator        User            @relation("CreatedForms", fields: [creatorId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  fields         FormField[]
  responses      FormResponse[]
  sharedWith     User[]          @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(uuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For select, radio, checkbox
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FormResponse {
  id        String       @id @default(uuid())
  formId    String
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime   @default(now())
  answers   Json
}

model LessonTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String   // SYSTEM, USER
  creatorId   String?  // Null for system templates
  creator     User?    @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TemplateBlock {
  id         String @id @default(uuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
}
