// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  role                  UserRole               @default(STUDENT)
  avatar                String?
  theme                 String?                @default("dark")
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?              @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  coursesOwned          Course[]
  enrollments           Enrollment[]
  announcements         Announcement[]
  createdResources      Resource[]
  createdEvents         CalendarEvent[]
  notifications         Notification[]
  notes                 UserNote[]
  sharedResources       Resource[]             @relation("SharedResources")
  attendedEvents        CalendarEvent[]        @relation("EventAttendees")
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String               @id @default(cuid())
  title           String
  description     String?              @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus         @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?                @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  learningPaths   LearningPathCourse[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id            String                 @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?         @db.Text
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  submittedAt DateTime        @default(now())
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
  progressPercentage Float                    @default(0)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String // 'view' or 'quiz'
  score      Float?
  completedAt DateTime      @default(now())

  @@unique([progressId, lessonId])
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  ispublic     Boolean  @default(false)
  pin          String?
  uploadDate   DateTime @default(now())
  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children     Resource[] @relation("FolderHierarchy")
  sharedWith   User[]     @relation("SharedResources")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json
  priority  String   @default("Normal") // "Normal" or "Urgente"
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  videoConferenceLink String?
  color               String
  audienceType        String // e.g., ALL, ADMINISTRATOR, STUDENT, INSTRUCTOR, SPECIFIC
  attachments         Json?
  creatorId           String
  creator             User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]       @relation("EventAttendees")
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  
  primaryColor               String? @default("#673AB7")
  secondaryColor             String? @default("#81C784")
  accentColor                String? @default("#6F42C1")
  backgroundColorLight       String? @default("#FFFFFF")
  primaryColorDark           String? @default("#BB86FC")
  backgroundColorDark        String? @default("#121212")

  fontHeadline               String?  @default("Space Grotesk")
  fontBody                   String?  @default("Inter")

  allowPublicRegistration    Boolean  @default(true)
  emailWhitelist             String?
  enableEmailNotifications   Boolean  @default(true)
  
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  updatedAt                  DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  details      String?
  createdAt    DateTime         @default(now())

  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER)
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model LearningPath {
  id          String                 @id @default(cuid())
  title       String
  description String?
  courses     LearningPathCourse[]
  enrollments LearningPathEnrollment[]
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  pathId         String
  path           LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int

  @@unique([pathId, courseId])
  @@index([courseId])
}

model LearningPathEnrollment {
  id     String       @id @default(cuid())
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId String
  path   LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)

  @@unique([userId, pathId])
}
