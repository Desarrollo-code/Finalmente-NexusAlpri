generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  avatar               String?
  role                 UserRole          @default(STUDENT)
  isActive             Boolean           @default(true)
  registeredDate       DateTime          @default(now())
  lastLogin            DateTime?
  xp                   Int               @default(0)
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  createdAnnouncements Announcement[]    @relation("CreatedAnnouncements")
  createdEvents        CalendarEvent[]   @relation("CreatedEvents")
  createdCourses       Course[]          @relation("CreatedCourses")
  enrollments          Enrollment[]
  createdForms         Form[]            @relation("CreatedForms")
  formResponses        FormResponse[]
  createdTemplates     LessonTemplate[]  @relation("CreatedTemplates")
  notifications        Notification[]
  quizAttempts         QuizAttempt[]
  uploadedResources    Resource[]        @relation("UploadedResources")
  securityLogs         SecurityLog[]
  achievements         UserAchievement[]
  notes                UserNote[]
  attendedEvents       CalendarEvent[]   @relation("AttendedEvents")
  sharedForms          Form[]            @relation("SharedForms")
  sharedResources      Resource[]        @relation("SharedResources")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?
  instructorId    String
  instructor      User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  modules         Module[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  lessons   Lesson[]
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Lesson {
  id            String                   @id @default(cuid())
  title         String
  order         Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  moduleId      String
  contentBlocks ContentBlock[]
  module        Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completions   LessonCompletionRecord[]
  notes         UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  questions      Question[]
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  attempts       QuizAttempt[]
}

model Question {
  id      String          @id @default(cuid())
  text    String
  order   Int
  quizId  String
  answers AnswerAttempt[]
  options AnswerOption[]
  quiz    Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model AnswerOption {
  id            String          @id @default(cuid())
  text          String
  isCorrect     Boolean         @default(false)
  feedback      String?
  questionId    String
  AnswerAttempt AnswerAttempt[]
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  progress   CourseProgress?
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime       @default(now())
  type        String
  score       Float?
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

  @@index([attemptId])
  @@index([questionId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime     @default(now())
  pin         String?
  ispublic    Boolean      @default(true)
  uploaderId  String?
  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Resource[]   @relation("FolderChildren")
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id])
  sharedWith  User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String
  date     DateTime @default(now())
  priority String?  @default("Normal")
  authorId String
  audience Json     @default("\"ALL\"")
  author   User     @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json?
  color               String?  @default("blue")
  creatorId           String
  audienceType        String
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("AttendedEvents")

  @@index([creatorId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
  user         User?            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories         String   @default("General,Recursos Humanos,Ventas")
  primaryColor               String   @default("#6366f1")
  secondaryColor             String   @default("#a5b4fc")
  accentColor                String   @default("#ec4899")
  backgroundColorLight       String   @default("#f8fafc")
  fontHeadline               String   @default("Space Grotesk")
  fontBody                   String   @default("Inter")
  primaryColorDark           String   @default("#a5b4fc")
  backgroundColorDark        String   @default("#020617")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  updatedAt                  DateTime @updatedAt
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String?
  points      Int
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id          String               @id @default(cuid())
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean              @default(false)
  options     Json?
  order       Int
  formId      String
  form        Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String               @id @default(cuid())
  submittedAt DateTime             @default(now())
  score       Float?
  formId      String
  userId      String
  form        Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id         String       @id @default(cuid())
  value      String
  responseId String
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String
  creatorId      String?
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}
