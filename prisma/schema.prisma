// prisma/schema.prisma 

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum TemplateType {
  SYSTEM
  USER
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String
  password             String
  role                 UserRole               @default(STUDENT)
  avatar               String?
  isActive             Boolean                @default(true)
  registeredDate       DateTime?              @default(now())
  isTwoFactorEnabled   Boolean                @default(false)
  twoFactorSecret      String?
  xp                   Int?                   @default(0)

  // Relations
  courses              Course[]
  enrollments          Enrollment[]
  progress             CourseProgress[]
  announcements        Announcement[]
  notifications        Notification[]
  createdEvents        CalendarEvent[]        @relation("CreatedEvents")
  attendedEvents       CalendarEvent[]        @relation("EventAttendees")
  uploadedResources    Resource[]             @relation("UploadedResources")
  sharedResources      Resource[]             @relation("SharedResources")
  createdForms         Form[]                 @relation("CreatedForms")
  sharedForms          Form[]
  formResponses        FormResponse[]
  userNotes            UserNote[]
  securityLogs         SecurityLog[]
  createdTemplates     LessonTemplate[]
  achievements         UserAchievement[]
  quizAttempts         QuizAttempt[]
}

model Course {
  id               String       @id @default(cuid())
  title            String
  description      String       @db.Text
  category         String?
  imageUrl         String?
  status           CourseStatus @default(DRAFT)
  publicationDate  DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  instructor   User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId String
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completedBy   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String   @id @default(cuid())
  text      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean
  feedback     String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  enrolledAt  DateTime       @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  progress      CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?

  // Relations
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  course            Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollment        Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId      String                   @unique
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String   @id @default(cuid())
  completedAt  DateTime @default(now())
  type         String
  score        Float?

  // Relations
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model QuizAttempt {
    id            String   @id @default(cuid())
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    // Relations
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    quiz     Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId   String
    answers  AnswerAttempt[]

    @@index([userId])
    @@index([quizId])
}

model AnswerAttempt {
    id        String   @id @default(cuid())
    
    // Relations
    attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId        String
    question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId       String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId String

    @@index([attemptId])
    @@index([questionId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?
  parentId    String?
  ispublic    Boolean      @default(true)
  pin         String?      @db.Text

  // Relations
  uploader          User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId        String?
  parent            Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction)
  children          Resource[] @relation("FolderChildren")
  sharedWith        User[]     @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal")

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  color               String?            @default("blue")
  audienceType        EventAudienceType  @default(ALL)
  location            String?
  videoConferenceLink String?
  attachments         Json?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  creator              User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]     @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  city         String?
  country      String?
  emailAttempt String?

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?

  @@index([userId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  type           TemplateType
  createdAt      DateTime        @default(now())

  // Relations
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int

  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String

  @@index([templateId])
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist             String?   @db.Text

  // Password Policies
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)

  // Security
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)

  // Customization
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")

  // Categories & Tags
  resourceCategories         String?   @db.Text

  updatedAt                  DateTime  @updatedAt
}

model Form {
    id            String    @id @default(cuid())
    title         String
    description   String?   @db.Text
    status        FormStatus @default(DRAFT)
    isQuiz        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    creator       User      @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId     String
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]

    @@index([creatorId])
}

model FormField {
    id          String        @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json?
    required    Boolean       @default(false)
    placeholder String?
    order       Int

    // Relations
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId      String
    answers     FormAnswer[]

    @@index([formId])
}

model FormResponse {
    id           String       @id @default(cuid())
    submittedAt  DateTime     @default(now())
    score        Float?

    // Relations
    form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId       String
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    answers      FormAnswer[]

    @@index([formId])
    @@index([userId])
}

model FormAnswer {
    id        String   @id @default(cuid())
    value     String   @db.Text

    // Relations
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    fieldId    String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    responseId String

    @@index([fieldId])
    @@index([responseId])
}

model Achievement {
    id          String    @id @default(cuid())
    slug        AchievementSlug @unique
    name        String
    description String
    points      Int
    icon        String?

    // Relations
    users       UserAchievement[]
}

model UserAchievement {
    id            String    @id @default(cuid())
    unlockedAt    DateTime  @default(now())

    // Relations
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    achievementId String
    
    @@unique([userId, achievementId])
    @@index([userId])
    @@index([achievementId])
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String

    @@unique([userId, lessonId])
   
