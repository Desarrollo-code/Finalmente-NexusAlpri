// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  name                 String
  password             String
  avatar               String?
  role                 UserRole         @default(STUDENT)
  isActive             Boolean          @default(true)
  isTwoFactorEnabled   Boolean          @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime         @default(now())
  lastLogin            DateTime?
  xp                   Int              @default(0)
  theme                String?
  coursesCreated       Course[]         @relation("InstructorCourses")
  enrollments          Enrollment[]
  notes                UserNote[]
  achievements         UserAchievement[]
  uploadedResources    Resource[]       @relation("UploadedResources")
  securityLogs         SecurityLog[]    @relation("UserSecurityLogs")
  createdAnnouncements Announcement[]
  createdEvents        CalendarEvent[]  @relation("EventCreators")
  attendedEvents       CalendarEvent[]  @relation("EventAttendees")
  createdForms         Form[]           @relation("FormCreators")
  formResponses        FormResponse[]
  createdTemplates     LessonTemplate[] @relation("UserTemplates")
  quizAttempts         QuizAttempt[]
  sharedResources      Resource[]       @relation("SharedResources")
  sharedForms          Form[]           @relation("SharedForms")
  notifications        Notification[]
  courseProgresses     CourseProgress[]
}

model Course {
  id              String           @id @default(uuid())
  title           String
  description     String           @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructorId    String
  instructor      User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id       String   @id @default(uuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id                     String                   @id @default(uuid())
  title                  String
  order                  Int
  moduleId               String
  module                 Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks          ContentBlock[]
  userNotes              UserNote[]
  completions            LessonCompletionRecord[]
  templates              LessonTemplate[]         @relation("LessonTemplates")
}

model ContentBlock {
  id         String     @id @default(uuid())
  type       LessonType
  content    String?    @db.Text
  order      Int
  lessonId   String
  lesson     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz       Quiz?
}

model Quiz {
  id             String         @id @default(uuid())
  title          String
  description    String?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  maxAttempts    Int?
  attempts       QuizAttempt[]
}

model Question {
  id        String          @id @default(uuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id            String          @id @default(uuid())
  text          String
  isCorrect     Boolean
  feedback      String?
  questionId    String
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id         String          @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                   String                   @id @default(uuid())
  userId               String
  courseId             String
  enrollmentId         String                   @unique
  progressPercentage   Float                    @default(0)
  completedAt          DateTime?
  lastActivity         DateTime?                @updatedAt
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment           Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons     LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String         @id @default(uuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String // e.g., 'view', 'quiz', 'video'
  score       Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(uuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Restrict)
}

model Resource {
  id           String     @id @default(uuid())
  title        String
  description  String?    @db.Text
  type         String // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  category     String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String
  uploader     User       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  pin          String?
  ispublic     Boolean    @default(true)
  tags         String?
  parentId     String?
  parent       Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  children     Resource[] @relation("FolderHierarchy")
  sharedWith   User[]     @relation("SharedResources")
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Announcement {
  id           String   @id @default(uuid())
  title        String
  content      String   @db.Text
  date         DateTime @default(now())
  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience     String // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR" or JSON array of roles
  priority     String   @default("Normal")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id                  String  @id @default(uuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean @default(false)
  location            String?
  audienceType        String // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR", "SPECIFIC"
  color               String  @default("blue")
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User    @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]  @relation("EventAttendees")
}

model Achievement {
  id          String          @id @default(uuid())
  slug        String          @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model SecurityLog {
  id           String           @id @default(uuid())
  event        SecurityLogEvent
  userId       String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  emailAttempt String?
  country      String?
  city         String?
  user         User?            @relation("UserSecurityLogs", fields: [userId], references: [id], onDelete: SetNull)
}

model LessonTemplate {
  id              String          @id @default(uuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?           @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]        @relation("LessonTemplates")
}

model TemplateBlock {
  id         String @id @default(uuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("FormCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(uuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  options     Json? // [{id: "uuid", text: "Option 1", isCorrect: true, points: 10}]
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id          String       @id @default(uuid())
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime     @default(now())
  score       Float? // Percentage score if it's a quiz
  answers     FormAnswer[]
}

model FormAnswer {
  id          String       @id @default(uuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value       String       @db.Text
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  primaryColor              String?  @default("#6366f1")
  secondaryColor            String?  @default("#a5b4fc")
  accentColor               String?  @default("#ec4899")
  backgroundColorLight      String?  @default("#f8fafc")
  primaryColorDark          String?  @default("#a5b4fc")
  backgroundColorDark       String?  @default("#020617")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?  @default("Space Grotesk")
  fontBody                  String?  @default("Inter")
  updatedAt                 DateTime @updatedAt
}

// RELACIONES IMPLÍCITAS (PRISMA LAS MANEJA)
// _SharedResources (User-Resource)
// _SharedForms (User-Form)
// _EventAttendees (User-CalendarEvent)
// _LessonTemplates (Lesson-LessonTemplate)