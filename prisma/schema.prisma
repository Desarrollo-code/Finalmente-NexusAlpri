
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String          @id @default(cuid())
  name                 String
  email                String          @unique
  password             String
  role                 UserRole        @default(STUDENT)
  avatar               String?
  isTwoFactorEnabled   Boolean         @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime        @default(now())
  uploadedResources    Resource[]      @relation("UploadedResources")
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  createdCourses       Course[]        @relation("CreatedCourses")
  calendarEvents       CalendarEvent[] @relation("EventAttendees")
  announcements        Announcement[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model Course {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus    @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id          String           @id @default(cuid())
  title       String
  content     String?          @db.Text
  type        LessonType
  order       Int
  moduleId    String
  module      Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quiz        Quiz?
  completedBy CourseProgress[] @relation(name: "CompletedLessons")
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  lessonId    String     @unique
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id        String         @id @default(cuid())
  text      String         @db.Text
  type      QuestionType
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}


model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  userId             String
  courseId           String
  completedLessonIds String         @db.Text // JSON array of lesson IDs
  progressPercentage Float          @default(0)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   Lesson[]       @relation(name: "CompletedLessons")

  @@id([userId, courseId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String
  tags        String?      @db.Text
  url         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  pin         String?
  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderChildren")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  String // 'ALL', or a JSON array of UserRole
  priority  String? // 'Normal', 'Urgente'
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  start        DateTime
  end          DateTime
  allDay       Boolean  @default(false)
  location     String?
  audienceType String? // 'ALL', a UserRole, or 'SPECIFIC'
  color        String?
  attendees    User[]   @relation("EventAttendees")
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  updatedAt                  DateTime @updatedAt
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  resourceCategories         String   @db.Text @default("[]")
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
}
