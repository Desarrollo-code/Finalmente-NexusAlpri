// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================
//        CORE MODELS
// =================================

model User {
  id                   String @id @default(cuid())
  email                String @unique
  name                 String
  password             String
  role                 UserRole @default(STUDENT)
  avatar               String?
  registeredDate       DateTime? @default(now())
  isTwoFactorEnabled   Boolean  @default(false)
  twoFactorSecret      String?
  isActive             Boolean  @default(true)
  xp                   Int      @default(0)

  // Relations
  coursesAsInstructor  Course[]
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  uploadedResources    Resource[]      @relation("UploadedResources")
  sharedResources      Resource[]      @relation("SharedResources")
  announcements        Announcement[]
  notifications        Notification[]
  notes                UserNote[]
  achievements         UserAchievement[]
  createdEvents        CalendarEvent[] @relation("CreatedEvents")
  attendedEvents       CalendarEvent[] @relation("EventAttendees")
  securityLogs         SecurityLog[]
  createdForms         Form[]          @relation("CreatedForms")
  sharedForms          Form[]          @relation("SharedForms")
  formResponses        FormResponse[]
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?

  // Relations
  instructor   User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id       String   @id @default(cuid())
  title    String
  order    Int
  moduleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module        Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int
    lessonId  String

    // Relations
    lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz   Quiz?
}

// =================================
//        QUIZ MODELS
// =================================

model Quiz {
    id            String    @id @default(cuid())
    title         String
    description   String?
    contentBlockId String   @unique
    maxAttempts   Int? // Nullable: null means infinite attempts

    // Relations
    contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions    Question[]
    attempts     QuizAttempt[]
}

model Question {
    id      String   @id @default(cuid())
    text    String   @db.Text
    order   Int
    quizId  String

    // Relations
    quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options AnswerOption[]
    attempts AnswerAttempt[]
}

model AnswerOption {
    id          String   @id @default(cuid())
    text        String
    isCorrect   Boolean  @default(false)
    feedback    String?
    questionId  String

    // Relations
    question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
    AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id            String          @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float // Score percentage for this attempt
    submittedAt   DateTime        @default(now())
    
    // Relations
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id               String       @id @default(cuid())
    attemptId        String
    questionId       String
    selectedOptionId String
    
    // Relations
    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}


// =================================
//        USER PROGRESS
// =================================

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollmentId       String?                  @unique
  completedLessons   LessonCompletionRecord[]

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id           String   @id @default(cuid())
    progressId   String
    lessonId     String
    type         String // 'view' or 'quiz'
    score        Float?   // Only for 'quiz' type
    completedAt  DateTime @default(now())

    // Relations
    progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}


// =================================
//        GLOBAL CONTENT
// =================================

model Resource {
    id          String       @id @default(cuid())
    title       String
    description String?      @db.Text
    type        ResourceType
    url         String?
    category    String?
    tags        String?
    uploadDate  DateTime     @default(now())
    ispublic    Boolean      @default(true)
    pin         String? // Hashed PIN for secure access
    
    // Relations
    uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
    uploaderId   String?
    parentId     String?
    parent       Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
    children     Resource[]   @relation("FolderChildren")
    sharedWith   User[]       @relation("SharedResources")
}

model Announcement {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text
    date      DateTime @default(now())
    authorId  String
    audience  Json     // Can be 'ALL' or an array of UserRole
    priority  String   @default("Normal") // "Normal" | "Urgente"
    
    // Relations
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String             @id @default(cuid())
    title               String
    description         String?            @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean            @default(false)
    color               String             @default("blue")
    audienceType        EventAudienceType
    videoConferenceLink String?
    attachments         Json? // Array of { name: string, url: string }

    // Relations
    creator   User   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String
    attendees User[] @relation("EventAttendees")
}

model Notification {
    id          String   @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =================================
//      SYSTEM & CONFIGURATION
// =================================

model PlatformSettings {
    id                         String  @id @default(cuid())
    platformName               String  @default("NexusAlpri")
    allowPublicRegistration    Boolean @default(true)
    enableEmailNotifications   Boolean @default(true)
    emailWhitelist             String?
    
    // Password Policy
    passwordMinLength            Int     @default(8)
    passwordRequireUppercase     Boolean @default(true)
    passwordRequireLowercase     Boolean @default(true)
    passwordRequireNumber        Boolean @default(true)
    passwordRequireSpecialChar   Boolean @default(true)
    
    // Security
    enableIdleTimeout   Boolean @default(true)
    idleTimeoutMinutes  Int     @default(20)
    require2faForAdmins Boolean @default(false)

    // Content
    resourceCategories String? // Comma-separated list

    // Theming & Branding
    primaryColor        String?
    secondaryColor      String?
    accentColor         String?
    backgroundColorLight String?
    primaryColorDark    String?
    backgroundColorDark String?
    logoUrl             String?
    watermarkUrl        String?
    landingImageUrl     String?
    authImageUrl        String?
    aboutImageUrl       String?
    benefitsImageUrl    String?

    updatedAt DateTime @updatedAt
}

model SecurityLog {
    id           String           @id @default(cuid())
    event        SecurityLogEvent
    ipAddress    String?
    userAgent    String?
    details      String?
    createdAt    DateTime         @default(now())
    userId       String?
    emailAttempt String?
    country      String?
    city         String?

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
    
    @@index([userId])
    @@index([event])
}

// =================================
//        GAMIFICATION
// =================================

model Achievement {
    id              String            @id @default(cuid())
    slug            AchievementSlug   @unique
    name            String
    description     String
    icon            String
    points          Int
    
    // Relations
    userAchievements UserAchievement[]
}

model UserAchievement {
    userId        String
    achievementId String
    unlockedAt    DateTime @default(now())
    
    // Relations
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}

// =================================
//        TEMPLATES
// =================================
model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType // SYSTEM or USER
  creatorId      String?      // Null for SYSTEM templates
  createdAt      DateTime        @default(now())

  // Relations
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String

  // Relations
  template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// =================================
//        FORMS & SURVEYS
// =================================

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For multiple choice, select, etc. [{id: "...", text: "...", isCorrect: false, points: 10}]
  order       Int
  
  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]
}

model FormResponse {
    id          String   @id @default(cuid())
    formId      String
    userId      String
    submittedAt DateTime @default(now())
    score       Float?   // Score if the form is a quiz

    // Relations
    form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     FormResponseAnswer[]
}

model FormResponseAnswer {
    id         String   @id @default(cuid())
    responseId String
    fieldId    String
    value      String   @db.Text // Can be simple text or JSON for multiple choice

    // Relations
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@unique([responseId, fieldId])
}

// =================================
//            ENUMS
// =================================

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
  DATE
  RATING
}
