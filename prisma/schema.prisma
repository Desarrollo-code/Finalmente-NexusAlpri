// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
// Se añaden los enums aquí para que el esquema sea válido.

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                      String    @id @default(cuid())
  name                    String
  email                   String    @unique
  password                String
  avatar                  String?
  role                    UserRole  @default(STUDENT)
  isTwoFactorEnabled      Boolean   @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime  @default(now())
  isActive                Boolean   @default(true)
  lastLogin               DateTime?
  xp                      Int       @default(0)

  // Relations
  coursesCreated          Course[]      @relation("CreatedCourses")
  enrollments             Enrollment[]
  createdAnnouncements    Announcement[]
  notifications           Notification[]
  userNotes               UserNote[]
  createdEvents           CalendarEvent[] @relation("CreatedEvents")
  uploadedResources       Resource[]    @relation("UploadedResources")
  quizAttempts            QuizAttempt[]
  createdLessonTemplates  LessonTemplate[] @relation("CreatedTemplates")
  formResponses           FormResponse[]
  createdForms            Form[]          @relation("CreatedForms")

  // Many-to-Many
  achievements UserAchievement[]
  sharedResources Resource[] @relation("SharedResources")
  sharedForms Form[] @relation("SharedForms")
  attendedEvents CalendarEvent[] @relation("EventAttendees")
  securityLogs SecurityLog[] @relation("SecurityLogs")

  @@map("users")
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId    String
  instructor      User        @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  module      Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks   ContentBlock[]
  completions     LessonCompletionRecord[]
  notes           UserNote[]
  templates       LessonTemplate[] @relation("LessonTemplates")

  @@map("lessons")
}

model ContentBlock {
  id          String   @id @default(cuid())
  type        LessonType
  content     String?  @db.Text
  order       Int
  
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz        Quiz?

  @@map("content_blocks")
}


model Quiz {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  contentBlockId String     @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id          String    @id @default(cuid())
  text        String
  order       Int
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  
  AnswerAttempt AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  points      Int       @default(0)
  feedback    String?
  
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}

model QuizAttempt {
  id            String    @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id                String  @id @default(cuid())
  quizAttemptId     String
  questionId        String
  selectedOptionId  String
  
  quizAttempt       QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question          Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  progressPercentage Float   @default(0)
  completedAt  DateTime?
  enrollmentId String    @unique
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String    @id @default(cuid())
    progressId  String
    lessonId    String
    completedAt DateTime  @default(now())
    type        String    // 'view', 'quiz', 'video'
    score       Float?

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  color       String   @default("yellow")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         String      // FOLDER, DOCUMENT, VIDEO, LINK, etc.
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime    @default(now())
  
  uploaderId   String
  uploader     User        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  
  pin          String?
  ispublic     Boolean     @default(true)

  // Self-relation for folders
  parentId     String?
  parent       Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[]  @relation("FolderHierarchy")

  // Many-to-many with User for sharing
  sharedWith   User[]      @relation("SharedResources")

  @@map("resources")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   String   // "ALL", o JSON array de roles: ["STUDENT", "INSTRUCTOR"]
  priority   String   @default("Normal") // "Normal", "Urgente"

  @@map("announcements")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  start       DateTime
  end         DateTime
  allDay      Boolean  @default(false)
  location    String?
  color       String?
  
  audienceType String   @default("ALL") // "ALL", "ADMINISTRATOR", "INSTRUCTOR", "STUDENT", "SPECIFIC"
  
  creatorId   String
  creator     User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)

  attendees   User[]   @relation("EventAttendees")

  videoConferenceLink String?
  attachments         Json?

  @@map("calendar_events")
}

model SecurityLog {
  id            String   @id @default(cuid())
  event         SecurityLogEvent
  userId        String?
  ipAddress     String?
  userAgent     String?
  details       String?
  createdAt     DateTime @default(now())
  emailAttempt  String?  
  country       String?
  city          String?
  
  user          User?    @relation("SecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model LessonTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            TemplateType @default(USER)
  creatorId       String?
  
  creator         User?          @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]       @relation("LessonTemplates")

  @@map("lesson_templates")
}

model TemplateBlock {
  id              String      @id @default(cuid())
  templateId      String
  type            LessonType
  order           Int
  
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}


model Achievement {
  id          String    @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int

  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
  @@map("user_achievements")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")

  allowPublicRegistration   Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated domains
  enableEmailNotifications  Boolean   @default(true)

  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  
  resourceCategories        String?
  
  updatedAt                 DateTime  @updatedAt
}

model Form {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  status       FormStatus  @default(DRAFT)
  isQuiz       Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  creatorId    String
  creator      User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]      @relation("SharedForms")
}

model FormField {
  id           String      @id @default(cuid())
  formId       String
  form         Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  label        String
  type         FormFieldType
  required     Boolean     @default(false)
  placeholder  String?
  options      Json?       // For select, radio, checkbox
  order        Int
  
  answers      FormResponseAnswer[]
}

model FormResponse {
  id           String      @id @default(cuid())
  formId       String
  form         Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  submittedAt  DateTime    @default(now())
  score        Float?      // Percentage score if it's a quiz
  
  answers      FormResponseAnswer[]
}

model FormResponseAnswer {
  id           String      @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId      String
  field        FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value        String      @db.Text // Storing all answers as string, JSON string for multiple choice
}
