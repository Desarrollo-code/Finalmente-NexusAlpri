// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---
model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime? @default(now())
  theme               String?
  xp                  Int?      @default(0)
  isActive            Boolean   @default(true)
  
  coursesAuthored     Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  createdEvents       CalendarEvent[] @relation("EventCreators")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  uploadedResources   Resource[]
  notes               UserNote[]
  courseProgresses    CourseProgress[]
  createdTemplates    LessonTemplate[]
  createdAnnouncements Announcement[]
  createdForms         Form[]          @relation("FormCreator")
  sharedForms          Form[]          @relation("SharedForms")
  formResponses        FormResponse[]
  quizAttempts         QuizAttempt[]

  achievements UserAchievement[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  
  instructor    User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules       Module[]
  enrollments   Enrollment[]
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String

  module          Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  userNotes       UserNote[]
  completionRecords LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  maxAttempts    Int?

  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String

  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  feedback    String?
  questionId  String

  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers AnswerAttempt[]
}

model AnswerAttempt {
    id               String @id @default(cuid())
    quizAttemptId    String
    questionId       String
    selectedOptionId String
    
    quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String    @unique
  progressPercentage Float?
  lastActivity       DateTime? @updatedAt
  completedAt        DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]
}

model LessonCompletionRecord {
    id              String @id @default(cuid())
    progressId      String
    lessonId        String
    type            String // 'view' or 'quiz'
    score           Float?
    completedAt     DateTime @default(now())

    progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  Json
  priority  String?  @default("Normal")
  
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?
  resourceCategories         String   @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt

  primaryColor          String?
  secondaryColor        String?
  accentColor           String?
  backgroundColorLight  String?
  primaryColorDark      String?
  backgroundColorDark   String?
  fontHeadline          String?
  fontBody              String?
  logoUrl               String?
  watermarkUrl          String?
  landingImageUrl       String?
  authImageUrl          String?
  aboutImageUrl         String?
  benefitsImageUrl      String?
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime @default(now())
  country      String?
  city         String?
}

model Resource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         String // FOLDER, DOCUMENT, GUIDE, VIDEO, LINK, ETC.
  url          String?
  uploadDate   DateTime  @default(now())
  category     String?
  tags         String?
  uploaderId   String?
  parentId     String?
  pin          String?
  ispublic     Boolean   @default(true)
  
  uploader   User?     @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parent     Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children   Resource[] @relation("FolderChildren")
  sharedWith User[] @relation("SharedResources")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  color               String   @default("blue")
  creatorId           String
  audienceType        String   @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  videoConferenceLink String?
  attachments         Json?

  creator   User   @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")
}


model Form {
    id              String   @id @default(cuid())
    title           String
    description     String?  @db.Text
    status          FormStatus @default(DRAFT)
    creatorId       String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    isQuiz          Boolean  @default(false)

    creator         User            @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("SharedForms")
}

model FormField {
    id          String        @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json? // For select, radio, checkbox
    required    Boolean       @default(false)
    placeholder String?
    order       Int
    formId      String
    
    form        Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormResponseAnswer[]
}

model FormResponse {
    id          String   @id @default(cuid())
    formId      String
    userId      String
    submittedAt DateTime @default(now())
    score       Float?

    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     FormResponseAnswer[]
}

model FormResponseAnswer {
    id         String       @id @default(cuid())
    responseId String
    fieldId    String
    value      String       @db.Text

    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("USER") // SYSTEM or USER
  creatorId   String?
  createdAt   DateTime @default(now())

  creator        User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String @id @default(cuid())
  templateId String
  type       String
  order      Int

  template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  description String
  icon        String
  points      Int    @default(50)

  users UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}
