// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  CHECKBOX
  DATE
  NUMBER
  EMAIL
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  theme                 String?
  xp                    Int?      @default(0)

  // Relations
  enrollments           Enrollment[]
  createdCourses        Course[]             @relation("InstructorCourses")
  createdAnnouncements  Announcement[]       @relation("AuthorAnnouncements")
  createdResources      EnterpriseResource[]
  createdLessonTemplates LessonTemplate[]
  notes                 UserNote[]
  notifications         Notification[]
  securityLogs          SecurityLog[]
  quizAttempts          QuizAttempt[]
  achievements          UserAchievement[]    @relation("UserAchievements")
  createdForms          Form[]               @relation("FormCreator")
  sharedForms           Form[]               @relation("SharedForms")
  formResponses         FormResponse[]
  calendarEvents        CalendarEvent[]
  attendedEvents        CalendarEvent[]     @relation("EventAttendees")

  @@index([email])
}


model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId    String
  instructor      User          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?  @db.Text
  questionId String
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String    @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float?    @default(0)
  completedLessons    LessonCompletionRecord[]
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String   // 'view' or 'quiz'
  score       Float?   // Only for quizzes
  completedAt DateTime @default(now())
  
  @@unique([progressId, lessonId])
}

model QuizAttempt {
    id          String          @id @default(cuid())
    userId      String
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId      String
    quiz        Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    score       Float
    submittedAt DateTime        @default(now())
    answers     AnswerAttempt[]

    @@index([userId])
    @@index([quizId])
}

model AnswerAttempt {
    id              String        @id @default(cuid())
    attemptId       String
    attempt         QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId      String
    question        Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption  AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    
    @@index([attemptId])
}

model EnterpriseResource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime  @default(now())
  uploaderId   String
  uploader     User      @relation(fields: [uploaderId], references: [id])
  parentId     String?
  parent       EnterpriseResource?  @relation("Children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("Children")
  pin          String?
  ispublic     Boolean   @default(true)
  sharedWith   User[]

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  priority   String   @default("Normal")
  authorId   String
  author     User     @relation("AuthorAnnouncements", fields: [authorId], references: [id])
  audience   Json     // e.g., ["ALL"], ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
    id                   String      @id @default(cuid())
    title                String
    description          String?     @db.Text
    start                DateTime
    end                  DateTime
    allDay               Boolean     @default(false)
    audienceType         EventAudienceType @default(ALL)
    creatorId            String
    creator              User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees            User[]      @relation("EventAttendees")
    color                String?
    location             String?
    videoConferenceLink  String?
    attachments          Json?
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  country      String?
  city         String?

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?
  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
  
  // Theme settings
  primaryColor              String? @default("#6366f1") // indigo-500
  secondaryColor            String? @default("#a5b4fc") // indigo-300
  accentColor               String? @default("#ec4899") // pink-500
  backgroundColorLight      String? @default("#f8fafc") // slate-50
  primaryColorDark          String? @default("#a5b4fc") // indigo-300
  backgroundColorDark       String? @default("#020617") // slate-950
  fontHeadline              String? @default("Space Grotesk")
  fontBody                  String? @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model Achievement {
  id                String            @id @default(cuid())
  slug              String            @unique // e.g., "first-course-completed"
  name              String
  description       String
  icon              String?
  points            Int               @default(0)
  userAchievements  UserAchievement[]
}

model UserAchievement {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt        DateTime    @default(now())

    @@unique([userId, achievementId])
    @@index([userId])
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?           @relation(fields: [creatorId], references: [id])
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int
}

model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus @default(DRAFT)
  creatorId     String
  creator       User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]   @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id            String   @id @default(cuid())
  formId        String
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  label         String
  type          FormFieldType
  required      Boolean  @default(false)
  placeholder   String?
  options       Json?    // For select, radio, checkbox types
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  responses     FormAnswer[]

  @@index([formId])
}

model FormResponse {
    id              String      @id @default(cuid())
    formId          String
    form            Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String?
    user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
    submittedAt     DateTime    @default(now())
    answers         FormAnswer[]
    
    @@index([formId])
    @@index([userId])
}

model FormAnswer {
    id              String      @id @default(cuid())
    responseId      String
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId         String
    field           FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value           Json
    
    @@index([responseId])
    @@index([fieldId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, lessonId])
}
