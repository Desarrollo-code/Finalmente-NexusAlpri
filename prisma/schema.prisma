// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

// --- MODELS ---

model User {
  id                  String         @id @default(cuid())
  name                String
  email               String         @unique
  password            String
  avatar              String?
  role                UserRole       @default(STUDENT)
  isTwoFactorEnabled  Boolean        @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?      @default(now())
  theme               String?
  xp                  Int?           @default(0)

  // Relations
  courses             Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  announcements       Announcement[]
  uploadedResources   EnterpriseResource[] @relation("Uploader")
  sharedResources     EnterpriseResource[] @relation("SharedWith")
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  notifications       Notification[]
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]

  @@map("users")
}


model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?       @db.Text
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?         @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  
  @@index([moduleId])
  @@map("lessons")
}

model ContentBlock {
  id          String      @id @default(cuid())
  type        LessonType
  content     String?     @db.Text
  order       Int
  
  // Relations
  lessonId    String
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?

  @@index([lessonId])
  @@map("content_blocks")
}


model Quiz {
  id            String    @id @default(cuid())
  title         String
  description   String?
  
  // Relations
  contentBlockId String   @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id          String    @id @default(cuid())
  text        String
  type        QuestionType @default(MULTIPLE_CHOICE)
  order       Int
  
  // Relations
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
  @@map("questions")
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?   @db.Text

  // Relations
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
  @@map("answer_options")
}

model QuizAttempt {
  id        String    @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
  @@map("quiz_attempts")
}

model AnswerAttempt {
  id              String      @id @default(cuid())
  quizAttemptId   String
  questionId      String
  selectedOptionId String
  
  // Relations
  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
  @@map("answer_attempts")
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime @default(now())
  progress     CourseProgress?
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String    @unique
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  
  // Relations
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String      @id @default(cuid())
    progressId  String
    lessonId    String
    type        String      // 'view' or 'quiz'
    score       Float?      // Only for quizzes

    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


model EnterpriseResource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        String
  category    String
  tags        String?
  url         String?  @db.Text
  uploadDate  DateTime @default(now())
  pin         String?
  ispublic    Boolean  @default(true)

  // Relations
  uploaderId    String?
  uploader      User?     @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith    User[]               @relation("SharedWith")

  @@index([parentId])
  @@index([uploaderId])
  @@map("resources")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  priority  String?
  
  // Relations
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json     // Can be 'ALL', or an array of UserRole strings

  @@index([authorId])
  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  color               String   @default("blue")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?

  // Relations
  creatorId           String
  creator             User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]     @relation("EventAttendees")
  
  @@index([creatorId])
  @@map("calendar_events")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  resourceCategories        String    @db.Text @default("General,Recursos Humanos,Ventas")
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
  
  // Theme and branding
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  @@map("platform_settings")
}

model SecurityLog {
  id              String            @id @default(cuid())
  event           SecurityLogEvent
  ipAddress       String
  details         String?
  createdAt       DateTime          @default(now())

  // Relations
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt    String?
  
  @@index([userId])
  @@index([createdAt])
  @@map("security_logs")
}

model LessonTemplate {
  id            String    @id @default(cuid())
  name          String
  description   String?
  type          TemplateType @default(USER)

  // Relations
  creatorId     String?
  creator       User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
  @@map("lesson_templates")
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  
  // Relations
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("template_blocks")
}


model UserNote {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("user_notes")
}


model Achievement {
    id              String    @id @default(cuid())
    slug            String    @unique
    name            String
    description     String
    icon            String?
    points          Int

    // Relations
    userAchievements UserAchievement[]

    @@map("achievements")
}

model UserAchievement {
    userId          String
    achievementId   String
    earnedAt        DateTime @default(now())

    // Relations
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
    @@map("user_achievements")
}
