// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  password                String?
  avatar                  String?
  role                    UserRole               @default(STUDENT)
  isActive                Boolean                @default(true)
  registeredDate          DateTime               @default(now())
  lastLogin               DateTime?
  xp                      Int                    @default(0)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorSecret         String?
  theme                   String?

  coursesCreated          Course[]               @relation("InstructorCourses")
  enrollments             Enrollment[]
  progress                CourseProgress[]       @relation("UserProgress")
  notifications           Notification[]
  securityLogs            SecurityLog[]
  announcements           Announcement[]
  resourcesUploaded       Resource[]             @relation("UploadedResources")
  resourcesSharedWith     Resource[]             @relation("SharedResources")
  eventsCreated           CalendarEvent[]        @relation("EventCreator")
  eventsAttending         CalendarEvent[]        @relation("EventAttendees")
  achievements            UserAchievement[]
  formsCreated            Form[]                 @relation("FormCreator")
  formsSharedWith         Form[]                 @relation("FormSharedWith")
  formResponses           FormResponse[]
  quizAttempts            QuizAttempt[]
  lessonTemplatesCreated  LessonTemplate[]       @relation("TemplateCreator")
  userNotes               UserNote[]

  @@index([email])
}


// --- Course Structure ---
model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  templateId    String?
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)


  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}


// --- Quizzes ---
model Quiz {
  id            String   @id @default(cuid())
  title         String
  description   String?
  contentBlockId String  @unique
  contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
  maxAttempts   Int?
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[] @relation("QuestionAnswers")

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}


// --- User Progress and Enrollment ---
model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                String                   @id @default(cuid())
  progressPercentage Float                   @default(0)
  completedAt       DateTime?
  lastActivity      DateTime?                @updatedAt
  
  user              User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  course            Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollment        Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId      String?                  @unique

  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  lessonId     String
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime        @default(now())
  type         String // 'view', 'quiz', 'video'
  score        Float?

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
    id              String @id @default(cuid())
    attemptId       String
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    
    questionId      String
    question        Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
    
    selectedOptionId String
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    // For forms
    formResponseId  String?
    formResponse    FormResponse? @relation(fields: [formResponseId], references: [id], onDelete: Cascade)

    fieldId         String?
    field           FormField? @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value           String @db.Text
    
    @@index([attemptId])
    @@index([questionId])
}


// --- Library and Resources ---
model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?    // Comma-separated
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}


// --- Communication and Events ---
model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   String   // ALL, or comma-separated roles
  priority   String   @default("Normal") // 'Normal', 'Urgente'

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String?
  location            String?
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}


// --- Security ---
model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime          @default(now())
  userId       String?
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?           // For failed logins where user might not exist
  country      String?
  city         String?

  @@index([userId])
}


// --- Gamification ---
model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}


// --- Forms & Surveys ---
model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime        @default(now())
  score       Float?          // Score if the form is a quiz
  answers     AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}


// --- Notes ---
model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- Templates ---
model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            String         // SYSTEM or USER
  creatorId       String?
  creator         User?          @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]       // Lessons using this template
}

model TemplateBlock {
  id          String @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// Global Platform Settings
model PlatformSettings {
    id                         String    @id @default(cuid())
    platformName               String    @default("NexusAlpri")
    allowPublicRegistration    Boolean   @default(true)
    emailWhitelist             String?   @db.Text
    enableEmailNotifications   Boolean   @default(true)
    require2faForAdmins        Boolean   @default(false)
    idleTimeoutMinutes         Int       @default(20)
    enableIdleTimeout          Boolean   @default(true)
    passwordMinLength          Int       @default(8)
    passwordRequireUppercase   Boolean   @default(true)
    passwordRequireLowercase   Boolean   @default(true)
    passwordRequireNumber      Boolean   @default(true)
    passwordRequireSpecialChar Boolean   @default(true)
    resourceCategories         String    @db.Text
    updatedAt                  DateTime  @updatedAt

    primaryColor        String? @default("#6366f1")
    secondaryColor      String? @default("#a5b4fc")
    accentColor         String? @default("#ec4899")
    backgroundColorLight String? @default("#f8fafc")
    primaryColorDark    String? @default("#a5b4fc")
    backgroundColorDark String? @default("#020617")
    fontHeadline        String? @default("Space Grotesk")
    fontBody            String? @default("Inter")
    logoUrl             String?
    watermarkUrl        String?
    landingImageUrl     String?
    authImageUrl        String?
    aboutImageUrl       String?
    benefitsImageUrl    String?
}
