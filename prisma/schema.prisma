// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// --- MODELS ---

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  role                  UserRole               @default(STUDENT)
  avatar                String?
  isActive              Boolean                @default(true)
  registeredDate        DateTime?              @default(now())
  theme                 String?
  xp                    Int?                   @default(0)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  createdCourses        Course[]               @relation("CreatedCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]       @relation("UserProgress")
  userNotes             UserNote[]
  uploadedResources     Resource[]             @relation("UploadedResources")
  resourcesSharedWith   Resource[]             @relation("SharedResources")
  createdAnnouncements  Announcement[]
  notifications         Notification[]
  createdEvents         CalendarEvent[]        @relation("CreatedEvents")
  eventsAttending       CalendarEvent[]        @relation("EventAttendees")
  securityLogs          SecurityLog[]
  quizAttempts          QuizAttempt[]
  formResponses         FormResponse[]
  createdForms          Form[]                 @relation("CreatedForms")
  formsSharedWith       Form[]                 @relation("FormSharedWith")
  createdTemplates      LessonTemplate[]       @relation("CreatedTemplates")
  unlockedAchievements  UserAchievement[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String                   @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  userNotes      UserNote[]
  template       LessonTemplate?

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  contentBlockId  String        @unique
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  maxAttempts     Int? // Nullable for unlimited attempts
  attempts        QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType   @default(SINGLE_CHOICE)
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id               String          @id @default(cuid())
  text             String
  isCorrect        Boolean         @default(false)
  feedback         String?         @db.Text
  questionId       String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt    AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                String                   @id @default(cuid())
  userId            String
  courseId          String
  progressPercentage Float                    @default(0)
  completedAt       DateTime?
  lastActivity      DateTime?                @updatedAt
  user              User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course            Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId      String?                  @unique
  enrollment        Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  lessonId     String
  type         String // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime        @default(now())
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  field            FormField?   @relation(fields: [fieldId], references: [id])
  fieldId          String?
  formResponse     FormResponse?   @relation(fields: [formResponseId], references: [id])
  formResponseId   String?
  value            String
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  hasPin       Boolean      @default(false)
  pin          String?
  ispublic     Boolean      @default(true)
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderContent")
  sharedWith   User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  audience  String   @default("ALL") // "ALL", "ADMINISTRATOR", "STUDENT", etc.
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  priority  String?  @default("Normal") // Normal, Urgente

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  audienceType        EventAudienceType  @default(ALL)
  color               String             @default("blue")
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?          @db.Text
  userId       String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model Achievement {
  id                  String             @id @default(cuid())
  slug                AchievementSlug    @unique
  name                String
  description         String
  icon                String
  points              Int
  unlockedBy          UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime        @default(now())
  score       Float? // Score if the form is a quiz
  answers     AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String? // Comma-separated list of allowed domains
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model LessonTemplate {
  id               String         @id @default(cuid())
  name             String
  description      String?
  type             String         @default("USER") // SYSTEM or USER
  creatorId        String?
  creator          User?          @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks   TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
