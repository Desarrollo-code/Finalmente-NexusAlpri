// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  COURSE_PUBLISHED
  ENROLLMENT_CONFIRMATION
  UPCOMING_DEADLINE
}

enum TemplateType {
  SYSTEM
  USER
}

// --- AUTH & USER MODELS ---
model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  lastLogin           DateTime?

  courses         Course[]
  enrollments     Enrollment[]
  notifications   Notification[]
  createdEvents   CalendarEvent[] @relation("EventCreators")
  attendedEvents  CalendarEvent[] @relation("EventAttendees")
  uploadedResources Resource[]
  securityLogs    SecurityLog[]
  createdTemplates LessonTemplate[]

  @@index([email])
}

// --- COURSE & CONTENT MODELS ---
model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  
  instructorId    String
  instructor      User          @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  
  contentBlockId String    @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions     Question[]
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  type      QuestionType @default(SINGLE_CHOICE)
  order     Int
  
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String   @db.Text
  isCorrect   Boolean  @default(false)
  feedback    String?  @db.Text
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  progress    CourseProgress? // Relaci√≥n uno a uno con el progreso

  @@id([userId, courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  
  userId              String
  courseId            String
  
  enrollmentId        String     @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [userId, courseId], onDelete: Cascade)

  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  type        String // "view" or "quiz"
  score       Float?
  completedAt DateTime  @default(now())
  
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

// --- PLATFORM & GLOBAL CONTENT ---
model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  pin          String?      @db.Text
  uploadDate   DateTime     @default(now())

  uploaderId   String?
  uploader     User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")

  @@index([parentId])
  @@index([uploaderId])
}


model Announcement {
  id         String    @id @default(cuid())
  title      String
  content    String    @db.Text
  date       DateTime  @default(now())
  audience   Json      // 'ALL' o un array de UserRole
  priority   String    @default("Normal") // "Normal" or "Urgente"
  
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  videoConferenceLink String?
  color               String       @default("blue")
  audienceType        Json         // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  attachments         Json?        // Array de { name: string, url: string }

  creatorId           String
  creator             User         @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]       @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Comma-separated list of allowed domains
  resourceCategories          String    @db.Text // Comma-separated list
  
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)

  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id            String           @id @default(cuid())
  event         SecurityLogEvent
  details       String?
  ipAddress     String?
  createdAt     DateTime         @default(now())
  
  userId        String?
  user          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  emailAttempt  String?          // For failed login attempts where user ID is unknown
  
  @@index([userId])
  @@index([event])
}

model LessonTemplate {
  id               String         @id @default(cuid())
  name             String
  description      String?
  type             TemplateType   @default(USER) // SYSTEM or USER
  
  creatorId        String?
  creator          User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks   TemplateBlock[]
}

model TemplateBlock {
  id               String       @id @default(cuid())
  type             LessonType
  order            Int
  
  templateId       String
  template         LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
