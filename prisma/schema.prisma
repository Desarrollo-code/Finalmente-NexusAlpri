// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  name                String
  password            String
  avatar              String?  @db.Text
  role                UserRole @default(STUDENT)
  registeredDate      DateTime @default(now())
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?  @db.Text

  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  resourcesUploaded   Resource[]
  announcements       Announcement[]
  calendarEvents      CalendarEvent[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  eventsAttending     CalendarEvent[] @relation("EventAttendees")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT MODELS ---
model Course {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  imageUrl        String?  @db.Text
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  instructorId    String
  instructor      User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  type        String? // Maybe remove if all lessons now use blocks
}

enum LessonType {
    TEXT
    VIDEO
    QUIZ
    FILE
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    content   String?     @db.Text
    order     Int
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    quiz      Quiz?
}

// --- QUIZ MODELS ---
model Quiz {
    id          String @id @default(cuid())
    title       String
    description String? @db.Text
    
    contentBlockId String @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions   Question[]
}

enum QuestionType {
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    TRUE_FALSE
}

model Question {
    id          String @id @default(cuid())
    text        String
    type        QuestionType @default(MULTIPLE_CHOICE)
    order       Int
    
    quizId      String
    quiz        Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options     AnswerOption[]
}

model AnswerOption {
    id          String @id @default(cuid())
    text        String
    isCorrect   Boolean @default(false)
    feedback    String? @db.Text
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// --- USER-COURSE RELATIONS ---
model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
}

model CourseProgress {
  userId              String
  courseId            String
  completedLessonIds  Json     @default("[]")
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
}

// --- GLOBAL CONTENT & SETTINGS ---
model PlatformSettings {
  id                          Int      @id @default(1)
  platformName                String
  allowPublicRegistration     Boolean  @default(true)
  enableEmailNotifications    Boolean  @default(true)
  require2faForAdmins         Boolean  @default(false)
  idleTimeoutMinutes          Int      @default(20)
  enableIdleTimeout           Boolean  @default(true)
  passwordMinLength           Int      @default(8)
  passwordRequireUppercase    Boolean  @default(true)
  passwordRequireLowercase    Boolean  @default(true)
  passwordRequireNumber       Boolean  @default(true)
  passwordRequireSpecialChar  Boolean  @default(true)
  resourceCategories          Json
  updatedAt                   DateTime @updatedAt
}

model Resource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         ResourceType
  url          String?   @db.Text
  category     String
  tags         Json      @default("[]")
  pin          String?   @db.Text
  uploadDate   DateTime  @default(now())
  
  uploaderId   String
  uploader     User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  
  parentId     String?
  parent       Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[] @relation("FolderHierarchy")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  date       DateTime   @default(now())
  audience   Json
  priority   String?
  
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
    id          String   @id @default(cuid())
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())
    
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  start        DateTime
  end          DateTime
  allDay       Boolean   @default(false)
  location     String?
  audienceType String?   // Could be 'ALL', or a UserRole
  color        String?
  
  creatorId    String
  creator      User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees    User[]    @relation("EventAttendees")
}

// --- SECURITY LOG ---
model SecurityLog {
  id           String   @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  createdAt    DateTime @default(now())
  
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum SecurityLogEvent {
  FAILED_LOGIN_ATTEMPT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_SUCCESS
}
