// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // This was changed from "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String
  email                 String                @unique
  password              String
  avatar                String?
  role                  UserRole              @default(STUDENT)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime              @default(now())
  isActive              Boolean               @default(true)
  xp                    Int                   @default(0)
  theme                 String?

  courses               Course[]
  enrollments           Enrollment[]
  progress              CourseProgress[]
  announcements         Announcement[]
  notifications         Notification[]
  eventsCreated         CalendarEvent[]       @relation("CreatedBy")
  eventsAttending       CalendarEvent[]       @relation("EventAttendees")
  resourcesUploaded     Resource[]
  notes                 UserNote[]
  securityLogs          SecurityLog[]
  quizAttempts          QuizAttempt[]
  achievements          UserAchievement[]
  formsCreated          Form[]
  formResponses         FormResponse[]
  sharedForms           Form[]                @relation("FormSharedWith")
  createdTemplates      LessonTemplate[]
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id              String         @id @default(cuid())
  title           String
  order           Int
  
  moduleId        String
  module          Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]
  notes           UserNote[]
  template        LessonTemplate? @relation(fields: [lessonTemplateId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  lessonTemplateId String?
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?
}

model Quiz {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  maxAttempts   Int?
  
  contentBlockId String     @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id        String    @id @default(cuid())
  text      String    @db.Text
  order     Int
  
  quizId    String
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  feedback    String?   @db.Text
  points      Int       @default(0) // Puntos por esta respuesta

  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  attemptNumber Int
  submittedAt   DateTime @default(now())
  
  answers       AnswerAttempt[]
}

model AnswerAttempt {
    id              String      @id @default(cuid())
    attemptId       String
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId      String
    question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                   String                   @id @default(cuid())
  userId               String
  courseId             String
  progressPercentage   Float                    @default(0)
  completedAt          DateTime?
  
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  completedLessons     LessonCompletionRecord[]
  
  enrollmentId         String                   @unique
  enrollment           Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    completedAt DateTime @default(now())
    type        String @default("view") // 'view', 'quiz', 'video'
    score       Float?

    @@unique([progressId, lessonId])
}

model Resource {
    id          String          @id @default(cuid())
    title       String
    description String?         @db.Text
    type        ResourceType    @default(DOCUMENT)
    url         String?
    uploadDate  DateTime        @default(now())
    category    String?
    tags        String?
    pin         String?
    
    uploaderId  String
    uploader    User            @relation(fields: [uploaderId], references: [id])
    
    parentId    String?
    parent      Resource?       @relation("FolderContent", fields: [parentId], references: [id], onDelete: Cascade)
    children    Resource[]      @relation("FolderContent")

    ispublic    Boolean         @default(true)
    sharedWith  User[]
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal") // Normal, Urgente
  audience  Json
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  link         String?
  read         Boolean   @default(false)
  createdAt    DateTime  @default(now())
}

model CalendarEvent {
    id                  String           @id @default(cuid())
    title               String
    description         String?          @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean          @default(false)
    color               String           @default("blue")
    location            String?
    videoConferenceLink String?
    audienceType        EventAudienceType @default(ALL)
    attachments         Json?
    
    creatorId           String
    creator             User             @relation("CreatedBy", fields: [creatorId], references: [id])
    attendees           User[]           @relation("EventAttendees")
}

model UserNote {
    id        String @id @default(cuid())
    userId    String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String @db.Text
    color     String @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
}

model PlatformSettings {
    id                      String  @id @default(cuid())
    platformName            String  @default("NexusAlpri")
    logoUrl                 String?
    watermarkUrl            String?
    landingImageUrl         String?
    authImageUrl            String?
    aboutImageUrl           String?
    benefitsImageUrl        String?

    allowPublicRegistration Boolean @default(true)
    enableEmailNotifications Boolean @default(true)
    emailWhitelist          String? // Comma-separated domains
    
    passwordMinLength       Int @default(8)
    passwordRequireUppercase Boolean @default(true)
    passwordRequireLowercase Boolean @default(true)
    passwordRequireNumber   Boolean @default(true)
    passwordRequireSpecialChar Boolean @default(false)

    enableIdleTimeout       Boolean @default(true)
    idleTimeoutMinutes      Int @default(20)
    require2faForAdmins     Boolean @default(false)
    
    resourceCategories      String  @db.Text
    
    primaryColor            String  @default("#6366f1")
    secondaryColor          String  @default("#a5b4fc")
    accentColor             String  @default("#ec4899")
    backgroundColorLight    String  @default("#f8fafc")
    primaryColorDark        String  @default("#a5b4fc")
    backgroundColorDark     String  @default("#020617")

    fontHeadline            String @default("Space Grotesk")
    fontBody                String @default("Inter")
    
    updatedAt               DateTime @updatedAt
}

model SecurityLog {
    id          String    @id @default(cuid())
    event       SecurityLogEvent
    userId      String?
    user        User?     @relation(fields: [userId], references: [id], onDelete:SetNull)
    ipAddress   String?
    userAgent   String?   @db.Text
    details     String?
    emailAttempt String?
    country     String?
    city        String?
    createdAt   DateTime  @default(now())
}

model LessonTemplate {
    id              String @id @default(cuid())
    name            String
    description     String?
    type            TemplateType @default(USER) // SYSTEM or USER
    creatorId       String?
    creator         User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())

    templateBlocks  TemplateBlock[]
    lessons         Lesson[]
}

model TemplateBlock {
    id          String @id @default(cuid())
    templateId  String
    template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
    type        LessonType
    order       Int
}

model Achievement {
    id              String @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    icon            String
    points          Int @default(0)

    userAchievements UserAchievement[]
}

model UserAchievement {
    id              String @id @default(cuid())
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    unlockedAt      DateTime @default(now())

    @@unique([userId, achievementId])
}

model Form {
    id              String @id @default(cuid())
    title           String
    description     String? @db.Text
    status          FormStatus @default(DRAFT)
    isQuiz          Boolean @default(false)

    creatorId       String
    creator         User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]       @relation("FormSharedWith")

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model FormField {
    id          String      @id @default(cuid())
    label       String
    type        FormFieldType
    required    Boolean     @default(false)
    options     Json?       // For select, radio, checkbox
    placeholder String?
    order       Int

    formId      String
    form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)

    answers     FormAnswer[]
}

model FormResponse {
    id          String   @id @default(cuid())
    submittedAt DateTime @default(now())
    score       Float? // Percentage score if it's a quiz

    formId      String
    form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    answers     FormAnswer[]
}

model FormAnswer {
    id          String      @id @default(cuid())
    value       String      @db.Text
    
    responseId  String
    response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId     String
    field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
    SYSTEM
    USER
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}
