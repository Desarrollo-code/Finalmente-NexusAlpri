// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
}


// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?   @db.Text
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  xp                  Int       @default(0)
  theme               String?
  createdCourses      Course[]  @relation("CreatedCourses")
  enrollments         Enrollment[]
  notes               UserNote[]
  notifications       Notification[]
  resourcesUploaded   EnterpriseResource[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  createdEvents       CalendarEvent[] @relation("CreatedBy")
  attendedEvents      CalendarEvent[] @relation("Attendees")
  createdForms        Form[] @relation("CreatedForms")
  formResponses       FormResponse[] @relation("SubmittedBy")

  @@index([email])
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  category        String?
  imageUrl        String?     @db.Text
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  instructor      User        @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String                @id @default(cuid())
  title          String
  order          Int
  module         Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId       String
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  userNotes      UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String          @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String          @id @default(cuid())
  text      String
  isCorrect Boolean         @default(false)
  feedback  String?
  question  Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  attempts  AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                    @id @default(cuid())
  user                User                      @relation(fields: [userId], references: [id])
  userId              String
  course              Course                    @relation(fields: [courseId], references: [id])
  courseId            String
  enrollment          Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId        String                    @unique
  progressPercentage  Int?                      @default(0)
  completedLessons    LessonCompletionRecord[]
  updatedAt           DateTime                  @updatedAt

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId  String
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  type        String // "view" or "quiz"
  score       Float? // Only for quizzes
  completedAt DateTime        @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  score     Float
  attemptedAt DateTime      @default(now())
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  quizAttemptId    String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String

  @@index([quizAttemptId])
}

model EnterpriseResource {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?       @db.Text
  uploadDate   DateTime      @default(now())
  uploader     User          @relation(fields: [uploaderId], references: [id])
  uploaderId   String
  hasPin       Boolean       @default(false)
  pin          String?
  ispublic     Boolean       @default(true)
  sharedWith   User[]
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction)
  children     EnterpriseResource[] @relation("FolderChildren")

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  audience   Json // ALL, ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
  priority   String   @default("Normal") // "Normal", "Urgente"

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  color               String?            @default("blue")
  location            String?
  videoConferenceLink String?
  attachments         Json? // Array of { name: string, url: string }
  creator             User               @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  audienceType        EventAudienceType  @default(ALL)
  attendees           User[]             @relation("Attendees")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([creatorId])
}

model UserNote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  city         String?
  country      String?

  @@index([userId])
  @@index([event])
}

model Achievement {
  id          String            @id @default(cuid())
  slug        String            @unique // e.g. "first-course-completed"
  name        String
  description String
  icon        String?
  points      Int               @default(0)
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  earnedAt      DateTime    @default(now())

  @@id([userId, achievementId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creator        User?           @relation(fields: [creatorId], references: [id])
  creatorId      String?
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

model PlatformSettings {
  id                       String    @id @default(cuid())
  platformName             String    @default("NexusAlpri")
  logoUrl                  String?   @db.Text
  watermarkUrl             String?   @db.Text
  landingImageUrl          String?   @db.Text
  authImageUrl             String?   @db.Text
  aboutImageUrl            String?   @db.Text
  benefitsImageUrl         String?   @db.Text
  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   @db.Text
  resourceCategories       String    @default("General,Recursos Humanos,TI,Marketing,Ventas,Formación") @db.Text
  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)
  require2faForAdmins      Boolean   @default(false)
  updatedAt                DateTime  @updatedAt
  
  // Theme settings
  primaryColor        String? @default("#6366f1") // Indigo 500
  secondaryColor      String? @default("#a5b4fc") // Indigo 300
  accentColor         String? @default("#ec4899") // Pink 500
  backgroundColorLight String? @default("#f8fafc") // Slate 50
  
  primaryColorDark    String? @default("#a5b4fc") // Indigo 300
  backgroundColorDark String? @default("#020617") // Slate 950
  
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
}

// --- FORMS ---
model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       FormStatus @default(DRAFT)
  creator      User     @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[] @relation("FormSharedWith")
  
  @@index([creatorId])
}

model FormField {
  id           String   @id @default(cuid())
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       String
  label        String
  type         FormFieldType
  required     Boolean  @default(false)
  placeholder  String?
  options      Json? // For select, radio, checkbox
  order        Int
  responses    FormResponseField[]

  @@index([formId])
}

model FormResponse {
  id           String   @id @default(cuid())
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       String
  submittedBy  User     @relation("SubmittedBy", fields: [submittedById], references: [id], onDelete: Cascade)
  submittedById String
  submittedAt  DateTime @default(now())
  
  fields       FormResponseField[]
  
  @@index([formId])
  @@index([submittedById])
}

model FormResponseField {
  id           String       @id @default(cuid())
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId   String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId      String
  value        Json
  
  @@index([responseId])
  @@index([fieldId])
}
