// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- User and Authentication ---

model User {
  id                    String      @id @default(cuid())
  email                 String      @unique
  name                  String
  password              String
  role                  UserRole    @default(STUDENT)
  avatar                String?     @db.Text
  isTwoFactorEnabled    Boolean     @default(false)
  twoFactorSecret       String?     @db.Text
  registeredDate        DateTime    @default(now())
  theme                 String?
  createdCourses        Course[]
  enrollments           Enrollment[]
  notifications         Notification[]
  notes                 UserNote[]
  createdEvents         CalendarEvent[] @relation("CreatedBy")
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  uploadedResources     Resource[]
  sharedResources       Resource[]      @relation("ResourceSharedWith")
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  learningPathEnrollments LearningPathEnrollment[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- Course Structure ---

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?        @db.Text
  category        String         @default("General")
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  learningPaths   LearningPathCourse[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- Quiz System ---

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String         @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?         @db.Text
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime        @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- User Progress ---

model Enrollment {
  id             String          @id @default(cuid())
  userId         String
  courseId       String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt     DateTime        @default(now())
  progress       CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  completedLessons   LessonCompletionRecord[]
  progressPercentage Float                    @default(0)
  startedAt          DateTime                 @default(now())
  completedAt        DateTime?
  lastAccessed       DateTime                 @updatedAt
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float?
  completedAt DateTime      @default(now())
  
  @@unique([progressId, lessonId])
}

model UserNote {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}


// --- Global Content ---

model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  type          ResourceType
  category      String        @default("General")
  tags          String?
  url           String?       @db.Text
  pin           String?
  uploadDate    DateTime      @default(now())
  uploaderId    String?
  uploader      User?         @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children      Resource[]    @relation("FolderHierarchy")
  ispublic      Boolean       @default(true)
  sharedWith    User[]        @relation("ResourceSharedWith")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  date      DateTime
  authorId  String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json
  priority  String?
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?     @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  audienceType        String // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  attendees           User[]      @relation("EventAttendees")
  color               String      @default("blue")
  creatorId           String
  creator             User        @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  videoConferenceLink String?
  attachments         Json?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

// --- System ---

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  resourceCategories          String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  primaryColor                String    @default("#4F46E5")
  secondaryColor              String    @default("#10B981")
  accentColor                 String    @default("#F59E0B")
  backgroundColorLight        String    @default("#FFFFFF")
  primaryColorDark            String    @default("#6366F1")
  backgroundColorDark         String    @default("#111827")
  fontHeadline                String    @default("Space Grotesk")
  fontBody                    String    @default("Inter")
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id           String             @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  userId       String?
  user         User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  details      String?
  createdAt    DateTime           @default(now())
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- New Models for Advanced Features ---

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

model LearningPath {
  id             String                  @id @default(cuid())
  title          String
  description    String                  @db.Text
  creatorId      String
  courses        LearningPathCourse[]
  enrollments    LearningPathEnrollment[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
}

model LearningPathCourse {
  path      LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId    String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  order     Int

  @@id([pathId, courseId])
}

model LearningPathEnrollment {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId      String
  path        LearningPath        @relation(fields: [pathId], references: [id], onDelete: Cascade)
  progress    Float               @default(0) // Percentage based on completed courses
  enrolledAt  DateTime            @default(now())
  completedAt DateTime?

  @@unique([userId, pathId])
}
