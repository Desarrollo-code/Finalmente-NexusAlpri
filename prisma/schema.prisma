// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum NotificationType {
  NEW_COURSE
  NEW_ANNOUNCEMENT
  COURSE_COMPLETED
  MENTION
  SYSTEM
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- MODELS ---

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime         @default(now())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  courses         Course[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  resources       Resource[]       @relation("UploadedResources")
  notifications   Notification[]
  eventsCreated   CalendarEvent[]
  eventsAttending CalendarEvent[]  @relation("EventAttendees")
  securityLogs    SecurityLog[]
  createdTemplates LessonTemplate[]
  announcements   Announcement[]

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String         @db.VarChar(255)
  description     String?        @db.Text
  imageUrl        String?        @db.Text
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int

  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?   @db.Text
  
  contentBlockId String    @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]
}

model Question {
  id          String       @id @default(cuid())
  text        String       @db.Text
  type        QuestionType
  order       Int

  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options     AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String  @db.Text
  isCorrect   Boolean
  feedback    String? @db.Text
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress? // Each enrollment can have one progress record

  @@id([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                   String                   @id @default(cuid())
  progressPercentage   Float                    @default(0)
  
  // Explicit relation to Course and User
  userId               String
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId             String
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // One-to-one relation with Enrollment
  enrollmentId         String                   @unique
  enrollment           Enrollment               @relation(fields: [enrollmentId], references: [userId, courseId], onDelete: Cascade)

  completedLessons     LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    type        String   // "view" or "quiz"
    score       Float?   // Score if type is "quiz"
    completedAt DateTime @default(now())

    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

    lessonId    String
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@index([lessonId])
}

model Resource {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  type          ResourceType
  url           String?      @db.Text
  category      String
  tags          String?      @db.Text
  uploadDate    DateTime     @default(now())
  pin           String?
  
  uploaderId    String
  uploader      User         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  
  // Self-relation for folder hierarchy
  parentId      String?
  parent        Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Resource[]   @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
  @@index([type])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal")
  audience  Json     // Can be "ALL" or an array of UserRole
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String   @default("blue")
  attachments         Json?    
  audienceType        String   // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR", "SPECIFIC"
  
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}


model Notification {
  id          String           @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean          @default(false)
  type        NotificationType @default(SYSTEM)
  createdAt   DateTime         @default(now())

  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String
  details       String?           @db.Text
  createdAt     DateTime          @default(now())

  userId        String?
  user          User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt  String?           // For failed attempts on non-existent users

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text // Comma-separated list
  
  // Password policy
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  // Security
  require2faForAdmins       Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)

  // Content related
  resourceCategories        String?  @db.Text // Comma-separated list

  updatedAt                 DateTime @updatedAt
}

model LessonTemplate {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?   @db.Text
  type           String    // "SYSTEM" or "USER"
  createdAt      DateTime  @default(now())
  
  creatorId      String?   // Null for system templates
  creator        User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}
