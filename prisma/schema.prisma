// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
    SYSTEM
    USER
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                       String                  @id @default(cuid())
  name                     String
  email                    String                  @unique
  password                 String
  avatar                   String?
  role                     UserRole                @default(STUDENT)
  isActive                 Boolean                 @default(true)
  isTwoFactorEnabled       Boolean                 @default(false)
  twoFactorSecret          String?
  registeredDate           DateTime                @default(now())
  lastLogin                DateTime?
  theme                    String?
  xp                       Int                     @default(0)

  // Relations
  coursesCreated           Course[]                @relation("CreatedCourses")
  enrollments              Enrollment[]
  courseProgress           CourseProgress[]
  quizAttempts             QuizAttempt[]
  userNotes                UserNote[]
  achievements             UserAchievement[]
  uploadedResources        Resource[]              @relation("UploadedResources")
  sharedResources          Resource[]              @relation("SharedResources")
  createdForms             Form[]                  @relation("CreatedForms")
  formResponses            FormResponse[]
  sharedForms              Form[]                  @relation("SharedForms")
  createdEvents            CalendarEvent[]
  attendedEvents           CalendarEvent[]         @relation("EventAttendees")
  authoredAnnouncements    Announcement[]
  notifications            Notification[]
  securityLogs             SecurityLog[]
  createdLessonTemplates   LessonTemplate[]        @relation("CreatedTemplates")

  @@map("users")
}

model Course {
  id                String         @id @default(cuid())
  title             String
  description       String         @db.Text
  imageUrl          String?
  category          String?
  status            CourseStatus   @default(DRAFT)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  publicationDate   DateTime?

  // Relations
  instructorId      String
  instructor        User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules           Module[]
  enrollments       Enrollment[]
  courseProgress    CourseProgress[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("LessonTemplates")

  @@map("lessons")
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    content   String?     @db.Text
    order     Int
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?

    @@map("content_blocks")
}


model Quiz {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  contentBlockId  String        @unique
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
  maxAttempts     Int?

  @@map("quizzes")
}

model Question {
  id          String         @id @default(cuid())
  text        String
  order       Int
  quizId      String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int             @default(10)
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String   // e.g., 'view', 'quiz', 'video'
    score       Float?
    completedAt DateTime @default(now())

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}

model QuizAttempt {
    id              String          @id @default(cuid())
    userId          String
    quizId          String
    attemptNumber   Int
    score           Float
    submittedAt     DateTime        @default(now())
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers         AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id               String       @id @default(cuid())
    attemptId        String
    attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType @default(DOCUMENT)
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  uploaderId   String
  uploader     User         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  pin          String?
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")

  @@map("resources")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  audience   String   // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, or JSON array of roles
  priority   String?  @default("Normal")
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String? @db.Text
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CalendarEvent {
    id                   String      @id @default(cuid())
    title                String
    description          String?     @db.Text
    start                DateTime
    end                  DateTime
    allDay               Boolean     @default(false)
    location             String?
    audienceType         String      // ALL, STUDENT, etc.
    color                String?     @default("blue")
    creatorId            String
    creator              User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees            User[]      @relation("EventAttendees")
    videoConferenceLink  String?
    attachments          Json?

    @@map("calendar_events")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String    @db.Text
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?

  @@map("platform_settings")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  createdAt    DateTime         @default(now())
  details      String?          @db.Text
  country      String?
  city         String?
  
  user         User?            @relation("SecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model Achievement {
    id           String            @id @default(cuid())
    slug         AchievementSlug   @unique
    name         String
    description  String
    icon         String
    points       Int
    users        UserAchievement[]

    @@map("achievements")
}

model UserAchievement {
    id            String      @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime    @default(now())
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@map("user_achievements")
}


model LessonTemplate {
    id              String      @id @default(cuid())
    name            String
    description     String?
    type            TemplateType @default(USER)
    creatorId       String?
    creator         User?       @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
    templateBlocks  TemplateBlock[]
    lessons         Lesson[]    @relation("LessonTemplates")

    @@map("lesson_templates")
}

model TemplateBlock {
    id          String @id @default(cuid())
    type        LessonType
    order       Int
    templateId  String
    template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

    @@map("template_blocks")
}


model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")

  @@map("forms")
}


model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@map("form_fields")
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime @default(now())
  answers      Answer[]
  score        Float?   // For quizzes

  @@map("form_responses")
}

model Answer {
  id      String    @id @default(cuid())
  fieldId String
  field   FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value   String    @db.Text
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("answers")
}

    