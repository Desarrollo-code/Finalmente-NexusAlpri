// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// --- USER & AUTHENTICATION ---
model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime? @default(now())
  theme                 String?
  xp                    Int?      @default(0)
  
  // Relations
  coursesCreated        Course[]              @relation("CreatedCourses")
  enrollments           Enrollment[]
  notifications         Notification[]
  announcements         Announcement[]
  eventsCreated         CalendarEvent[]
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  notes                 UserNote[]
  resourcesUploaded     EnterpriseResource[]  @relation("UploadedResources")
  quizAttempts          QuizAttempt[]
  achievements          UserAchievement[]
  createdLessonTemplates LessonTemplate[]
  createdForms          Form[]                @relation("CreatedForms")
  formResponses         FormResponse[]
  sharedResources       EnterpriseResource[]  @relation("SharedResources")
  sharedForms           Form[]                @relation("SharedForms")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE STRUCTURE ---
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?
  
  // Relations
  instructorId    String?
  instructor      User?       @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relations
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completedBy   LessonCompletionRecord[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  
  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


// --- QUIZZES ---
model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Relations
  contentBlockId  String        @unique
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  order   Int
  type    QuestionType @default(MULTIPLE_CHOICE)
  quizId  String
  
  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?
  questionId String
  
  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id        String          @id @default(cuid())
    userId    String
    quizId    String
    score     Float
    attemptedAt DateTime      @default(now())

    // Relations
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers   AnswerAttempt[]
    
    @@index([userId, quizId])
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    attemptId         String
    questionId        String
    selectedOptionId  String

    // Relations
    attempt         QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String   @unique
  progressPercentage  Float?   @default(0)

  // Relations
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String      @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view' or 'quiz'
    score       Float?

    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}


// --- RESOURCES & LIBRARY ---
model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  pin          String?
  ispublic     Boolean      @default(true)
  
  // Relations for folder hierarchy
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("FolderHierarchy")

  // Relation to uploader
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith   User[]       @relation("SharedResources")

}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}


// --- NOTIFICATIONS & EVENTS ---
model Notification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  link         String?
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  audience  Json     // Can be 'ALL', or an array of UserRole strings
  priority  String   @default("Normal") // "Normal", "Urgente"
  
  // Relations
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  start       DateTime
  end         DateTime
  allDay      Boolean  @default(false)
  audienceType EventAudienceType @default(ALL)
  color       String   @default("blue")
  videoConferenceLink String?
  attachments Json? // [{ "name": "File Name", "url": "..." }]
  
  // Relations
  creatorId   String?
  creator     User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  attendees   User[]   @relation("EventAttendees")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- SYSTEM & AUDIT ---
model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  updatedAt                 DateTime @updatedAt
  
  // Registration & Access
  allowPublicRegistration   Boolean  @default(true)
  require2faForAdmins       Boolean  @default(false)
  
  // Email
  enableEmailNotifications  Boolean  @default(true)
  
  // Categories (used for courses and resources)
  resourceCategories        String   @db.Text
  
  // Password Policy
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  
  // Idle Timeout
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)

  // Appearance
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model SecurityLog {
    id            String    @id @default(cuid())
    event         SecurityLogEvent
    ipAddress     String?
    userAgent     String?
    createdAt     DateTime  @default(now())
    details       String?
    userId        String?
    emailAttempt  String?
    country       String?
    city          String?
    
    // Relations
    user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

// --- GAMIFICATION ---
model Achievement {
    id          String   @id @default(cuid())
    slug        String   @unique // e.g., "first-enrollment"
    name        String
    description String
    icon        String?  // Icon name or URL
    points      Int      @default(0)

    // Relations
    users       UserAchievement[]
}

model UserAchievement {
    userId        String
    achievementId String
    earnedAt      DateTime @default(now())

    // Relations
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@id([userId, achievementId])
}


// --- FORMS ---
model Form {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  status        FormStatus   @default(DRAFT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  creatorId     String?
  creator       User?        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: SetNull)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]       @relation("SharedForms")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  label       String
  type        String   // 'TEXT', 'MULTIPLE_CHOICE', 'CHECKBOX', etc.
  options     Json?    // For multiple choice, etc.
  isRequired  Boolean  @default(true)
  order       Int
  
  // Relations
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id        String   @id @default(cuid())
  formId    String
  userId    String
  submittedAt DateTime @default(now())

  // Relations
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers   FormAnswer[]
}

model FormAnswer {
  id          String @id @default(cuid())
  responseId  String
  fieldId     String
  value       Json

  // Relations
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

// --- TEMPLATES ---
model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TemplateType
  creatorId   String?
  
  // Relations
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  // Relations
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}
