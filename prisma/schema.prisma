// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

// --- MODELS ---

model User {
  id                  String             @id @default(cuid())
  name                String
  email               String             @unique
  password            String
  role                UserRole           @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean            @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?          @default(now())
  theme               String?
  xp                  Int?               @default(0)

  // Relations
  instructorOf        Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]
  attendingEvents     CalendarEvent[]    @relation("EventAttendees")
  uploadedResources   EnterpriseResource[] @relation("UploadedResources")
  sharedResources     EnterpriseResource[] @relation("SharedResources")
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  achievements        UserAchievement[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  courseProgress      CourseProgress[]

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  instructor    User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module            Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completions       LessonCompletionRecord[]
  notes             UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  contentBlockId String       @unique
  
  // Relations
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(SINGLE_CHOICE)
  order     Int
  quizId    String

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean @default(false)
  feedback    String? @db.Text
  questionId  String

  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

// --- USER PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?

  // Relations
  enrollment        Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime  @default(now())
  type        String // "view" o "quiz"
  score       Float?    // solo para quizzes

  // Relations
  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime      @default(now())
  
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  questionId       String
  selectedOptionId String
  
  // Relations
  quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

// --- PLATFORM CONTENT & SETTINGS ---
enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?      @db.Text // URL for files/links
  category     String?
  tags         String?      // Comma-separated
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?      // For folder structure
  hasPin       Boolean      @default(false)
  pin          String?
  ispublic     Boolean      @default(true)

  // Relations
  parent   EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith User[]            @relation("SharedResources")

  @@index([parentId])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  authorId  String
  audience  Json     // Can store 'ALL' or ['STUDENT', 'INSTRUCTOR']
  priority  String   @default("Normal") // "Normal" | "Urgente"

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  color               String            @default("blue")
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  attachments         Json?             // Array de objetos { name: string, url: string }

  // Relations
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")

  @@index([creatorId])
}


model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SecurityLog {
  id           String    @id @default(cuid())
  event        String    // e.g., 'SUCCESSFUL_LOGIN', 'FAILED_LOGIN_ATTEMPT', 'PASSWORD_CHANGE'
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?   // For failed attempts on non-existent users
  ipAddress    String?
  userAgent    String?   @db.Text
  country      String?
  city         String?
  details      String?   @db.Text
  createdAt    DateTime  @default(now())

  @@index([userId])
  @@index([event])
}

// --- TEMPLATES ---
enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  type           TemplateType   @default(USER)
  creatorId      String?
  createdAt      DateTime       @default(now())
  
  // Relations
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String       @id @default(cuid())
  templateId String
  type       LessonType
  order      Int
  
  // Relations
  template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- GAMIFICATION ---
model Achievement {
  id           String            @id @default(cuid())
  slug         String            @unique // e.g., "first-enrollment"
  name         String
  description  String
  icon         String?
  points       Int               @default(50)
  
  // Relation
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- SYSTEM SETTINGS ---
model PlatformSettings {
  id                       String    @id @default(cuid())
  platformName             String    @default("NexusAlpri")
  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  resourceCategories       String    @db.Text // Comma-separated
  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)
  require2faForAdmins      Boolean   @default(false)
  updatedAt                DateTime  @updatedAt
  
  // Theme and branding
  primaryColor        String? @default("#6366f1") // Indigo 500
  secondaryColor      String? @default("#a5b4fc") // Indigo 300
  accentColor         String? @default("#ec4899") // Pink 500
  backgroundColorLight String? @default("#f8fafc") // Slate 50
  
  primaryColorDark    String? @default("#a5b4fc") // Indigo 300
  backgroundColorDark String? @default("#020617") // Slate 950
  
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
}
