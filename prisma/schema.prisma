// datasource-db.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

// --- MODELS ---

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?        @default(now())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  theme               String?

  coursesAsInstructor Course[]         @relation("InstructorCourses")
  enrollments         Enrollment[]
  announcements       Announcement[]
  notifications       Notification[]
  resourcesUploaded   Resource[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  calendarEvents      CalendarEvent[]  @relation("EventCreator")
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  notes               UserNote[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons     Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  notes              UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  template  LessonTemplate? @relation("TemplateContentBlocks", fields: [templateId], references: [id], onDelete: SetNull)
  templateId String?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  type    QuestionType @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  type        String    // 'view' or 'quiz'
  score       Float?    // Score for quizzes
  completedAt DateTime  @default(now())
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model Resource {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  type          ResourceType
  category      String
  tags          String?
  url           String?
  uploadDate    DateTime     @default(now())
  uploaderId    String?
  uploader      User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  pin           String?
  parentId      String?
  parent        Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children      Resource[]   @relation("FolderHierarchy")
  ispublic      Boolean      @default(true)
  sharedWith    User[]
}

model Announcement {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  date        DateTime    @default(now())
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience    Json        // Can be 'ALL', or an array of UserRole
  priority    String?     @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String   @default("blue")
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json?    // Array of {name: string, url: string}
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?
  createdAt    DateTime          @default(now())
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  resourceCategories          String?   @db.Text
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  primaryColor                String?   @default("#673AB7")
  secondaryColor              String?   @default("#6F42C1")
  accentColor                 String?   @default("#6F42C1")
  backgroundColorLight        String?   @default("#FFFFFF")
  primaryColorDark            String?   @default("#FFFFFF")
  backgroundColorDark         String?   @default("#121212")
  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
}

model LessonTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            TemplateType @default(USER)
  creatorId       String?
  creator         User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt       DateTime     @default(now())
  templateBlocks  TemplateBlock[]
  contentBlocks   ContentBlock[] @relation("TemplateContentBlocks")
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}
