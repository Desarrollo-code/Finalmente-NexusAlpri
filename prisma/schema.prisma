// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  password                String
  role                    UserRole                @default(STUDENT)
  isActive                Boolean                 @default(true)
  avatar                  String?
  registeredDate          DateTime                @default(now())
  lastLogin               DateTime?
  theme                   String?
  xp                      Int                     @default(0)
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorSecret         String?
  coursesCreated          Course[]                @relation("CreatedCourses")
  enrollments             Enrollment[]
  progress                CourseProgress[]
  notes                   UserNote[]
  resourcesUploaded       Resource[]
  announcements           Announcement[]
  eventsCreated           CalendarEvent[]         @relation("CreatedEvents")
  eventsAttending         CalendarEvent[]         @relation("EventAttendees")
  notifications           Notification[]
  securityLogs            SecurityLog[]
  resourcesSharedWith     Resource[]              @relation("SharedResources")
  lessonTemplatesCreated  LessonTemplate[]
  quizAttempts            QuizAttempt[]
  formResponses           FormResponse[]
  formsCreated            Form[]                  @relation("FormsCreated")
  formsSharedWith         Form[]                  @relation("FormsSharedWith")
  achievements            UserAchievement[]

  @@index([email])
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User             @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String                  @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  userNotes      UserNote[]
  template       LessonTemplate?         @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId     String?

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  points      Int            @default(0)

  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
    id                  String        @id @default(cuid())
    attemptId           String
    attempt             QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId          String
    question            Question      @relation(fields: [questionId], references: [id], onDelete: Cascade, map: "AnswerAttempt_questionId_fkey")
    selectedOptionId    String
    selectedOption      AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade, map: "AnswerAttempt_selectedOptionId_fkey")
    field               FormField?    @relation(fields: [formFieldId], references: [id])
    formFieldId         String?
    formResponse        FormResponse? @relation(fields: [formResponseId], references: [id])
    formResponseId      String?
    value               String?
    
    @@index([attemptId])
    @@index([questionId])
}


model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime        @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id               String                   @id @default(cuid())
  userId           String
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId         String
  course           Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progressPercentage Float                  @default(0)
  completedAt      DateTime?
  enrollmentId     String                   @unique
  enrollment       Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progressId  String
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime        @default(now())
  type        String // e.g., 'view', 'quiz', 'video'
  score       Float?

  @@unique([progressId, lessonId])
  @@index([lessonId])
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String   @default("yellow")

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model Resource {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text
  type         ResourceType
  url          String?       @db.VarChar(2048)
  category     String?
  tags         String?
  uploadDate   DateTime      @default(now())
  uploaderId   String?
  uploader     User?         @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean       @default(false)
  pin          String?       @db.VarChar(255)
  // Relaci√≥n para carpetas
  parentId     String?
  parent       Resource?     @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]    @relation("FolderContent")
  // Control de Acceso
  ispublic     Boolean       @default(true)
  sharedWith   User[]        @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String            @default("blue")
  location            String?
  videoConferenceLink String?
  creatorId           String
  creator             User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
  attachments         Json?

  @@index([creatorId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // 'ALL', or comma-separated roles like 'STUDENT,INSTRUCTOR'
  priority  String   @default("Normal")

  @@index([authorId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  emailAttempt String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  city         String?
  country      String?

  @@index([userId])
  @@index([createdAt])
}

model Form {
    id              String          @id @default(cuid())
    title           String
    description     String?         @db.Text
    status          FormStatus      @default(DRAFT)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    creatorId       String
    creator         User            @relation("FormsCreated", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("FormsSharedWith")
    isQuiz          Boolean         @default(false)

    @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime        @default(now())
  score       Float?          // Score if the form is a quiz
  answers     AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String? @db.Text
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  userAchievements  UserAchievement[]
}

model UserAchievement {
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  updatedAt                   DateTime  @updatedAt
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  resourceCategories          String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formaci√≥n Interna,Documentaci√≥n de Producto,General") @db.Text
  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")
  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
}
