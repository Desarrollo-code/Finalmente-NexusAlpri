// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- USER & AUTH MODELS ---
model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  avatar                String?
  role                  UserRole               @default(STUDENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?              @default(now())
  theme                 String?
  xp                    Int?                   @default(0)
  // Relations
  createdCourses          Course[]               @relation("CreatedCourses")
  enrollments             Enrollment[]
  progress                CourseProgress[]
  quizAttempts            QuizAttempt[]
  createdAnnouncements    Announcement[]
  notifications           Notification[]
  uploadedResources       EnterpriseResource[]   @relation("UploadedResources")
  sharedResources         EnterpriseResource[]   @relation("SharedResources")
  createdEvents           CalendarEvent[]        @relation("CreatedEvents")
  attendingEvents         CalendarEvent[]        @relation("AttendingEvents")
  securityLogs            SecurityLog[]
  notes                 UserNote[]
  createdLessonTemplates  LessonTemplate[]       @relation("CreatedTemplates")
  achievements            UserAchievement[]
  createdForms            Form[]                 @relation("CreatedForms")
  formResponses           FormResponse[]
  sharedForms             Form[]                 @relation("SharedForms")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT MODELS ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  category        String?
  imageUrl        String?        @db.Text
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // Relations
  instructorId    String
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  // Relations
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?      // One-to-one relation

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- QUIZ MODELS ---
model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  contentBlockId String         @unique
  // Relations
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  // Relations
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?         @db.Text
  questionId  String
  // Relations
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}


// --- USER PROGRESS & INTERACTIONS ---
model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float?                   @default(0)
  // Relations
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
  
  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id         String   @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float?
  date       DateTime @default(now())
  // Relations
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
  @@index([lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float // Percentage score
  date      DateTime        @default(now())
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  questionId       String
  selectedOptionId String
  // Relations
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@index([quizAttemptId])
}


// --- GLOBAL CONTENT & COMMUNICATION ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     @default("\"ALL\"") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR
  priority  String   @default("Normal")
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  color               String?
  videoConferenceLink String?
  attachments         Json? // Array of { name: string, url: string }
  audienceType        EventAudienceType @default(ALL)
  // Relations
  creatorId           String
  creator             User             @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("AttendingEvents")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserNote {
  id        String @id @default(cuid())
  content   String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- GAMIFICATION ---
model Achievement {
  id               String            @id @default(cuid())
  slug             String            @unique // e.g., 'first-course-completed'
  name             String
  description      String
  icon             String?
  points           Int               @default(0)
  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}


// --- ENTERPRISE RESOURCES ---
model EnterpriseResource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  url         String?  @db.Text
  category    String?
  tags        String?
  uploadDate  DateTime @default(now())
  pin         String?  // Hashed PIN
  ispublic    Boolean  @default(true)
  // Relations
  uploaderId  String
  uploader    User     @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // <-- ¡El cambio está aquí!
  children    EnterpriseResource[] @relation("FolderChildren")
  sharedWith  User[]               @relation("SharedResources")

  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}


// --- PLATFORM CONFIGURATION & LOGS ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
  // Relations
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?

  @@index([event])
  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  resourceCategories         String   @default("General,Recursos Humanos,Ventas") @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?
  fontHeadline               String?
  fontBody                   String?
  logoUrl                    String?  @db.Text
  watermarkUrl               String?  @db.Text
  landingImageUrl            String?  @db.Text
  authImageUrl               String?  @db.Text
  aboutImageUrl              String?  @db.Text
  benefitsImageUrl           String?  @db.Text
}


// --- LESSON TEMPLATES ---
model LessonTemplate {
  id            String           @id @default(cuid())
  name          String
  description   String?
  type          TemplateType     @default(USER) // SYSTEM or USER
  // Relations
  creatorId     String?          // Null for system templates
  creator       User?            @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

// --- FORMS MODULE ---
model Form {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  status         FormStatus     @default(DRAFT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  // Relations
  creatorId      String
  creator        User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields         FormField[]
  responses      FormResponse[]
  sharedWith     User[]         @relation("SharedForms")

  @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?         // Array of strings for choices
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String       @id @default(cuid())
  submittedAt DateTime     @default(now())
  // Relations
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  submitter   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String       @id @default(cuid())
  value      String       @db.Text
  // Relations
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}
