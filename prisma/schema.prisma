// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                    String                @id @default(cuid())
  name                  String
  email                 String                @unique
  password              String
  avatar                String?               @db.Text
  role                  UserRole              @default(STUDENT)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime              @default(now())
  theme                 String?               @default("dark")
  xp                    Int                   @default(0)
  // Relations
  createdCourses        Course[]              @relation("CreatedCourses")
  enrollments           Enrollment[]
  quizAttempts          QuizAttempt[]
  notifications         Notification[]
  createdAnnouncements  Announcement[]        @relation("CreatedAnnouncements")
  createdEvents         CalendarEvent[]       @relation("CreatedEvents")
  attendingEvents       CalendarEvent[]       @relation("AttendingEvents")
  uploadedResources     EnterpriseResource[]  @relation("UploadedResources")
  sharedResources       EnterpriseResource[]  @relation("SharedResources")
  securityLogs          SecurityLog[]
  notes                 UserNote[]
  createdTemplates      LessonTemplate[]      @relation("CreatedTemplates")
  createdForms          Form[]                @relation("CreatedForms")
  sharedForms           Form[]                @relation("SharedForms")
  formResponses         FormResponse[]
  createdLessonTemplates LessonTemplate[]      @relation("UserTemplates")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT MODELS ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?        @db.Text
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // Relations
  instructorId    String
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  order     Int
  content   String?    @db.Text
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// --- QUIZ MODELS ---
model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id             String          @id @default(cuid())
  text           String
  isCorrect      Boolean
  feedback       String?         @db.Text
  questionId     String
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt  AnswerAttempt[]
}

// --- PROGRESS & ENROLLMENT MODELS ---
model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float?                   @default(0)
  completedLessons    LessonCompletionRecord[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id         String        @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String        // 'view' or 'quiz'
  score      Float?        // Only for 'quiz' type
  completedAt DateTime      @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- CALENDAR & NOTIFICATION MODELS ---
model CalendarEvent {
  id                 String     @id @default(cuid())
  title              String
  description        String?    @db.Text
  start              DateTime
  end                DateTime
  allDay             Boolean
  location           String?
  audienceType       String     // Can be 'ALL', a UserRole, or 'SPECIFIC'
  color              String
  videoConferenceLink String?
  attachments        Json?
  createdAt          DateTime   @default(now())
  creatorId          String
  creator            User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees          User[]     @relation("AttendingEvents")
}

model Announcement {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  date      DateTime   @default(now())
  audience  Json       // 'ALL' or array of UserRole
  priority  String?    @default("Normal")
  authorId  String
  author    User       @relation("CreatedAnnouncements", fields: [authorId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}


// --- GLOBAL CONTENT & SETTINGS MODELS ---
model EnterpriseResource {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // 'FOLDER', 'DOCUMENT', 'VIDEO', etc.
  category    String?
  tags        String?
  url         String?   @db.Text
  uploadDate  DateTime  @default(now())
  pin         String?   // Hashed PIN
  ispublic    Boolean   @default(true)
  // Relations
  uploaderId  String
  uploader    User      @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    EnterpriseResource[] @relation("FolderChildren")
  sharedWith  User[]    @relation("SharedResources")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String
  allowPublicRegistration     Boolean
  enableEmailNotifications    Boolean
  require2faForAdmins       Boolean
  idleTimeoutMinutes        Int
  enableIdleTimeout         Boolean
  passwordMinLength         Int
  passwordRequireUppercase  Boolean
  passwordRequireLowercase  Boolean
  passwordRequireNumber     Boolean
  passwordRequireSpecialChar Boolean
  resourceCategories        String @db.Text
  // New visual settings
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String? @db.Text
  watermarkUrl              String? @db.Text
  landingImageUrl           String? @db.Text
  authImageUrl              String? @db.Text
  aboutImageUrl             String? @db.Text
  benefitsImageUrl          String? @db.Text
}

// --- SECURITY & GAMIFICATION MODELS ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?          @db.Text
  userAgent    String?          @db.Text
  country      String?
  city         String?
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model Achievement {
  id                String            @id @default(cuid())
  slug              String            @unique
  name              String
  description       String
  icon              String?
  points            Int
  UserAchievement   UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

// --- TEMPLATES ---
model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?         // Null for system templates
  creator         User?           @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}

// --- FORMS ---

model Form {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  status         FormStatus     @default(DRAFT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  creatorId      String
  creator        User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields         FormField[]
  responses      FormResponse[]
  sharedWith     User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For 'SELECT', 'RADIO', 'CHECKBOX'
  order       Int
  
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model FormResponse {
  id        String           @id @default(cuid())
  formId    String
  form      Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  submitterId String?
  submitter   User?            @relation(fields: [submitterId], references: [id], onDelete: SetNull)
  
  submittedAt DateTime       @default(now())
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId    String       // Not a relation, to avoid issues if field is deleted
  fieldLabel String       // Store the label at time of submission
  value      Json         // Store the answer
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  NUMBER
  EMAIL
  URL
  DATE
  SELECT
  RADIO
  CHECKBOX
  RATING
}
