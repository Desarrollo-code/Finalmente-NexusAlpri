// datasource db defines the database connection details.
// It's used by Prisma Client to connect to the database.
datasource db {
  provider = "mysql" // For local development
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator client defines that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMERATIONS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isActive            Boolean   @default(true)
  registeredDate      DateTime  @default(now())
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  xp                  Int       @default(0)

  // Relationships
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  achievements        UserAchievement[]
  notifications       Notification[]
  createdEvents       CalendarEvent[] @relation("CreatedEvents")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  uploadedResources   Resource[]      @relation("UploadedResources")
  sharedResources     Resource[]      @relation("SharedResources")
  createdForms        Form[]
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]
  quizAttempts        QuizAttempt[]
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relationships
  instructorId    String
  instructor      User          @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String

  // Relationships
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  order     Int
  moduleId  String

  // Relationships
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  notes          UserNote[]
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String

  // Relationships
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id            String        @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?
  contentBlockId String       @unique

  // Relationships
  contentBlock  ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id      String    @id @default(cuid())
  text    String    @db.Text
  order   Int
  quizId  String

  // Relationships
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String

  // Relationships
  question  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]
}

model Enrollment {
  id          String        @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime      @default(now())
  
  // Relationships
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String        @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Int           @default(0)
  completedAt         DateTime?
  enrollmentId        String?       @unique
  
  // Relationships
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment       Enrollment?            @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime  @default(now())
  type        String // 'view', 'quiz', 'video'
  score       Float?

  // Relationships
  progress  CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson    Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())

  // Relationships
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
    id                String @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String
    
    // Relationships
    quizAttempt    QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question       Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([quizAttemptId])
}


model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  uploadDate  DateTime @default(now())
  uploaderId  String
  category    String?
  tags        String?
  pin         String?
  ispublic    Boolean    @default(true)

  // Relationships
  uploader      User       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  sharedWith    User[]     @relation("SharedResources")
  parentId      String?
  parent        Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Resource[] @relation("FolderContent")
}


model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json?
  color               String?
  audienceType        EventAudienceType @default(ALL)
  creatorId           String

  // Relationships
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  country      String?
  city         String?

  // Relationships
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Achievement {
  id            String    @id @default(cuid())
  slug          AchievementSlug @unique
  name          String
  description   String
  icon          String
  points        Int
  
  // Relationships
  unlockedBy    UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id             String    @id @default(cuid())
  userId         String
  achievementId  String
  unlockedAt     DateTime  @default(now())

  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String? // Comma-separated domains
  
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  
  resourceCategories        String?   @db.Text
  updatedAt                 DateTime  @updatedAt @default(now())
}

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  
  // Relationships
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String

  // Relationships
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  status        FormStatus     @default(DRAFT)
  isQuiz        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  
  // Relationships
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]         @relation("SharedForms")
}

model FormField {
  id            String        @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean       @default(false)
  placeholder   String?
  options       Json? // [{ id, text, isCorrect, points }, ...]
  order         Int
  formId        String
  
  // Relationships
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime        @default(now())
  score       Float? // Percentage score if it's a quiz
  
  // Relationships
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]    @relation("FormAnswers")
}

model FormAnswer {
    id              String        @id @default(cuid())
    formResponseId  String
    fieldId         String
    value           String        @db.Text

    // Relationships
    formResponse    FormResponse  @relation("FormAnswers", fields: [formResponseId], references: [id], onDelete: Cascade)
    field           FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@index([formResponseId])
}
