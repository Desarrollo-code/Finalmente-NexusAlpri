// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime? @default(now())
  lastLogin           DateTime?
  xp                  Int?      @default(0)
  isActive            Boolean   @default(true)
  createdCourses      Course[]  @relation("CreatedCourses")
  enrollments         Enrollment[]
  notes               UserNote[]
  calendarEvents      CalendarEvent[]
  userAchievements    UserAchievement[]
  uploadedResources   Resource[]
  createdAnnouncements Announcement[]
  securityLogs      SecurityLog[] @relation("UserSecurityLogs")
  createdForms      Form[]     @relation("CreatedForms")
  formResponses     FormResponse[]
  sharedForms       Form[]     @relation("SharedWithUsers")
  quizAttempts        QuizAttempt[]
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id              String        @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  userNotes       UserNote[]
  completionRecords LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id              String      @id @default(cuid())
  text            String
  isCorrect       Boolean
  feedback        String?
  questionId      String
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt   AnswerAttempt[]
}

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String         @default("view")
  score       Float?
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime    @default(now())
  uploaderId   String?
  uploader     User?       @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]  @relation("FolderHierarchy")
  hasPin       Boolean     @default(false)
  pin          String?
  ispublic     Boolean     @default(true)
  sharedWith   User[]      @relation("SharedWithUsers")
}

model Announcement {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  date      DateTime    @default(now())
  authorId  String?
  author    User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  String      @default("ALL")
  priority  String      @default("Normal")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        EventAudienceType @default(ALL)
  attendees           User[]
  color               String   @default("blue")
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  videoConferenceLink String?
  attachments         Json[]
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // No user relation needed if notifications are fire-and-forget for a specific user
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  timestamp    DateTime         @default(now())
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?
  userAgent    String?
  country      String?
  city         String?
  user         User?            @relation("UserSecurityLogs", fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  resourceCategories        String
  // Password policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  // Idle Timeout
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  // Security
  require2faForAdmins       Boolean   @default(false)
  // Appearance
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?
  fontBody                  String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            String           @default("USER") // 'SYSTEM' or 'USER'
  creatorId       String?          // null for system templates
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String       @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id              String      @id @default(cuid())
  title           String
  description     String?
  status          FormStatus @default(DRAFT)
  isQuiz          Boolean     @default(false)
  creatorId       String
  creator         User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  fields          FormField[]
  responses       FormResponse[]
  sharedWith      User[]      @relation("SharedWithUsers")
}

model FormField {
  id          String      @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?       // For SINGLE_CHOICE, MULTIPLE_CHOICE
  required    Boolean     @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id           String       @id @default(cuid())
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime     @default(now())
  answers      FormAnswer[]
  score        Float?       // Stores quiz score percentage
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String       @db.Text // JSON string for multiple choices
}

model QuizAttempt {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime     @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  quizAttemptId     String
  quizAttempt       QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}
