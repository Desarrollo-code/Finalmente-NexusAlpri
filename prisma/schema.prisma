// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "preview-provider"
}

// -------------------
// ENUMS
// -------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// -------------------
// MODELS
// -------------------

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  password                String?
  avatar                  String?
  role                    UserRole               @default(STUDENT)
  isActive                Boolean                @default(true)
  registeredDate          DateTime               @default(now())
  lastLogin               DateTime?
  theme                   String?
  xp                      Int                    @default(0)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorSecret         String?
  coursesCreated          Course[]               @relation("CourseInstructor")
  enrollments             Enrollment[]
  createdAnnouncements    Announcement[]
  notifications           Notification[]
  eventsCreated           CalendarEvent[]        @relation("EventCreator")
  eventsAttending         CalendarEvent[]        @relation("EventAttendees")
  courseProgress          CourseProgress[]       @relation("UserProgress")
  userNotes               UserNote[]
  uploadedResources       Resource[]             @relation("UploadedResources")
  sharedResources         Resource[]             @relation("SharedResources")
  securityLogs            SecurityLog[]
  createdLessonTemplates  LessonTemplate[]       @relation("TemplateCreator")
  createdForms            Form[]                 @relation("FormCreator")
  formResponses           FormResponse[]
  quizAttempts            QuizAttempt[]
  achievements            UserAchievement[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  instructorId    String?
  instructor      User?            @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String                  @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  userNotes       UserNote[]
  completedBy     LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean        @default(false)
  feedback    String?
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String?                  @unique
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view', 'quiz', 'video'
  score       Float?
  completedAt DateTime        @default(now())
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderContent", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  children     Resource[]   @relation("FolderContent")
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")
  pin          String?

  @@index([uploaderId])
  @@index([parentId])
  @@index([category])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime  @default(now())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json      // Puede ser "ALL" o un array de UserRole
  priority  String?   @default("Normal") // "Normal" or "Urgente"

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  location            String?
  color               String?
  creatorId           String
  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json? // Array de objetos { name: string, url: string }

  @@index([creatorId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String
  points       Int
  users        UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  userAgent    String?
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]   @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id          String      @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // Para campos de opción múltiple/única, [{"id": "uuid", "text": "Opción 1", "isCorrect": false, "points": 10}]
  required    Boolean     @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime     @default(now())
  score       Float? // Puntuación si es un quiz
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String       @db.Text // JSON stringificado para opción múltiple
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  updatedAt                 DateTime @updatedAt
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  
  // New Theme Properties
  primaryColor              String?  @default("#6366f1")
  secondaryColor            String?  @default("#a5b4fc")
  accentColor               String?  @default("#ec4899")
  backgroundColorLight      String?  @default("#f8fafc")
  fontHeadline              String?  @default("Space Grotesk")
  fontBody                  String?  @default("Inter")
  primaryColorDark          String?  @default("#a5b4fc")
  backgroundColorDark       String?  @default("#020617")

  // Image URLs
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}
