// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                      String              @id @default(cuid())
  email                   String              @unique
  name                    String
  password                String
  role                    UserRole            @default(STUDENT)
  avatar                  String?
  registeredDate          DateTime            @default(now())
  lastLogin               DateTime?
  isActive                Boolean             @default(true)
  isTwoFactorEnabled      Boolean             @default(false)
  twoFactorSecret         String?
  theme                   String?
  xp                      Int                 @default(0)

  enrollments             Enrollment[]
  coursesAsInstructor     Course[]
  announcements           Announcement[]
  notifications           Notification[]
  createdEvents           CalendarEvent[]     @relation("CreatedEvents")
  attendedEvents          CalendarEvent[]     @relation("AttendedEvents")
  courseProgress          CourseProgress[]
  notes                   UserNote[]
  uploadedResources       Resource[]          @relation("UploadedResources")
  sharedResources         Resource[]          @relation("SharedResources")
  achievements            UserAchievement[]
  createdTemplates        LessonTemplate[]
  quizAttempts            QuizAttempt[]
  createdForms            Form[]
  formResponses           FormResponse[]

  @@index([email])
}

model Course {
  id                String          @id @default(cuid())
  title             String
  description       String          @db.Text
  category          String?
  imageUrl          String?
  status            CourseStatus    @default(DRAFT)
  publicationDate   DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  instructorId      String
  instructor        User            @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]

  @@index([instructorId])
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id                String                @id @default(cuid())
  title             String
  order             Int
  moduleId          String
  module            Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes         UserNote[]
  templates         LessonTemplate[]      @relation("LessonToTemplate")

  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int? // Nullable for unlimited attempts
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id        String    @id @default(cuid())
  text      String    @db.Text
  order     Int
  quizId    String
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  feedback    String?   @db.Text
  points      Int       @default(0)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}

model Enrollment {
  id            String          @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime        @default(now())
  
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress      CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                  @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float                   @default(0)
  completedAt         DateTime?
  enrollmentId        String?                 @unique
  enrollment          Enrollment?             @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id          String        @id @default(cuid())
    progressId  String
    lessonId    String
    type        String        // "view" or "quiz"
    score       Float?
    completedAt DateTime      @default(now())

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float           // Percentage score
  submittedAt   DateTime        @default(now())
  
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String        @id @default(cuid())
  quizAttemptId     String
  questionId        String
  selectedOptionId  String

  quizAttempt       QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  date        DateTime  @default(now())
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience    Json      // Can be 'ALL', or an array of UserRole enums
  priority    String?   // E.g., 'Normal', 'Urgente'
  
  @@index([authorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model CalendarEvent {
  id                  String              @id @default(cuid())
  title               String
  description         String?             @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean             @default(false)
  location            String?
  creatorId           String
  creator             User                @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]              @relation("AttendedEvents")
  audienceType        EventAudienceType   @default(ALL)
  color               String?             // e.g., 'blue', 'red'
  videoConferenceLink String?
  attachments         Json?               // [{ "name": "Document.pdf", "url": "/path/to/doc.pdf" }]

  @@index([creatorId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@index([userId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  color       String   @default("yellow")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}


model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  type          ResourceType
  url           String?
  category      String?
  tags          String?
  uploadDate    DateTime      @default(now())
  uploaderId    String?
  pin           String?
  ispublic      Boolean       @default(true)

  uploader      User?         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith    User[]        @relation("SharedResources")

  parentId        String?
  parent          Resource?     @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Resource[]    @relation("FolderChildren")

  @@index([uploaderId])
  @@index([parentId])
}


model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  resourceCategories        String?   @db.Text // Comma-separated list
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
  
  // Theme settings
  primaryColor        String? @default("#6366f1") // indigo-500
  secondaryColor      String? @default("#a5b4fc") // indigo-300
  accentColor         String? @default("#ec4899") // pink-500
  backgroundColorLight String? @default("#f8fafc") // slate-50
  primaryColorDark    String? @default("#a5b4fc") // indigo-300
  backgroundColorDark String? @default("#020617") // slate-950
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  
  // Image settings
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
}

model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userAgent     String?
  details       String?           @db.Text
  createdAt     DateTime          @default(now())
  userId        String?
  emailAttempt  String?
  country       String?
  city          String?

  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

model Achievement {
  id              String             @id @default(cuid())
  slug            AchievementSlug    @unique
  name            String
  description     String
  icon            String?
  points          Int
  
  unlockedBy      UserAchievement[]
}

model UserAchievement {
  id              String      @id @default(cuid())
  userId          String
  achievementId   String
  unlockedAt      DateTime    @default(now())
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

model LessonTemplate {
  id              String            @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  
  creator         User?             @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]          @relation("LessonToTemplate")

  @@index([creatorId])
}

model TemplateBlock {
  id          String      @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}


// --- FORM MODELS ---

model Form {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]    @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id            String        @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean       @default(false)
  placeholder   String?
  options       Json?         // [{ id, text, isCorrect, points }]
  order         Int
  
  formId        String
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers       FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String        @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime      @default(now())
  score         Float?        // Only for quizzes

  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id            String        @id @default(cuid())
  responseId    String
  fieldId       String
  value         String        @db.Text

  response      FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field         FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
}
