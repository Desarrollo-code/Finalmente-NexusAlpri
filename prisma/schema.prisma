// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ----------------------------------------
//             ENUMERATIONS
// ----------------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}


// ----------------------------------------
//                 MODELS
// ----------------------------------------

model User {
  id                   String          @id @default(cuid())
  name                 String
  email                String          @unique
  password             String
  avatar               String?
  role                 UserRole        @default(STUDENT)
  isTwoFactorEnabled   Boolean         @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime        @default(now())
  theme                String?         @default("dark")
  xp                   Int             @default(0)
  isActive             Boolean         @default(true)

  // Relations
  courses              Course[]
  enrollments          Enrollment[]
  courseProgresses     CourseProgress[]
  uploadedResources    Resource[]
  createdForms         Form[]            @relation("FormCreator")
  sharedForms          Form[]            @relation("FormSharedWith")
  formResponses        FormResponse[]
  createdEvents        CalendarEvent[]   @relation("EventCreator")
  attendedEvents       CalendarEvent[]   @relation("EventAttendees")
  createdTemplates     LessonTemplate[]
  announcements        Announcement[]
  notifications        Notification[]
  securityLogs         SecurityLog[]
  quizAttempts         QuizAttempt[]
  achievements         UserAchievement[]
  notes                UserNote[]
  sharedResources      Resource[] @relation("SharedResources")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?      @db.VarChar(1024)
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completionRecords LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String      @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime    @default(now())
  progress    CourseProgress?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseProgress {
  id                   String          @id @default(cuid())
  userId               String
  courseId             String
  enrollmentId         String          @unique
  enrollment           Enrollment      @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage   Float           @default(0)
  completedAt          DateTime?
  lastActivity         DateTime?       @updatedAt

  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedLessons     LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id              String          @id @default(cuid())
    progressId      String
    progress        CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId        String
    lesson          Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type            String // 'view' or 'quiz'
    score           Float?
    completedAt     DateTime        @default(now())

    @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String          @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())
    
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz            Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers         AnswerAttempt[]
}

model AnswerAttempt {
    id              String        @id @default(cuid())
    quizAttemptId   String
    quizAttempt     QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    questionId      String
    question        Question      @relation(fields: [questionId], references: [id], onDelete: NoAction)
    selectedOptionId String
    selectedOption  AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         String
  category     String?
  tags         String?     @db.Text
  url          String?     @db.VarChar(1024)
  uploadDate   DateTime    @default(now())
  uploaderId   String?
  uploader     User?       @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean     @default(false)
  pin          String?
  parentId     String?
  parent       Resource?   @relation("FolderChildren", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[]  @relation("FolderChildren")
  sharedWith   User[]      @relation("SharedResources")
  ispublic     Boolean     @default(true)
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  audience   Json
  priority   String   @default("Normal")
  
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
    id          String   @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())
    
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String            @id @default(cuid())
    title               String
    description         String?           @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean           @default(false)
    color               String            @default("blue")
    audienceType        EventAudienceType @default(ALL)
    attendees           User[]            @relation("EventAttendees")
    videoConferenceLink String?
    attachments         Json?
    
    creatorId           String
    creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
}

model Form {
    id              String          @id @default(cuid())
    title           String
    description     String?         @db.Text
    creatorId       String
    creator         User            @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    status          FormStatus      @default(DRAFT)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    isQuiz          Boolean         @default(false)

    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("FormSharedWith")
}

model FormField {
    id          String          @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json? // For 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
    required    Boolean         @default(false)
    placeholder String?
    order       Int
    formId      String
    form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormResponse {
    id          String          @id @default(cuid())
    formId      String
    form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt DateTime        @default(now())
    answers     FormAnswer[]
    score       Float? // Only if form.isQuiz is true
}

model FormAnswer {
    id          String          @id @default(cuid())
    responseId  String
    response    FormResponse    @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId     String
    field       FormField       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value       String          @db.Text
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  userAgent    String?          @db.Text
  city         String?
  country      String?
  emailAttempt String?
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  resourceCategories         String   @db.Text
  updatedAt                  DateTime @updatedAt

  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?

  fontHeadline               String?
  fontBody                   String?

  logoUrl                    String? @db.VarChar(1024)
  watermarkUrl               String? @db.VarChar(1024)
  landingImageUrl            String? @db.VarChar(1024)
  authImageUrl               String? @db.VarChar(1024)
  aboutImageUrl              String? @db.VarChar(1024)
  benefitsImageUrl           String? @db.VarChar(1024)
}

model Achievement {
    id              String              @id @default(cuid())
    slug            AchievementSlug     @unique
    name            String
    description     String
    icon            String
    points          Int
    
    users           UserAchievement[]
}

model UserAchievement {
    userId          String
    achievementId   String
    earnedAt        DateTime @default(now())

    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}
