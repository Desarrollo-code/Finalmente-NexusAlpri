// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  role                UserRole  @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  theme               String?
  xp                  Int       @default(0)

  // Relations
  enrollments      Enrollment[]
  coursesCreated   Course[]            @relation("CreatedCourses")
  resourcesUploaded EnterpriseResource[] @relation("UploadedResources")
  announcements    Announcement[]
  calendarEvents   CalendarEvent[]
  notifications    Notification[]
  notes            UserNote[]
  quizAttempts     QuizAttempt[]
  courseProgress   CourseProgress[]
  achievements     UserAchievement[]
  sharedResources  EnterpriseResource[] @relation("SharedResources")
  calendarEventAttendees CalendarEvent[] @relation("EventAttendees")
  sharedForms      Form[]
}

model Course {
  id              String        @id @default(cuid())
  title           String        @db.VarChar(255)
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  instructorId String?
  instructor   User?   @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  notes              UserNote[]
  
  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlockId String        @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id       String       @id @default(cuid())
  text     String
  type     QuestionType @default(MULTIPLE_CHOICE)
  order    Int
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


// --- USER PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String   @unique
  progressPercentage  Int?     @default(0)

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id          String  @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view' or 'quiz'
    score       Int?
    completedAt DateTime @default(now())
    
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
    @@index([progressId])
    @@index([lessonId])
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  attemptedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String
  
  attempt           QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
}

// --- GLOBAL CONTENT ---

model EnterpriseResource {
    id          String   @id @default(cuid())
    title       String
    description String?
    type        ResourceType
    category    String
    tags        String?
    url         String?
    uploadDate  DateTime @default(now())
    ispublic    Boolean  @default(true)
    pin         String?  @db.VarChar(255)
    
    uploaderId  String?
    uploader    User?     @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
    
    parentId    String?
    parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children    EnterpriseResource[] @relation("FolderHierarchy")

    sharedWith  User[] @relation("SharedResources")

    @@index([parentId])
    @@index([uploaderId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String?  @default("Normal")
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  audience  Json
  
  @@index([authorId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  audienceType        EventAudienceType
  color               String?
  videoConferenceLink String?
  attachments         Json?
  
  creatorId           String
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// --- PLATFORM SETTINGS ---

model PlatformSettings {
    id                      String   @id @default(cuid())
    platformName            String
    allowPublicRegistration Boolean
    enableEmailNotifications Boolean @default(true)
    emailWhitelist          String? // Comma-separated list of allowed domains for registration or notification
    
    // Password Policy
    passwordMinLength       Int      @default(8)
    passwordRequireUppercase Boolean @default(true)
    passwordRequireLowercase Boolean @default(true)
    passwordRequireNumber   Boolean  @default(true)
    passwordRequireSpecialChar Boolean @default(true)
    
    // Security
    enableIdleTimeout       Boolean  @default(true)
    idleTimeoutMinutes      Int      @default(20)
    require2faForAdmins     Boolean  @default(false)

    // Content
    resourceCategories      String?  // Comma-separated list

    // Theming
    primaryColor            String?  @default("#6366f1")
    secondaryColor          String?  @default("#a5b4fc")
    accentColor             String?  @default("#ec4899")
    backgroundColorLight    String?  @default("#f8fafc")
    primaryColorDark        String?  @default("#a5b4fc")
    backgroundColorDark     String?  @default("#020617")
    fontHeadline            String?  @default("Space Grotesk")
    fontBody                String?  @default("Inter")
    logoUrl                 String?
    watermarkUrl            String?
    landingImageUrl         String?
    authImageUrl            String?
    aboutImageUrl           String?
    benefitsImageUrl        String?
}

model SecurityLog {
    id              String @id @default(cuid())
    event           String
    details         String?
    ipAddress       String?
    userAgent       String? @db.Text
    country         String?
    city            String?
    userId          String?
    emailAttempt    String? // To log attempts on non-existent users
    createdAt       DateTime @default(now())

    user            User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([event])
}

model LessonTemplate {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  type            String   // 'SYSTEM' or 'USER'
  createdAt       DateTime @default(now())
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int

  @@index([templateId])
}

// Gamification Models
model Achievement {
    id          String   @id @default(cuid())
    slug        String   @unique
    name        String
    description String
    icon        String?
    points      Int      @default(50)
    
    users       UserAchievement[]
}

model UserAchievement {
    userId        String
    achievementId String
    earnedAt      DateTime @default(now())

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}

// --- FORMS ---
model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(true) // Can anyone with the link respond?
  
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[] // Users who can view results

  @@index([creatorId])
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  order       Int
  label       String
  type        String   // e.g., 'TEXT', 'MULTIPLE_CHOICE', 'RATING', 'CHECKBOX'
  options     Json?    // For multiple choice, checkbox, etc.
  isRequired  Boolean  @default(true)
  
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String?  // Optional if form is anonymous
  user        User?    @relation(fields: [userId], references: [id], onDelete:SetNull)
  submittedAt DateTime @default(now())
  
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id          String    @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value       Json      // Flexible to store text, array of choices, number, etc.

  @@index([responseId])
  @@index([fieldId])
}
