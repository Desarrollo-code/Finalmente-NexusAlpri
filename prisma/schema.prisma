// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

// --- AUTH AND USER MODELS ---

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model User {
  id                     String             @id @default(cuid())
  name                   String
  email                  String             @unique
  password               String
  avatar                 String?
  role                   UserRole           @default(STUDENT)
  xp                     Int?               @default(0)
  registeredDate         DateTime           @default(now())
  lastLogin              DateTime?
  isActive               Boolean            @default(true)
  isTwoFactorEnabled     Boolean            @default(false)
  twoFactorSecret        String?
  // Relations
  enrollments            Enrollment[]
  createdCourses         Course[]           @relation("CreatedCourses")
  securityLogs           SecurityLog[]
  createdAnnouncements   Announcement[]     @relation("CreatedAnnouncements")
  uploadedResources      EnterpriseResource[] @relation("UploadedResources")
  sharedResources        EnterpriseResource[] @relation("SharedResources")
  createdEvents          CalendarEvent[]    @relation("CreatedEvents")
  attendedEvents         CalendarEvent[]    @relation("AttendedEvents")
  userNotes              UserNote[]
  achievements           UserAchievement[]
  createdForms           Form[]             @relation("CreatedForms")
  formResponses          FormResponse[]
  sharedForms            Form[]             @relation("SharedForms")
  quizAttempts           QuizAttempt[]
  notifications          Notification[]
  createdTemplates       LessonTemplate[]   @relation("CreatedTemplates")
  progress               CourseProgress[]

  @@index([email])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// --- COURSE CONTENT MODELS ---

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String
  // Relations
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]


  @@index([instructorId])
  @@index([status])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Lesson {
  id                     String                   @id @default(cuid())
  title                  String
  order                  Int
  moduleId               String
  // Relations
  module                 Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks          ContentBlock[]
  completions            LessonCompletionRecord[]
  userNotes              UserNote[]
  // The 'templates' relation on this model was removed as it caused a schema validation error.

  @@index([moduleId])
}

model ContentBlock {
  id         String     @id @default(cuid())
  type       LessonType
  content    String?    @db.Text
  order      Int
  lessonId   String
  // Relations
  lesson     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz       Quiz?

  @@index([lessonId])
}

model Quiz {
  id           String          @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String        @unique
  // Relations
  contentBlock ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id         String          @id @default(cuid())
  text       String
  order      Int
  quizId     String
  // Relations
  quiz       Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options    AnswerOption[]
  answers    AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String        @id @default(cuid())
  text       String
  isCorrect  Boolean       @default(false)
  feedback   String?
  questionId String
  // Relations
  question   Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]

  @@index([questionId])
}

// --- STUDENT PROGRESS MODELS ---

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  // Relations
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
}

enum LessonCompletionType {
  view
  quiz
  video
}

model LessonCompletionRecord {
  id          String               @id @default(cuid())
  progressId  String
  lessonId    String
  type        LessonCompletionType @default(view)
  score       Float? // For quizzes
  completedAt DateTime             @default(now())
  // Relations
  progress    CourseProgress       @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  // Relations
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

// --- GLOBAL CONTENT MODELS ---

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model EnterpriseResource {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime       @default(now())
  ispublic    Boolean        @default(true)
  pin         String?
  parentId    String?

  // SELF-RELATIONSHIP: Changed `NoAction` to `Restrict` for compatibility with PostgreSQL
  // onUpdate also changed for consistency
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    EnterpriseResource[] @relation("FolderHierarchy")

  uploaderId  String?
  uploader    User?                @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]               @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}



enum AnnouncementAudience {
  ALL
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum AnnouncementPriority {
  Normal
  Urgente
}

model Announcement {
  id         String             @id @default(cuid())
  title      String
  content    String             @db.Text
  date       DateTime           @default(now())
  authorId   String
  audience   String // Puede ser 'ALL' o un UserRole
  priority   AnnouncementPriority @default(Normal)
  // Relations
  author     User               @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum EventAudienceType {
    ALL
    STUDENT
    INSTRUCTOR
    ADMINISTRATOR
    SPECIFIC
}

model CalendarEvent {
  id                    String            @id @default(cuid())
  title                 String
  description           String?
  location              String?
  start                 DateTime
  end                   DateTime
  allDay                Boolean           @default(false)
  audienceType          EventAudienceType
  color                 String?
  videoConferenceLink   String?
  attachments           Json[]            @default([])
  creatorId             String
  // Relations
  creator               User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees             User[]            @relation("AttendedEvents")

  @@index([creatorId])
}

// --- USER SPECIFIC CONTENT ---

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- GAMIFICATION ---
enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model Achievement {
  id               String            @id @default(cuid())
  slug             AchievementSlug   @unique
  name             String
  description      String
  icon             String
  points           Int
  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String          @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime        @default(now())
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement     @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}


// --- SYSTEM & ADMIN ---
model PlatformSettings {
    id                         String   @id @default(cuid())
    platformName               String   @default("NexusAlpri")
    logoUrl                    String?
    watermarkUrl               String?
    landingImageUrl            String?
    authImageUrl               String?
    aboutImageUrl              String?
    benefitsImageUrl           String?

    // Appearance
    primaryColor               String   @default("#6366f1")
    secondaryColor             String   @default("#a5b4fc")
    accentColor                String   @default("#ec4899")
    backgroundColorLight       String   @default("#f8fafc")
    primaryColorDark           String   @default("#a5b4fc")
    backgroundColorDark        String   @default("#020617")
    fontHeadline               String   @default("Space Grotesk")
    fontBody                   String   @default("Inter")

    // Security
    allowPublicRegistration    Boolean  @default(true)
    emailWhitelist             String?  // Comma-separated list of allowed domains
    require2faForAdmins        Boolean  @default(false)
    enableIdleTimeout          Boolean  @default(true)
    idleTimeoutMinutes         Int      @default(20)

    // Password Policy
    passwordMinLength          Int      @default(8)
    passwordRequireUppercase   Boolean  @default(true)
    passwordRequireLowercase   Boolean  @default(true)
    passwordRequireNumber      Boolean  @default(true)
    passwordRequireSpecialChar Boolean  @default(true)

    // General
    enableEmailNotifications   Boolean  @default(true)
    resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")

    updatedAt                  DateTime @updatedAt
}


enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model SecurityLog {
  id           String         @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  city         String?
  country      String?
  userId       String?
  emailAttempt String?
  createdAt    DateTime       @default(now())
  // Relations
  user         User?          @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

// --- TEMPLATES ---
enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  createdAt      DateTime        @default(now())
  // Relations
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  templateId String
  type       LessonType
  order      Int
  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMS ---
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  // Relations
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean       @default(false)
  options     Json[]        @default([]) // [{ id, text, isCorrect, points }]
  order       Int
  formId      String
  // Relations
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?
  // Relations
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String       @db.Text
  // Relations
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}