// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  password            String
  avatar              String?
  role                UserRole          @default(STUDENT)
  xp                  Int               @default(0)
  isActive            Boolean           @default(true)
  registeredDate      DateTime          @default(now())
  isTwoFactorEnabled  Boolean           @default(false)
  twoFactorSecret     String?
  createdCourses      Course[]          @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  uploadedResources   Resource[]        @relation("Uploader")
  announcements       Announcement[]    @relation("Author")
  createdEvents       CalendarEvent[]   @relation("EventCreator")
  attendedEvents      CalendarEvent[]   @relation("EventAttendees")
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  createdForms        Form[]            @relation("FormCreator")
  sharedForms         Form[]            @relation("FormSharedWith")
  formResponses       FormResponse[]
  achievements        UserAchievement[]
  sharedResources     Resource[]        @relation("ResourceSharedWith")

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String                 @id @default(cuid())
  title         String
  moduleId      String
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  template      LessonTemplate?        @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?

  @@index([moduleId])
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?

  @@index([lessonId])
}

model Quiz {
  id            String       @id @default(cuid())
  title         String
  description   String?
  contentBlockId String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
  maxAttempts   Int?
}

model Question {
  id      String          @id @default(cuid())
  text    String
  quizId  String
  quiz    Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String        @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                 @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float?
  completedAt         DateTime?
  lastActivity        DateTime?              @updatedAt
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]
  enrollmentId        String?                @unique
  enrollment          Enrollment?            @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime       @default(now())
  type        String         // "view", "quiz", "video", etc.
  score       Float?
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id              String          @id @default(cuid())
  userId          String
  quizId          String
  attemptNumber   Int
  score           Float
  submittedAt     DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers         AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


model Resource {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  type          String       // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  category      String?
  tags          String?      // Comma-separated
  url           String?
  uploadDate    DateTime     @default(now())
  uploaderId    String?
  uploader      User?        @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin        Boolean      @default(false)
  pin           String?
  ispublic      Boolean      @default(true)
  sharedWith    User[]       @relation("ResourceSharedWith")
  parentId      String?
  parent        Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]   @relation("FolderChildren")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json     @default("[]") // "ALL", ["STUDENT"], ["INSTRUCTOR"], etc.
  priority  String?  // 'Normal', 'Urgente'
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  audienceType        String   // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  attendees           User[]   @relation("EventAttendees")
  color               String?
  videoConferenceLink String?
  attachments         Json?
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  // Appearance
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?

  // Content
  resourceCategories        String?   @db.Text // Comma-separated string
  
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userAgent    String?          @db.Text
  city         String?
  country      String?

  @@index([userId])
  @@index([event])
}


model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            String          // 'SYSTEM' or 'USER'
  creatorId       String?         // Null for system templates
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]
}

model TemplateBlock {
  id          String         @id @default(cuid())
  type        LessonType
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation(name: "FormSharedWith")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // [{id, text, isCorrect, points}]
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String             @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime           @default(now())
  score       Float?             // Store the final percentage score if it's a quiz
  form        Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id          String       @id @default(cuid())
  responseId  String
  fieldId     String
  value       String       @db.Text
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
}

model Achievement {
  id          String          @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String?         // Icon name from lucide-react
  points      Int             @default(0)
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}