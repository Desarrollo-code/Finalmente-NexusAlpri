// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime         @default(now())
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  uploadedResources   Resource[]
  announcements       Announcement[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]  @relation("EventCreator")
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  securityLogs        SecurityLog[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String         @default("General")
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  type          String? // You might want to remove this if it's derived from content blocks
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  userId             String
  courseId           String
  completedLessonIds Json
  progressPercentage Float    @default(0)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String       @default("General")
  tags         Json
  url          String?
  pin          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String
  uploader     User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]   @relation("FolderHierarchy")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json // Stores UserRole[] or 'ALL'
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  start        DateTime
  end          DateTime
  allDay       Boolean          @default(false)
  description  String?
  location     String?
  audienceType EventAudienceType
  creatorId    String
  creator      User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]           @relation("EventAttendees")
  color        String?
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())
  details      String?
}

model PlatformSettings {
  id                        Int      @id @default(1)
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  resourceCategories        Json
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  updatedAt                 DateTime @updatedAt
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}
