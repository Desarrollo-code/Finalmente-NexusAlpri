// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:nexus-alpri-db-pass@aws-1-us-east-2.pooler.supabase.com:5432/postgres?pgbouncer=true&connection_limit=1"
  shadowDatabaseUrl = "postgresql://postgres:nexus-alpri-db-pass@aws-1-us-east-2.pooler.supabase.com:6543/postgres"
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================
// 1. ENUMS (TIPOS PERSONALIZADOS)
// ==============================================================

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// ==============================================================
// 2. MODELOS DE DATOS
// ==============================================================


// --- USUARIO Y AUTENTICACIÃ“N ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isActive            Boolean   @default(true)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  lastLogin           DateTime?
  xp                  Int       @default(0)

  // Relaciones
  courses             Course[]          @relation("CreatedCourses")
  enrollments         Enrollment[]
  announcements       Announcement[]
  resources           Resource[]        @relation("UploadedResources")
  calendarEvents      CalendarEvent[]
  securityLogs        SecurityLog[]
  userNotes           UserNote[]
  achievements        UserAchievement[]
  createdTemplates    LessonTemplate[]
  createdForms        Form[]            @relation("CreatedForms")
  formResponses       FormResponse[]
  sharedForms         Form[]            @relation("SharedForms")
  notifications       Notification[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- CURSOS ---

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?

  // Relaciones
  instructorId    String
  instructor      User        @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  
  templateId      String?
  template        LessonTemplate?   @relation(fields: [templateId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- EVALUACIONES (QUIZZES) ---

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id         String         @id @default(cuid())
  text       String
  order      Int
  quizId     String
  quiz       Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options    AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int?      @default(10)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- PROGRESO DEL ESTUDIANTE ---

model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())
  
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type         String          // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime        @default(now())
  
  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


// --- CONTENIDO GLOBAL ---

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String
  date      DateTime  @default(now())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  audience  String    @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR
  priority  String    @default("Normal")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalendarEvent {
  id                  String    @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean   @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        String // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  color               String?   @default("blue")
  attachments         Json[]    @default([])
  
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  category    String?
  url         String?
  uploadDate  DateTime  @default(now())
  
  uploaderId  String
  uploader    User     @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  hasPin      Boolean  @default(false)
  pin         String?

  parentId    String?
  parent      Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderChildren")

  tags String?
  ispublic Boolean @default(true)
  sharedWith User[] @relation("SharedResources")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- FORMULARIOS Y ENCUESTAS ---
model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean       @default(false)
  options     Json[]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id           String       @id @default(cuid())
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime     @default(now())
  score        Float? // For quizzes
  answers      FormAnswer[]
}

model FormAnswer {
  id         String    @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String
}


// --- PLANTILLAS ---

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          // SYSTEM, USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}


// --- GAMIFICACIÃ“N ---
model Achievement {
  id             String            @id @default(cuid())
  slug           AchievementSlug   @unique
  name           String
  description    String
  icon           String?
  points         Int               @default(0)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

// --- CONFIGURACIÃ“N Y OTROS ---

model SecurityLog {
  id           String    @id @default(cuid())
  event        String
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  emailAttempt String?
  createdAt    DateTime  @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?
  fontBody                  String?
  
  // Colores del tema claro
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?

  // Colores del tema oscuro
  primaryColorDark          String?
  backgroundColorDark       String?

  // Seguridad y Acceso
  allowPublicRegistration   Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated list of domains
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(false)
  passwordRequireLowercase  Boolean   @default(false)
  passwordRequireNumber     Boolean   @default(false)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Funcionalidades
  enableEmailNotifications  Boolean   @default(true)
  resourceCategories        String?   // Comma-separated list

  // Timestamps
  updatedAt                 DateTime  @updatedAt
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow") // 'yellow', 'blue', 'green', etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
}
