// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  // relationMode = "prisma"
}

// -----------------------------------------------------------------------------
// ENUMS - Definiciones de tipos reutilizables
// -----------------------------------------------------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    DROPDOWN
    DATE
    NUMBER
}


// -----------------------------------------------------------------------------
// MODELS - Definición de las tablas de la base de datos
// -----------------------------------------------------------------------------

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  theme               String?
  xp                  Int?      @default(0)

  // Relaciones
  createdCourses      Course[]           @relation("CreatedCourses")
  enrollments         Enrollment[]
  quizAttempts        QuizAttempt[]
  createdResources    EnterpriseResource[] @relation("UploadedResources")
  sharedResources     EnterpriseResource[] @relation("SharedResources")
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]
  notifications       Notification[]
  notes               UserNote[]
  progress            CourseProgress[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  achievements        UserAchievement[]
  createdForms        Form[]             @relation("CreatedForms")
  sharedForms         Form[]             @relation("SharedForms")
  formResponses       FormResponse[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relaciones
  instructorId    String
  instructor      User          @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id           String         @id @default(cuid())
  title        String
  order        Int
  moduleId     String
  module       Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes    UserNote[]
  completedBy  LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  order       Int
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  // Relación a un Quiz
  quiz        Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType   @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String     @id @default(cuid())
  text       String
  isCorrect  Boolean    @default(false)
  feedback   String?
  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime  @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId        String    @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float?
  completedLessons    LessonCompletionRecord[]
  
  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String  @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // "view" o "quiz"
    score       Float?

    @@unique([progressId, lessonId])
}


model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  submittedAt DateTime @default(now())
  answers   AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

  @@index([attemptId])
}

model EnterpriseResource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         ResourceType
  category     String
  tags         String?     // Comma-separated values
  url          String?
  uploadDate   DateTime    @default(now())
  uploader     User        @relation("UploadedResources", fields: [uploaderId], references: [id])
  uploaderId   String
  pin          String?
  ispublic     Boolean     @default(true)
  
  // Self-relation for folders
  parentId     String?
  parent       EnterpriseResource?  @relation("Children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("Children")

  // Many-to-many for sharing
  sharedWith   User[] @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json     // e.g., ["ALL"], ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
  priority   String?  // e.g., "Normal", "Urgente"

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String?
  videoConferenceLink String?
  attachments         Json? // Array of {name: string, url: string}

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[]

  @@index([creatorId])
}

model SecurityLog {
  id           String    @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?
  createdAt    DateTime  @default(now())
  country      String?
  city         String?

  @@index([userId])
  @@index([createdAt])
}

model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // "SYSTEM" or "USER"
  creatorId   String?
  creator     User?    @relation(fields: [creatorId], references: [id])
  
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int
}

model PlatformSettings {
    id                        String    @id @default(cuid())
    platformName              String    @default("NexusAlpri")
    allowPublicRegistration   Boolean   @default(true)
    enableEmailNotifications  Boolean   @default(true)
    require2faForAdmins       Boolean   @default(false)
    idleTimeoutMinutes        Int       @default(20)
    enableIdleTimeout         Boolean   @default(true)
    
    // Password policies
    passwordMinLength         Int       @default(8)
    passwordRequireUppercase  Boolean   @default(true)
    passwordRequireLowercase  Boolean   @default(true)
    passwordRequireNumber     Boolean   @default(true)
    passwordRequireSpecialChar Boolean  @default(true)
    
    // Content settings
    resourceCategories        String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
    
    // Theme settings
    primaryColor              String?   @default("#6366f1")
    secondaryColor            String?   @default("#a5b4fc")
    accentColor               String?   @default("#ec4899")
    backgroundColorLight      String?   @default("#f8fafc")
    primaryColorDark          String?   @default("#a5b4fc")
    backgroundColorDark       String?   @default("#020617")
    fontHeadline              String?   @default("Space Grotesk")
    fontBody                  String?   @default("Inter")
    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    aboutImageUrl             String?
    benefitsImageUrl          String?
}

model Achievement {
    id              String    @id @default(cuid())
    slug            String    @unique
    name            String
    description     String
    icon            String?
    points          Int       @default(0)
    
    userAchievements UserAchievement[]
}

model UserAchievement {
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt        DateTime  @default(now())

    @@id([userId, achievementId])
}

model Form {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  status        FormStatus @default(DRAFT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  creatorId     String
  creator       User      @relation("CreatedForms", fields: [creatorId], references: [id])
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[] @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id            String      @id @default(cuid())
  formId        String
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  label         String
  type          FormFieldType
  required      Boolean     @default(false)
  placeholder   String?
  options       Json?       // For multiple choice, dropdown, etc.
  order         Int

  responses     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String    @id @default(cuid())
  formId        String
  form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)

  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  submittedAt   DateTime  @default(now())
  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id            String      @id @default(cuid())
  responseId    String
  response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId       String
  field         FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value         Json?
  
  @@index([responseId])
  @@index([fieldId])
}
