// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  role               UserRole  @default(STUDENT)
  avatar             String?
  theme              String?
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  registeredDate     DateTime  @default(now())

  createdCourses     Course[]      @relation("CreatedCourses")
  enrollments        Enrollment[]
  progress           CourseProgress[]
  uploadedResources  Resource[]    @relation("UploadedResources")
  sharedResources    Resource[]    @relation("SharedWithUsers")
  createdTemplates   LessonTemplate[] @relation("CreatedTemplates")
  createdEvents      CalendarEvent[] @relation("CreatedEvents")
  attendedEvents     CalendarEvent[] @relation("EventAttendees")
  authoredAnnouncements Announcement[] @relation("AuthoredAnnouncements")
  notifications      Notification[]
  securityLogs       SecurityLog[]

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?

  instructorId    String
  instructor      User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  templateId    String?

  @@index([moduleId])
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    order     Int
    content   String?     @db.Text
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?

    @@index([lessonId])
}

model Quiz {
    id            String     @id @default(cuid())
    title         String
    description   String?    @db.Text
    contentBlockId String    @unique
    contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions     Question[]
}

model Question {
    id       String         @id @default(cuid())
    text     String
    type     QuestionType
    order    Int
    quizId   String
    quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options  AnswerOption[]

    @@index([quizId])
}

model AnswerOption {
    id         String   @id @default(cuid())
    text       String
    isCorrect  Boolean
    feedback   String?  @db.Text
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@index([questionId])
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@id([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  progressPercentage  Float     @default(0)

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId            String
  
  enrollmentId        String    @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [userId, courseId], onDelete: Cascade)

  completedLessons    LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
}


model LessonCompletionRecord {
    id         String      @id @default(cuid())
    progressId String
    progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId   String
    lesson     Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type       String      // 'view' or 'quiz'
    score      Float?      // Score for quizzes
    completedAt DateTime @default(now())

    @@unique([progressId, lessonId])
}


model Resource {
    id           String   @id @default(cuid())
    title        String
    description  String?  @db.Text
    type         ResourceType
    category     String
    tags         String?  // Comma-separated
    url          String?
    uploadDate   DateTime @default(now())
    ispublic     Boolean  @default(true)
    pin          String?  // Hashed PIN
    
    parentId     String?
    parent       Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children     Resource[] @relation("FolderChildren")

    uploaderId   String?
    uploader     User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
    sharedWith   User[]   @relation("SharedWithUsers")

    @@index([parentId])
    @@index([uploaderId])
}

model Announcement {
    id          String    @id @default(cuid())
    title       String
    content     String    @db.Text
    date        DateTime  @default(now())
    priority    String?   @default("Normal")
    audience    Json      // 'ALL' or array of UserRole
    authorId    String
    author      User      @relation("AuthoredAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
    
    @@index([authorId])
}

model CalendarEvent {
    id                  String        @id @default(cuid())
    title               String
    description         String?       @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean       @default(false)
    color               String        @default("blue")
    videoConferenceLink String?
    attachments         Json?         // Array of {name: string, url: string}
    
    audienceType        EventAudienceType @default(ALL)
    
    creatorId           String
    creator             User          @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]        @relation("EventAttendees")
    
    @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model SecurityLog {
    id           String           @id @default(cuid())
    event        SecurityLogEvent
    ipAddress    String?
    details      String?
    createdAt    DateTime         @default(now())
    
    userId       String?
    user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
    emailAttempt String?          // For failed logins where user ID is unknown
    
    @@index([userId])
    @@index([event])
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  
  creatorId      String?
  creator        User?          @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
  
  @@index([creatorId])
}

model TemplateBlock {
  id           String     @id @default(cuid())
  type         LessonType
  order        Int
  templateId   String
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}


// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

model PlatformSettings {
  id                        Int      @id @default(1)
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?

  // Color Palette
  primaryColor              String?  @default("#673AB7")
  secondaryColor            String?  @default("#6F42C1")
  accentColor               String?  @default("#6F42C1")
  backgroundColorLight      String?  @default("#F8F9FA")
  primaryColorDark          String?  @default("#BB86FC")
  backgroundColorDark       String?  @default("#121212")

  // Typography
  fontHeadline              String?  @default("Space Grotesk")
  fontBody                  String?  @default("Inter")

  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  
  // Security
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)

  updatedAt                 DateTime @updatedAt
}
