// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  avatar              String?
  role                UserRole @default(STUDENT)
  isActive            Boolean  @default(true)
  registeredDate      DateTime @default(now())
  lastLogin           DateTime?
  xp                  Int      @default(0)

  // Security
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorSecret     String?

  // Relations
  coursesCreated      Course[]               @relation("CreatedCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  announcements       Announcement[]
  calendarEvents      CalendarEvent[]        @relation("EventsCreated")
  attendedEvents      CalendarEvent[]        @relation("EventAttendees")
  uploadedResources   Resource[]             @relation("UploadedResources")
  sharedResources     Resource[]             @relation("SharedResources")
  securityLogs        SecurityLog[]
  quizAttempts        QuizAttempt[]
  lessonTemplates     LessonTemplate[]       @relation("UserTemplates")
  userAchievements    UserAchievement[]
  notes               UserNote[]
  securityLogs        SecurityLog[]
  createdForms        Form[]
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?

  // Relations
  instructor        User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  module                  Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId                String
  contentBlocks           ContentBlock[]
  completedBy             LessonCompletionRecord[]
  notes                   UserNote[]
  sourceTemplates         LessonTemplate[]         @relation("LessonToTemplate")

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id            String         @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?
  
  // Relations
  contentBlock    ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId  String         @unique
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  
  // Relations
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean         @default(false)
  feedback     String?
  
  // Relations
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id             String          @id @default(cuid())
  attemptNumber  Int
  score          Float
  submittedAt    DateTime        @default(now())
  
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  answers        AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  
  // Relations
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  quizAttemptId    String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}


model Enrollment {
  id         String         @id @default(cuid())
  enrolledAt DateTime       @default(now())

  // Relations
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  course     Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt

  // Relations
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  course            Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollment        Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId      String                   @unique
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String   @id @default(cuid())
  type         String   // "view" or "quiz"
  score        Float?   // Score if type is "quiz"
  completedAt  DateTime @default(now())

  // Relations
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  uploadDate   DateTime     @default(now())
  category     String?
  tags         String?
  pin          String?
  ispublic     Boolean      @default(true)

  // Relations
  uploader   User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?
  parent     Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?
  children   Resource[]   @relation("FolderChildren")
  sharedWith User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      DateTime @default(now())
  audience  Json     @default("\"ALL\"")
  priority  String   @default("Normal")
  
  // Relations
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
}


model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId])
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  updatedAt                  DateTime  @updatedAt
  platformName               String
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   
  
  // Password Policy
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)

  // Session Policy
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)

  // 2FA Policy
  require2faForAdmins        Boolean   @default(false)

  // Customization
  resourceCategories       String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  primaryColor             String?
  secondaryColor           String?
  accentColor              String?
  backgroundColorLight     String?
  primaryColorDark         String?
  backgroundColorDark      String?
  logoUrl                  String?
  watermarkUrl             String?
  landingImageUrl          String?
  authImageUrl             String?
  aboutImageUrl            String?
  benefitsImageUrl         String?
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType   @default(USER)
  
  // Relations
  creator        User?            @relation("UserTemplates", fields: [creatorId], references: [id])
  creatorId      String?
  templateBlocks TemplateBlock[]
  sourceLesson   Lesson?          @relation("LessonToTemplate", fields: [sourceLessonId], references: [id], onDelete: SetNull)
  sourceLessonId String?          @unique

  @@index([creatorId])
}

model TemplateBlock {
  id               String         @id @default(cuid())
  type             LessonType
  order            Int
  
  // Relations
  lessonTemplate   LessonTemplate @relation(fields: [lessonTemplateId], references: [id], onDelete: Cascade)
  lessonTemplateId String

  @@index([lessonTemplateId])
}

model UserNote {
  id        String   @id @default(cuid())
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}


model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  emailAttempt String?
  city         String?
  country      String?
  details      String?

  // Relations
  user         User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model Achievement {
  id               String            @id @default(cuid())
  slug             AchievementSlug   @unique
  name             String
  description      String
  icon             String
  points           Int
  
  // Relations
  unlockedBy       UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  unlockedAt    DateTime @default(now())
  
  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  
  allowPublicRegistration    Boolean   @default(true)
  emailWhitelist             String?   // Comma-separated list of allowed emails/domains
  
  enableEmailNotifications   Boolean   @default(true)
  
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  
  require2faForAdmins        Boolean   @default(false)

  resourceCategories         String?   @db.Text
  updatedAt                  DateTime  @updatedAt
}

model LessonTemplate {
  id             String            @id @default(cuid())
  name           String
  description    String?
  type           String            // "SYSTEM" or "USER"
  
  // Relations
  templateBlocks TemplateBlock[]
  creatorId      String?
  creator        User?             @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  
  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  creatorId    String
  creator      User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]
  
  @@index([creatorId])
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  options      Json?         // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  placeholder  String?
  order        Int
  
  // Relations
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id           String       @id @default(cuid())
  submittedAt  DateTime     @default(now())
  score        Float?       // Puntuación si el formulario es un quiz

  // Relations
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String       @id @default(cuid())
  value      String
  
  // Relations
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String

    @@unique([userId, lessonId])
}
