// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---
model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  registeredDate        DateTime      @default(now())
  theme                 String?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  isActive              Boolean       @default(true)
  xp                    Int           @default(0)

  courses               Course[]      @relation("CourseInstructor")
  enrollments           Enrollment[]
  notifications         Notification[]
  announcements         Announcement[]
  calendarEventsCreated CalendarEvent[] @relation("EventCreator")
  calendarEvents        CalendarEvent[] @relation("EventAttendees")
  resourcesUploaded     Resource[]
  courseProgress        CourseProgress[]
  quizAttempts          QuizAttempt[]
  userNotes             UserNote[]
  achievements          UserAchievement[]
  formsCreated          Form[]
  formResponses         FormResponse[]
  sharedForms           Form[]        @relation("FormSharedWith")

  @@index([email])
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  instructorId String
  instructor   User   @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  userNotes          UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String  @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String  @unique
  progressPercentage  Float?
  completedAt         DateTime?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment  Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id         String   @id @default(cuid())
  progressId String
  lessonId   String
  type       String   // 'view' or 'quiz'
  score      Float?
  completedAt DateTime @default(now())
  
  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}


model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String  @id @default(cuid())
  quizAttemptId     String
  questionId        String
  selectedOptionId  String
  
  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  hasPin       Boolean      @default(false)
  pin          String?
  parentId     String?
  ispublic     Boolean      @default(true)
  
  uploaderId String?
  uploader   User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parent   Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Resource[]   @relation("FolderHierarchy")
  sharedWith User[]

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime
  priority  String?   @default("Normal")
  audience  Json      // 'ALL' | UserRole[]
  
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  attachments         Json?
  color               String?
  audienceType        EventAudienceType @default(ALL)
  
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?

  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  // Comma-separated list of allowed domains/emails

  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)

  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  
  resourceCategories        String   @db.Text

  updatedAt                 DateTime @updatedAt
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?        @db.Text
  type            TemplateType
  creatorId       String?
  
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model SecurityLog {
  id           String    @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?
  createdAt    DateTime  @default(now())
  
  userId       String?
  emailAttempt String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model Achievement {
  id          String    @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int

  users       UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}


model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[] @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id            String       @id @default(cuid())
  label         String
  type          FormFieldType
  placeholder   String?
  required      Boolean      @default(false)
  options       Json?        // For 'select', 'radio', 'checkbox'
  order         Int
  
  formId        String
  form          Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime @default(now())
  score         Float?
  
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id            String   @id @default(cuid())
  responseId    String
  fieldId       String
  value         String   @db.Text

  response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field         FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
}
