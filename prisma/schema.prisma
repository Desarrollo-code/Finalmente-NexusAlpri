
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


// --- 1. MODELOS DE AUTENTICACIÓN Y USUARIOS ---
model User {
  id                    String        @id @default(cuid())
  name                  String?
  email                 String        @unique
  password              String?
  role                  UserRole      @default(STUDENT)
  avatar                String?
  registeredDate        DateTime?     @default(now())
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  theme                 String?
  xp                    Int?          @default(0)

  // Relaciones
  createdCourses        Course[]      @relation("CreatedCourses")
  enrollments           Enrollment[]
  notifications         Notification[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  uploadedResources     Resource[]
  sharedResources       Resource[]    @relation("SharedWithUsers")
  securityLogs          SecurityLog[]
  createdAnnouncements  Announcement[]
  courseProgress        CourseProgress[]
  quizAttempts          QuizAttempt[]
  notes                 UserNote[]
  createdTemplates      LessonTemplate[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- 2. MODELOS DE CONTENIDO DE CURSOS ---

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  instructorId    String?
  instructor      User?       @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String        @id @default(cuid())
  title       String
  order       Int
  
  moduleId    String
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes         UserNote[]

  @@index([moduleId])
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    content   String?     @db.Text
    order     Int

    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    quiz      Quiz?

    @@index([lessonId])
}

enum LessonType {
    TEXT
    VIDEO
    QUIZ
    FILE
}


// --- 3. MODELOS DE EVALUACIONES (QUIZZES) ---

model Quiz {
    id           String     @id @default(cuid())
    title        String
    description  String?    @db.Text
    
    contentBlockId String    @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions    Question[]
    attempts     QuizAttempt[]
}

model Question {
    id        String    @id @default(cuid())
    text      String    @db.Text
    type      QuestionType @default(MULTIPLE_CHOICE)
    order     Int
    
    quizId    String
    quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options   AnswerOption[]
    attempts  AnswerAttempt[]
    
    @@index([quizId])
}

enum QuestionType {
    MULTIPLE_CHOICE
}

model AnswerOption {
    id          String   @id @default(cuid())
    text        String   @db.Text
    isCorrect   Boolean
    feedback    String?  @db.Text
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    AnswerAttempt AnswerAttempt[]
    
    @@index([questionId])
}

model QuizAttempt {
    id          String   @id @default(cuid())
    score       Float
    attemptedAt DateTime @default(now())

    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId      String
    quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    answers     AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id          String   @id @default(cuid())
    
    attemptId   String
    attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}


// --- 4. MODELOS DE PROGRESO E INSCRIPCIONES ---

model Enrollment {
  id          String      @id @default(cuid())
  enrolledAt  DateTime    @default(now())
  
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                  String      @id @default(cuid())
  progressPercentage  Float       @default(0)
  startedAt           DateTime    @default(now())
  completedAt         DateTime?
  
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  enrollmentId        String      @unique
  enrollment          Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  type        String    // 'view' or 'quiz'
  score       Float?
  completedAt DateTime  @default(now())
  
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model UserNote {
  id          String @id @default(cuid())
  content     String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- 5. MODELOS DE CONTENIDO GLOBAL ---

model Resource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  uploadDate  DateTime    @default(now())
  ispublic    Boolean     @default(true)
  pin         String?

  uploaderId  String
  uploader    User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  
  sharedWith  User[]      @relation("SharedWithUsers")

  parentId    String?
  parent      Resource?   @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Resource[]  @relation("FolderChildren")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  date        DateTime  @default(now())
  priority    String?   @default("Normal")
  audience    Json      // "ALL" or ["STUDENT", "INSTRUCTOR"]
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  color               String?
  audienceType        EventAudienceType
  attachments         Json?

  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  attendees           User[]   @relation("EventAttendees")
  
  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- 6. MODELOS DE SISTEMA Y GAMIFICACIÓN ---

model Notification {
  id          String    @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SecurityLog {
  id          String            @id @default(cuid())
  event       SecurityLogEvent
  details     String?           @db.Text
  ipAddress   String?
  userAgent   String?
  city        String?
  country     String?
  createdAt   DateTime          @default(now())
  
  userId        String?
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt  String?

  @@index([userId])
  @@index([event])
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt

  // Theme settings
  primaryColor              String?   @default("#6366f1") // indigo-500
  secondaryColor            String?   @default("#a5b4fc") // indigo-300
  accentColor               String?   @default("#ec4899") // pink-500
  backgroundColorLight      String?   @default("#f8fafc") // slate-50
  primaryColorDark          String?   @default("#a5b4fc") // indigo-300
  backgroundColorDark       String?   @default("#020617") // slate-950
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model LessonTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          TemplateType    @default(USER)
  createdAt     DateTime        @default(now())

  creatorId     String?
  creator       User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String      @id @default(cuid())
  type        LessonType
  order       Int

  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

enum TemplateType {
    SYSTEM
    USER
}

model Achievement {
    id              String      @id @default(cuid())
    slug            String      @unique
    name            String
    description     String
    icon            String?
    points          Int         @default(0)

    userAchievements UserAchievement[]
}

model UserAchievement {
    id              String      @id @default(cuid())
    earnedAt        DateTime    @default(now())

    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@index([userId])
}
