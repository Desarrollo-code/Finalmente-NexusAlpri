
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime             @default(now())
  courses             Course[] // Courses created by this user (instructor)
  enrollments         Enrollment[]
  progress            CourseProgress[]
  resources           Resource[] // Resources uploaded by this user
  notifications       Notification[]
  createdEvents       CalendarEvent[]      @relation("EventCreator")
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]     @relation("TemplateCreator")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?        @db.Text
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id             String          @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  
  @@index([lessonId])
}

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id        String        @id @default(cuid())
  text      String
  type      QuestionType
  order     Int
  quizId    String
  quiz      Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?   @db.Text
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                String                    @id @default(cuid())
  userId            String
  courseId          String
  enrollmentId      String                    @unique
  progressPercentage Float                    @default(0)
  updatedAt         DateTime                  @updatedAt
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progressId  String
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // "view" or "quiz"
    score       Float? // Only for quiz type

    @@unique([progressId, lessonId])
}


model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  type          ResourceType
  url           String?       @db.Text
  category      String
  tags          String[]
  pin           String?
  uploaderId    String?
  uploader      User?         @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploadDate    DateTime      @default(now())
  parentId      String?
  parent        Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]    @relation("FolderHierarchy")

  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id         String      @id @default(cuid())
  title      String
  content    String      @db.Text
  date       DateTime    @default(now())
  authorId   String?
  author     User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience   Json        // e.g., ["STUDENT", "INSTRUCTOR"] or "ALL"
  priority   String?     @default("Normal") // e.g., "Normal", "Urgente"
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json?              // Store array of { name: string, url: string }
  color               String             @default("blue")
  creatorId           String
  creator             User               @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  audienceType        EventAudienceType  @default(ALL)
  attendees           User[]             @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id            String    @id @default(cuid())
  event         String
  ipAddress     String
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt  String?   // For failed logins with unknown user
  details       String?   @db.Text
  createdAt     DateTime  @default(now())

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Comma-separated list
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String[]
  updatedAt                   DateTime  @updatedAt
}

enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id              String            @id @default(cuid())
  name            String
  description     String?
  type            TemplateType      @default(USER)
  creatorId       String?
  creator         User?             @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String        @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int

  @@index([templateId])
}

