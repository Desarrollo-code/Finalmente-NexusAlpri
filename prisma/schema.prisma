// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // PEGA AQUÍ TU CADENA DE CONEXIÓN DIRECTA (PUERTO 5432)
  url               = "postgresql://postgres:Alprigrama.2024@aws-0-us-east-1.pooler.supabase.com:5432/postgres"
  shadowDatabaseUrl = "postgresql://postgres:Alprigrama.2024@aws-0-us-east-1.pooler.supabase.com:6543/postgres"
  relationMode      = "prisma"
}

// ---------------------------
// ENUMS
// ---------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// ---------------------------
// MODELS
// ---------------------------

model User {
  id                  String                 @id @default(cuid())
  name                String
  email               String                 @unique
  password            String
  role                UserRole               @default(STUDENT)
  avatar              String?
  xp                  Int                    @default(0)
  isTwoFactorEnabled  Boolean                @default(false)
  twoFactorSecret     String?
  isActive            Boolean                @default(true)
  registeredDate      DateTime               @default(now())
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  courses             Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  achievements        UserAchievement[]
  notifications       Notification[]
  createdForms        Form[]
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]        @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]        @relation("AttendingEvents")
  uploadedResources   Resource[]
  sharedResources     Resource[]             @relation("SharedResources")
  sharedForms         Form[]                 @relation("SharedForms")
  createdTemplates    LessonTemplate[]
}

model Course {
  id                String            @id @default(cuid())
  title             String
  description       String?           @db.Text
  category          String?
  status            CourseStatus      @default(DRAFT)
  publicationDate   DateTime?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  instructorId      String
  instructor        User              @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id            String             @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  templateId    String?
  template      LessonTemplate?    @relation(fields: [templateId], references: [id], onDelete: SetNull)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  feedback   String?
  points     Int             @default(0)
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String         @default("view") // view, quiz, video
  score       Float?

  @@unique([progressId, lessonId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean    @default(false)
  pin          String?
  parentId     String?
  parent       Resource?  @relation("FolderChildren", fields: [parentId], references: [id])
  children     Resource[] @relation("FolderChildren")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResources")
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime  @default(now())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String    @default("ALL")
  priority  String    @default("Normal")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  attachments         Json?
  audienceType        String
  creatorId           String
  creator             User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("AttendingEvents")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model SecurityLog {
  id           String           @id @default(cuid())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?
  fontBody                  String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  unlockedBy        UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model LessonTemplate {
  id               String         @id @default(cuid())
  name             String
  description      String?
  type             TemplateType   @default(USER)
  creatorId        String
  creator          User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  templateBlocks   TemplateBlock[]
  lessons          Lesson[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model TemplateBlock {
  id          String       @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // For 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     Answer[]
  score       Float?
}

model Answer {
  id      String      @id @default(cuid())
  responseId String
  response  FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId   String
  field     FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value     String
}
