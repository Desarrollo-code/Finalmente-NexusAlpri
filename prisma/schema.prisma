// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}


// --- MODELS ---

model User {
  id                  String  @id @default(cuid())
  name                String
  email               String  @unique
  password            String
  avatar              String?
  role                UserRole       @default(STUDENT)
  xp                  Int?           @default(0)
  theme               String?
  isTwoFactorEnabled  Boolean        @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime       @default(now())
  isActive            Boolean        @default(true)

  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  notifications       Notification[]
  uploadedResources   Resource[]     @relation("UploadedResources")
  sharedResources     Resource[]     @relation("SharedResources")
  announcements       Announcement[]
  createdEvents       CalendarEvent[] @relation("EventCreator")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  createdForms        Form[]          @relation("CreatedForms")
  sharedForms         Form[]          @relation("SharedForms")
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      CourseStatus @default(DRAFT)
  publicationDate DateTime?
  
  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@index([instructorId])
}

model Module {
  id       String  @id @default(cuid())
  title    String
  order    Int

  courseId String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id       String  @id @default(cuid())
  title    String
  order    Int

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
  
  @@index([moduleId])
}

model ContentBlock {
  id      String  @id @default(cuid())
  type    LessonType
  content String? @db.Text
  order   Int

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz     Quiz?
  
  @@index([lessonId])
}

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String? @db.Text
  maxAttempts  Int?

  contentBlockId String @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String  @id @default(cuid())
  text    String  @db.Text
  order   Int

  quizId  String
  quiz    Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String? @db.Text

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


// --- PROGRESS & ENROLLMENT MODELS ---

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?   @default(0)
  completedAt        DateTime?
  
  enrollmentId       String? @unique
  enrollment         Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view' or 'quiz'
  score       Float?
  completedAt DateTime @default(now())
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id            String  @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
  
  @@index([userId, quizId])
}

model AnswerAttempt {
    id              String @id @default(cuid())
    attemptId       String
    questionId      String
    selectedOptionId String

    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
}

// --- GLOBAL CONTENT MODELS ---

model CalendarEvent {
  id        String   @id @default(cuid())
  title     String
  description String? @db.Text
  location  String?
  start     DateTime
  end       DateTime
  allDay    Boolean  @default(false)
  color     String   @default("blue")
  videoConferenceLink String?
  attachments Json? // [{ name: string, url: string }]
  
  audienceType EventAudienceType @default(ALL)

  creatorId String
  creator   User   @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")
  
  @@index([creatorId])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime  @default(now())
  priority  String?   @default("Normal")
  audience  Json      // Puede ser "ALL" o un array de UserRole
  
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String? @db.Text
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  url         String?  @db.Text
  category    String?
  tags        String?
  uploadDate  DateTime @default(now())
  ispublic    Boolean  @default(true)
  pin         String?

  uploaderId   String?
  uploader     User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith   User[]   @relation("SharedResources")
  
  // Self-relation for folders
  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children    Resource[]   @relation("FolderChildren")

  @@index([parentId])
  @@index([uploaderId])
}

// --- SECURITY & SETTINGS ---

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  
  userId       String?
  emailAttempt String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  city         String?
  country      String?

  @@index([userId])
}

model PlatformSettings {
  id                        String  @id @default(cuid())
  updatedAt                 DateTime @updatedAt
  platformName              String  @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String? @default("#6366f1")
  secondaryColor            String? @default("#a5b4fc")
  accentColor               String? @default("#ec4899")
  backgroundColorLight      String? @default("#f8fafc")
  primaryColorDark          String? @default("#a5b4fc")
  backgroundColorDark       String? @default("#020617")
  fontHeadline              String? @default("Space Grotesk")
  fontBody                  String? @default("Inter")
  
  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String? @db.Text // Comma separated emails/domains
  
  require2faForAdmins       Boolean @default(false)
  enableIdleTimeout         Boolean @default(true)
  idleTimeoutMinutes        Int     @default(20)
  
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  
  resourceCategories        String  @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
}

// --- GAMIFICATION ---

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String?
  points      Int

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

// --- TEMPLATES ---
model LessonTemplate {
  id           String @id @default(cuid())
  name         String
  description  String?
  type         String // SYSTEM or USER
  creatorId    String? // Null for system templates
  
  creator      User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String @id @default(cuid())
  templateId  String
  type        LessonType
  order       Int
  
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMS ---
model Form {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  creatorId     String
  creator       User      @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  sharedWith    User[]    @relation("SharedForms")
  
  fields        FormField[]
  responses     FormResponse[]

  @@index([creatorId])
}

model FormField {
  id            String      @id @default(cuid())
  formId        String
  label         String
  type          FormFieldType
  required      Boolean     @default(false)
  placeholder   String?
  options       Json?       // [{id: string, text: string, isCorrect?: boolean, points?: number}]
  order         Int
  
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String    @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime  @default(now())
  score         Float? // For quizzes

  form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]
  
  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id            String    @id @default(cuid())
  responseId    String
  fieldId       String
  value         String    @db.Text

  response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field         FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
}
