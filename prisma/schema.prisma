// datasource db define el tipo y la URL de la base de datos.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator client configura el cliente de Prisma para ser usado en la aplicación.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
// Define los posibles roles de usuario en la plataforma.
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// Define los posibles estados de un curso.
enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// Define los tipos de contenido que puede tener una lección.
enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// Define los tipos de preguntas que puede tener un quiz.
enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

// Define los tipos de recursos que se pueden subir a la biblioteca.
enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

// Define la audiencia de un evento del calendario.
enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// Define los diferentes tipos de eventos de seguridad que se registran.
enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// Define los posibles estados de un formulario
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Define los tipos de campos que puede tener un formulario
enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
}


// --- MODELS ---
model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                UserRole             @default(STUDENT)
  avatar              String?
  theme               String?              @default("dark")
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime             @default(now())
  xp                  Int?                 @default(0) // Gamification points

  // Relaciones
  courses             Course[]             @relation("CreatedCourses")
  enrollments         Enrollment[]
  quizAttempts        QuizAttempt[]
  courseProgress      CourseProgress[]
  uploadedResources   EnterpriseResource[] @relation("UploadedResources")
  announcements       Announcement[]
  createdEvents       CalendarEvent[]      @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]      @relation("AttendingEvents")
  notifications       Notification[]
  userNotes           UserNote[]
  achievements        UserAchievement[]
  createdForms        Form[]               @relation("CreatedForms")
  formResponses       FormResponse[]
  sharedResources     EnterpriseResource[] @relation("SharedResources")

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relación con el instructor
  instructorId String
  instructor   User   @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  // Relación con los módulos
  modules Module[]

  // Relación con las inscripciones
  enrollments Enrollment[]

  // Relación con el progreso
  progress CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id               String                 @id @default(cuid())
  title            String
  order            Int
  moduleId         String
  module           Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks    ContentBlock[]
  completionRecord LessonCompletionRecord[]
  userNotes        UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(SINGLE_CHOICE)
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  answers   AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String          @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?
  questionId String
  question  Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Int?
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id         String  @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String // 'view' or 'quiz'
  score      Float? // Score from 0 to 100 for quizzes

  @@unique([progressId, lessonId])
}


model QuizAttempt {
  id          String          @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  attemptedAt DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?      // Comma-separated tags
  url          String?
  uploadDate   DateTime     @default(now())
  hasPin       Boolean      @default(false)
  pin          String?      @db.Text
  ispublic     Boolean      @default(true)
  
  // Relaciones
  uploaderId   String
  uploader     User         @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId     String?
  parent       EnterpriseResource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderChildren")
  sharedWith   User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}


model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  color               String             @default("blue")
  videoConferenceLink String?
  audienceType        EventAudienceType  @default(ALL)
  attachments         Json?

  // Relaciones
  creatorId           String
  creator             User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("AttendingEvents")

  @@index([creatorId])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  priority    String   @default("Normal")
  audience    Json     // 'ALL', or an array of UserRole strings
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories        String    @default("General,Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto") @db.Text
  
  // Customization fields
  primaryColor        String?   @default("#6366f1")
  secondaryColor      String?   @default("#a5b4fc")
  accentColor         String?   @default("#ec4899")
  backgroundColorLight String?  @default("#f8fafc")
  primaryColorDark    String?   @default("#a5b4fc")
  backgroundColorDark String?   @default("#020617")
  fontHeadline        String?   @default("Space Grotesk")
  fontBody            String?   @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  updatedAt                 DateTime  @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  slug            String            @unique
  name            String
  description     String
  icon            String?           // e.g., URL to an SVG or a Lucide icon name
  points          Int               @default(50)
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model LessonTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          String          @default("USER") // 'SYSTEM' or 'USER'
  creatorId     String?         // Null for system templates
  creator       User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int

  @@index([templateId])
}

model Form {
  id             String          @id @default(cuid())
  title          String
  description    String?         @db.Text
  status         FormStatus      @default(DRAFT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  creatorId      String
  creator        User            @relation("CreatedForms", fields: [creatorId], references: [id])

  fields         FormField[]
  responses      FormResponse[]
  sharedWith     User[]          // Users the form is specifically shared with

  @@index([creatorId])
}

model FormField {
  id           String        @id @default(cuid())
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  placeholder  String?
  options      Json?         // For select, radio, checkbox, etc.
  order        Int
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  answers      FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  respondentId String
  respondent  User          @relation(fields: [respondentId], references: [id])
  
  submittedAt DateTime      @default(now())
  answers     FormAnswer[]

  @@index([formId])
  @@index([respondentId])
}

model FormAnswer {
  id           String        @id @default(cuid())
  responseId   String
  response     FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId      String
  field        FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value        Json          // Can store string, number, array of strings, etc.

  @@index([responseId])
  @@index([fieldId])
}
