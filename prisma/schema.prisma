// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String
  password           String
  avatar             String?
  role               UserRole  @default(STUDENT)
  isActive           Boolean   @default(true)
  registeredDate     DateTime  @default(now())
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  xp                 Int       @default(0)

  // Relations
  enrollments      Enrollment[]
  coursesCreated   Course[]          @relation("InstructorCourses")
  uploadedResources Resource[]        @relation("Uploader")
  announcements    Announcement[]
  createdEvents    CalendarEvent[]
  notifications    Notification[]
  notes            UserNote[]
  securityLogs     SecurityLog[]
  createdTemplates LessonTemplate[]
  createdForms     Form[]            @relation("FormCreator")
  formResponses    FormResponse[]
  achievements     UserAchievement[]
  sharedResources  Resource[]        @relation("SharedResource")
  attendedEvents   CalendarEvent[]   @relation("EventAttendees")
  sharedForms      Form[]            @relation("SharedForm")
  quizAttempts     QuizAttempt[]
  progress         CourseProgress[] // Relación inversa añadida aquí
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String                  @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float?
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // 'view', 'quiz', 'video'
  score       Float?
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlockId String        @unique
  contentBlock ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
  maxAttempts  Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id        String          @id @default(cuid())
  text      String
  isCorrect Boolean         @default(false)
  feedback  String?
  questionId String
  question  Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  points    Int             @default(0)
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  submittedAt   DateTime        @default(now())
  attemptNumber Int
  answers       AnswerAttempt[]
}

model AnswerAttempt {
    id String @id @default(cuid())
    attempt QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId String
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId String
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?
  type         ResourceType @default(DOCUMENT)
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean    @default(false)
  pin          String?
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  sharedWith   User[]     @relation("SharedResource")
  ispublic     Boolean    @default(true)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   @default("ALL") // "ALL", o un array de UserRole como string JSON
  priority  String   @default("Normal")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  audienceType        EventAudienceType @default(ALL)
  color               String            @default("blue")
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         @default("USER") // 'SYSTEM' or 'USER'
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  createdAt   DateTime       @default(now())
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  isQuiz      Boolean        @default(false)
  sharedWith  User[]         @relation("SharedForm")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // Para 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     Answer[]
  score       Float?
}

model Answer {
  id         String     @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String     @db.Text
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String?
  points       Int
  users        UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}


model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String? // Comma-separated list of allowed domains
  resourceCategories        String?   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
}
