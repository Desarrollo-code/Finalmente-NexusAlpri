// Este es tu esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------
// ENUMERACIONES
// -----------------------------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

// -----------------------------------------------------
// MODELOS PRINCIPALES
// -----------------------------------------------------

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  name                String
  password            String
  role                UserRole               @default(STUDENT)
  avatar              String?
  theme               String?                @default("dark")
  isTwoFactorEnabled  Boolean                @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime               @default(now())
  coursesAsInstructor Course[]               @relation("InstructorToCourse")
  enrollments         Enrollment[]
  notes               UserNote[]
  progress            CourseProgress[]
  quizAttempts        QuizAttempt[]
  lessonCompletions   LessonCompletion[]
  securityLogs        SecurityLog[]
  createdAnnouncements Announcement[]
  createdTemplates    LessonTemplate[]
  createdResources    Resource[]             @relation("UploaderToResource")
  sharedResources     Resource[]             @relation("SharedWithUser")
  AnswerAttempt       AnswerAttempt[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]        @relation("EventCreator")
  attendingEvents     CalendarEvent[]        @relation("EventAttendees")

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String
  instructor      User           @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String                 @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  notes           UserNote[]
  lessonCompletions LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?         @db.Text
  contentBlockId String          @unique
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?         @db.Text
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}

// -----------------------------------------------------
// MODELOS DE PROGRESO Y SEGUIMIENTO
// -----------------------------------------------------

model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String      @id @default(cuid())
  progressId  String
  lessonId    String
  type        String      // 'view' or 'quiz'
  score       Float?
  completedAt DateTime    @default(now())
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime      @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  User             User?        @relation(fields: [userId], references: [id])
  userId           String?
  
  @@index([attemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// -----------------------------------------------------
// MODELOS DE COMUNICACIÓN Y EVENTOS
// -----------------------------------------------------

model CalendarEvent {
  id                  String    @id @default(cuid())
  title               String
  description         String?   @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean   @default(false)
  color               String    @default("blue")
  audienceType        String    // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees           User[]    @relation("EventAttendees")
  attachments         Json?
  videoConferenceLink String?
  creatorId           String
  creator             User      @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime
  priority  String    @default("Normal")
  audience  Json      // Puede ser 'ALL' o un array de roles ['STUDENT', 'INSTRUCTOR']
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// -----------------------------------------------------
// MODELOS DE RECURSOS Y PLANTILLAS
// -----------------------------------------------------

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  parentId     String?
  pin          String?
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation(name: "SharedWithUser")
  uploader     User?        @relation("UploaderToResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  details      String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?

  @@index([userId])
}

model LessonTemplate {
  id               String          @id @default(cuid())
  name             String
  description      String?
  type             TemplateType    @default(USER) // SYSTEM or USER
  creatorId        String?
  creator          User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks   TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

// -----------------------------------------------------
// MODELO DE CONFIGURACIÓN
// -----------------------------------------------------

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  emailWhitelist             String?
  resourceCategories         String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  updatedAt                  DateTime  @updatedAt
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
}
