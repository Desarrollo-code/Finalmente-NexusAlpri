// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- USER & AUTH MODELS ---
model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  registeredDate        DateTime?     @default(now())
  theme                 String?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  xp                    Int?          @default(0)

  // Relations
  enrollments           Enrollment[]
  createdCourses        Course[]      @relation("CourseCreator")
  progress              CourseProgress[]
  notes                 UserNote[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[] @relation("EventCreator")
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  createdResources      EnterpriseResource[]
  sharedResources       EnterpriseResource[] @relation("ResourceSharedWith")
  notifications         Notification[]
  securityLogs          SecurityLog[]
  quizAttempts          QuizAttempt[]
  createdLessonTemplates LessonTemplate[]

  createdForms          Form[]        @relation("FormCreator")
  formResponses         FormResponse[]
  
  achievements          UserAchievement[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE MODELS ---
model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?       @db.Text
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  instructorId    String?
  instructor      User?         @relation("CourseCreator", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  moduleId       String
  module         Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  notes          UserNote[]

  @@index([moduleId])
}


model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    // Relations
    lessonId  String
    lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?

    @@index([lessonId])
}

enum LessonType {
    TEXT
    VIDEO
    QUIZ
    FILE
}


// --- QUIZ MODELS ---
model Quiz {
    id           String      @id @default(cuid())
    title        String
    description  String?
    
    // Relations
    contentBlockId String     @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions      Question[]
    attempts       QuizAttempt[]
}

model Question {
    id         String      @id @default(cuid())
    text       String      @db.Text
    type       QuestionType
    order      Int
    
    // Relations
    quizId     String
    quiz       Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options    AnswerOption[]
    attempts   AnswerAttempt[]

    @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
    id        String      @id @default(cuid())
    text      String
    isCorrect Boolean     @default(false)
    feedback  String?
    
    // Relations
    questionId String
    question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
    attempts   AnswerAttempt[]

    @@index([questionId])
}

// Model to track each time a user attempts a quiz
model QuizAttempt {
    id          String        @id @default(cuid())
    userId      String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId      String
    quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    score       Float         // Score from 0 to 100
    submittedAt DateTime      @default(now())
    answers     AnswerAttempt[]

    @@index([userId, quizId])
}

// Model to track each answer within a specific quiz attempt
model AnswerAttempt {
    id               String      @id @default(cuid())
    quizAttemptId    String
    quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([quizAttemptId])
}


// --- PROGRESS & ENROLLMENT MODELS ---
model Enrollment {
  id          String    @id @default(cuid())
  enrolledAt  DateTime  @default(now())

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
    id                String     @id @default(cuid())
    userId            String
    user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId          String
    course            Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    enrollmentId      String     @unique
    enrollment        Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    progressPercentage Float?    @default(0)
    
    // Relations
    completedLessons  LessonCompletionRecord[]

    @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    type        String   // 'view' or 'quiz'
    score       Float?   // Score if type is 'quiz'
    completedAt DateTime @default(now())
    
    // Relations
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}


// --- PLATFORM CONTENT MODELS ---
model EnterpriseResource {
    id          String       @id @default(cuid())
    title       String
    description String?      @db.Text
    type        ResourceType
    category    String
    tags        String?
    url         String?      @db.Text
    uploadDate  DateTime     @default(now())
    pin         String?      // Hashed PIN for secure access
    ispublic    Boolean      @default(true)
    
    // Relations for folder structure
    parentId    String?
    parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
    children    EnterpriseResource[] @relation("FolderHierarchy")

    // Relations for ownership and sharing
    uploaderId  String?
    uploader    User?                @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
    sharedWith  User[]               @relation("ResourceSharedWith")

    @@index([parentId])
    @@index([uploaderId])
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

model Announcement {
  id          String        @id @default(cuid())
  title       String
  content     String        @db.Text
  date        DateTime
  priority    String        @default("Normal")
  audience    Json          // Can store an array of roles or "ALL"
  
  // Relations
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}


model Notification {
    id          String   @id @default(cuid())
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())
    
    // Relations
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
}

model CalendarEvent {
    id                  String             @id @default(cuid())
    title               String
    description         String?            @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean            @default(false)
    color               String             @default("blue")
    videoConferenceLink String?
    attachments         Json?              // Store array of {name, url}
    
    audienceType        EventAudienceType
    
    // Relations
    creatorId           String
    creator             User               @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]             @relation("EventAttendees")
    
    @@index([creatorId])
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}


// --- FORM MODELS ---

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creatorId   String
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[] // Users who can view results
  
  @@index([creatorId])
}

model FormField {
  id          String      @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?       // For SELECT, RADIO, CHECKBOX types
  isRequired  Boolean     @default(true)
  order       Int
  
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
  
  @@index([formId])
}

enum FormFieldType {
  TEXT
  TEXTAREA
  SELECT
  RADIO
  CHECKBOX
  DATE
  NUMBER
}

model FormResponse {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now())
  
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  answers     FormAnswer[]
  
  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id          String   @id @default(cuid())
  value       Json
  
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId     String
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
  @@index([fieldId])
}


// --- TEMPLATE MODELS ---
model LessonTemplate {
    id              String          @id @default(cuid())
    name            String
    description     String?
    type            TemplateType    @default(USER) // SYSTEM or USER
    
    // Relations
    creatorId       String?         // Null for SYSTEM templates
    creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    templateBlocks  TemplateBlock[]

    @@index([creatorId])
}

enum TemplateType {
    SYSTEM
    USER
}

model TemplateBlock {
    id              String      @id @default(cuid())
    type            LessonType
    order           Int
    
    // Relations
    templateId      String
    template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

    @@index([templateId])
}


// --- GAMIFICATION MODELS ---
model Achievement {
  id          String @id @default(cuid())
  slug        String @unique // e.g., "first-enrollment"
  name        String
  description String
  icon        String?
  points      Int    @default(50)
  
  users       UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@id([userId, achievementId])
}


// --- PLATFORM & SECURITY MODELS ---
model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?

  // Appearance
  primaryColor               String?   @default("#6366f1") // indigo-500
  secondaryColor             String?   @default("#a5b4fc") // indigo-300
  accentColor                String?   @default("#ec4899") // pink-500
  backgroundColorLight       String?   @default("#f8fafc") // slate-50
  primaryColorDark           String?   @default("#a5b4fc") // indigo-300
  backgroundColorDark        String?   @default("#020617") // slate-950
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  
  // General
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  
  // Security
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  updatedAt                  DateTime @updatedAt
}


model SecurityLog {
    id              String              @id @default(cuid())
    event           SecurityLogEvent
    ipAddress       String?
    userAgent       String?             @db.Text
    details         String?
    createdAt       DateTime            @default(now())
    
    // Contextual Info
    country         String?
    city            String?
    emailAttempt    String?             // For failed logins where user might not exist

    // Relations
    userId          String?
    user            User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([event])
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}
