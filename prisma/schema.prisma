// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// ==================================
//        MODELOS DE USUARIO
// ==================================

model User {
  id                    String           @id @default(cuid())
  name                  String
  email                 String           @unique
  password              String
  avatar                String?
  role                  UserRole         @default(STUDENT)
  isTwoFactorEnabled    Boolean          @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?        @default(now())
  theme                 String?          @default("dark")

  courses               Course[]
  enrollments           Enrollment[]
  notifications         Notification[]
  securityLogs          SecurityLog[]
  resources             Resource[]       @relation("UploadedResources")
  createdEvents         CalendarEvent[]  @relation("CreatedEvents")
  attendedEvents        CalendarEvent[]  @relation("AttendedEvents")
  createdTemplates      LessonTemplate[]
  courseProgress        CourseProgress[]
  sharedResources       Resource[]       @relation("SharedResources")
  authoredAnnouncements Announcement[] // Campo de relación añadido para completar la relación con Announcement

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// ==================================
//        MODELOS DE CURSO
// ==================================

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]
  
  @@index([courseId])
}

model Lesson {
  id              String                 @id @default(cuid())
  title           String
  order           Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  moduleId        String
  module          Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id         String       @id @default(cuid())
  type       LessonType
  content    String?      @db.Text
  order      Int
  
  lessonId   String
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz       Quiz?
  
  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options AnswerOption[]
  
  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
}


// ==================================
//       MODELOS DE PROGRESO
// ==================================

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress   CourseProgress? // Relación uno a uno

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                 @id @default(cuid())
  progressPercentage Float                  @default(0)
  completedAt        DateTime?
  
  // Foreign keys
  userId             String
  courseId           String
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Relación con Enrollment (Correcta)
  enrollmentId       String                 @unique
  enrollment         Enrollment             @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons   LessonCompletionRecord[]
  
  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  type        String         // "view" or "quiz"
  score       Float?         // Only for quizzes
  completedAt DateTime       @default(now())

  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


// ==================================
//        MODELOS DE CONTENIDO
// ==================================

model Resource {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  type        ResourceType
  category    String
  tags        String?
  url         String?
  pin         String?
  uploadDate  DateTime       @default(now())
  
  ispublic    Boolean        @default(true)
  
  // Relación con los usuarios con los que se ha compartido el recurso
  sharedWith  User[]         @relation("SharedResources")

  parentId    String?
  parent      Resource?      @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children    Resource[]     @relation("FolderHierarchy")
  
  // Relación con el usuario que subió el recurso
  uploaderId  String
  uploader    User           @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([parentId])
  @@index([uploaderId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal")
  
  audience  Json     // 'ALL', ['STUDENT'], ['INSTRUCTOR']
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model CalendarEvent {
  id                  String              @id @default(cuid())
  title               String
  description         String?             @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean             @default(false)
  
  audienceType        EventAudienceType   @default(ALL)
  attendees           User[]              @relation("AttendedEvents")
  
  color               String              @default("blue")
  videoConferenceLink String?
  attachments         Json?

  creatorId           String
  creator             User                @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// ==================================
//        MODELOS DE SISTEMA
// ==================================

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  
  // Password Policy
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(false)

  // Session Management
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)

  // Security
  require2faForAdmins       Boolean  @default(false)

  // Content Management
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  
  updatedAt                 DateTime @updatedAt
}


model SecurityLog {
  id            String             @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String
  details       String?
  createdAt     DateTime           @default(now())
  
  userId        String?
  user          User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt  String?            // For failed attempts on non-existent users

  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


model LessonTemplate {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        TemplateType   @default(USER)
  createdAt   DateTime       @default(now())

  creatorId   String?
  creator     User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

enum TemplateType {
  SYSTEM
  USER
}