// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  password                String?
  avatar                  String?
  role                    UserRole                 @default(STUDENT)
  isActive                Boolean                  @default(true)
  xp                      Int                      @default(0)
  registeredDate          DateTime                 @default(now())
  lastLogin               DateTime?
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorSecret         String?
  createdCourses          Course[]                 @relation("InstructorCourses")
  enrollments             Enrollment[]
  notifications           Notification[]
  resourcesUploaded       Resource[]               @relation("UploadedResources")
  resourcesSharedWith     Resource[]               @relation("SharedResources")
  eventsCreated           CalendarEvent[]
  eventsAttending         CalendarEvent[]          @relation("EventAttendees")
  courseProgress          CourseProgress[]         @relation("UserProgress")
  userNotes               UserNote[]
  securityLogs            SecurityLog[]
  announcements           Announcement[]
  formsCreated            Form[]                   @relation("FormCreator")
  formsSharedWith         Form[]                   @relation("FormSharedWith")
  formResponses           FormResponse[]
  quizAttempts            QuizAttempt[]
  lessonTemplatesCreated  LessonTemplate[]         @relation("UserCreatedTemplates")
  achievements            UserAchievement[]
  
  @@index([email])
}

model Course {
  id              String           @id @default(cuid())
  title           String           @db.VarChar(255)
  description     String           @db.Text
  imageUrl        String?
  category        String?
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id])
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
  @@index([status])
}

model Module {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String                 @id @default(cuid())
  title           String                 @db.VarChar(255)
  order           Int
  moduleId        String
  module          Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completions     LessonCompletionRecord[]
  userNotes       UserNote[]
  templateId      String?
  template        LessonTemplate?        @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  maxAttempts    Int?          // null for unlimited
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String         @db.Text
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[] @relation("QuestionAnswers")
  
  @@index([quizId])
}

model AnswerOption {
  id               String          @id @default(cuid())
  text             String
  isCorrect        Boolean         @default(false)
  feedback         String?         @db.Text
  questionId       String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts   AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                String                   @id @default(cuid())
  userId            String
  courseId          String
  progressPercentage Float                   @default(0)
  completedAt       DateTime?
  lastActivity      DateTime?                @updatedAt
  user              User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course            Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId      String?                  @unique
  enrollment        Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  lessonId     String
  type         String         // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime       @default(now())
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String          @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String
  attempt           QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question        @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption    @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  field             FormField?      @relation("FieldAnswers", fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId           String?
  response          FormResponse?   @relation("ResponseAnswers", fields: [responseId], references: [id], onDelete: Cascade)
  responseId        String?

  @@index([attemptId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  url          String?
  tags         String?    // Comma-separated
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  ispublic     Boolean    @default(true)
  pin          String?
  sharedWith   User[]     @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Notification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  link         String?
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String            @default("blue")
  videoConferenceLink String?
  attachments         Json?             // [{ name: string, url: string }]
  creatorId           String
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}


model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  userId       String?
  emailAttempt String?
  city         String?
  country      String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
}


model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id           String          @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean         @default(false)
  placeholder  String?
  options      Json?           // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order        Int
  formId       String
  form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      AnswerAttempt[] @relation("FieldAnswers")

  @@index([formId])
}

model FormResponse {
  id           String          @id @default(cuid())
  formId       String
  form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime        @default(now())
  score        Float?          // Score if the form is a quiz
  answers      AnswerAttempt[] @relation("ResponseAnswers")
  
  @@index([formId])
  @@index([userId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  color       String   @default("yellow")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation("UserCreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessonsUsedIn  Lesson[] // Back-relation added here
  createdAt      DateTime        @default(now())
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications Boolean  @default(true)
  emailWhitelist             String?  // Comma-separated domains
  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  
  // Theme settings
  primaryColor        String? @default("#673AB7")
  secondaryColor      String? @default("#303030")
  accentColor         String? @default("#6F42C1")
  backgroundColorLight String? @default("#FFFFFF")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  primaryColorDark    String? @default("#9575CD")
  backgroundColorDark String? @default("#121212")

  // Image assets
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  updatedAt           DateTime @updatedAt
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String            // Name of the lucide-react icon
  points       Int
  users        UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}
