datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- USER & AUTHENTICATION ---
model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?   @db.Text
  role                  UserRole  @default(STUDENT)
  registeredDate        DateTime? @default(now())
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?   @db.Text
  theme                 String?
  xp                    Int?      @default(0)

  createdCourses        Course[]             @relation("CreatedBy")
  enrollments           Enrollment[]
  notifications         Notification[]
  progress              CourseProgress[]
  securityLogs          SecurityLog[]        @relation("UserEvents")
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[]      @relation("CreatedBy")
  attendedEvents        CalendarEvent[]      @relation("Attendees")
  uploadedResources     EnterpriseResource[]
  userNotes             UserNote[]
  createdTemplates      LessonTemplate[]
  achievements          UserAchievement[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE STRUCTURE ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?        @db.Text
  status          CourseStatus   @default(DRAFT)
  category        String?
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String?
  instructor      User?          @relation("CreatedBy", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- QUIZZES ---
model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id          String         @id @default(cuid())
  text        String         @db.Text
  type        QuestionType
  order       Int
  quizId      String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id            String   @id @default(cuid())
  text          String   @db.Text
  isCorrect     Boolean
  feedback      String?  @db.Text
  questionId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

// --- USER PROGRESS & ENROLLMENTS ---
model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float? // Only for quizzes
  completedAt DateTime       @default(now())
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime        @default(now())
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


// --- GLOBAL CONTENT & COMMUNICATION ---
model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json // 'ALL', or an array of roles: ['STUDENT', 'INSTRUCTOR']
  priority  String?   @default("Normal") // e.g., 'Normal', 'Urgente'
}

model CalendarEvent {
  id                  String     @id @default(cuid())
  title               String
  description         String?    @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  audienceType        String     // e.g., 'ALL', 'ADMINISTRATOR', 'SPECIFIC'
  color               String     @default("blue")
  videoConferenceLink String?
  attachments         Json?      // Store array of {name, url}
  creatorId           String
  creator             User       @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]     @relation("Attendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- RESOURCE LIBRARY ---
model EnterpriseResource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         String   // e.g., 'FOLDER', 'DOCUMENT', 'VIDEO'
  url          String?  @db.Text
  category     String
  tags         String?  // Comma-separated
  uploadDate   DateTime @default(now())
  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       EnterpriseResource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction)
  children     EnterpriseResource[] @relation("FolderChildren")
  pin          String?  // Hashed PIN
  ispublic     Boolean  @default(true)
  sharedWith   User[]

  @@index([parentId])
}


// --- SYSTEM & SECURITY ---
model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Comma-separated domains
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String?   @db.Text // Comma-separated list
  updatedAt                   DateTime  @updatedAt
  // New Theme fields
  primaryColor                String?
  secondaryColor              String?
  accentColor                 String?
  backgroundColorLight        String?
  primaryColorDark            String?
  backgroundColorDark         String?
  fontHeadline                String?
  fontBody                    String?
  logoUrl                     String?   @db.Text
  watermarkUrl                String?   @db.Text
  landingImageUrl             String?   @db.Text
  authImageUrl                String?   @db.Text
  aboutImageUrl               String?   @db.Text
  benefitsImageUrl            String?   @db.Text
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation("UserEvents", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- TEMPLATES ---
model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?        @db.Text
  type           TemplateType   @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       String   // e.g., TEXT, VIDEO, QUIZ
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}


// --- GAMIFICATION ---
model Achievement {
  id               String            @id @default(cuid())
  slug             String            @unique // e.g., 'first-enrollment'
  name             String
  description      String
  icon             String?
  points           Int               @default(0)
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}
