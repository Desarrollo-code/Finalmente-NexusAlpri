// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- 1. ENUMERATIONS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
  CHECKBOX
  RATING
  DATE
}

// --- 2. CORE MODELS ---

model User {
  id                  String  @id @default(cuid())
  name                String
  email               String  @unique
  password            String
  avatar              String? @db.VarChar(1024)
  role                UserRole
  registeredDate      DateTime @default(now())
  lastLogin           DateTime?
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorSecret     String?
  theme               String? @db.VarChar(50)
  xp                  Int? @default(0)
  isActive            Boolean @default(true) // New field for soft delete

  // Relationships
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  createdEvents       CalendarEvent[] @relation("CreatedEvents")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  createdResources    Resource[]      @relation("UploadedResources")
  sharedResources     Resource[]      @relation("SharedResources")
  notifications       Notification[]
  notes               UserNote[]
  achievements        UserAchievement[]
  createdForms        Form[]          @relation("CreatedForms")
  formResponses       FormResponse[]
  createdAnnouncements Announcement[] @relation("CreatedAnnouncements") // BACK-RELATION
  sharedForms          Form[] @relation("SharedForms") // BACK-RELATION
}

model Course {
  id              String  @id @default(cuid())
  title           String  @db.VarChar(255)
  description     String? @db.Text
  imageUrl        String? @db.VarChar(1024)
  category        String? @db.VarChar(100)
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publicationDate DateTime?

  // Relationships
  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] // BACK-RELATION
}

model Module {
  id       String  @id @default(cuid())
  title    String  @db.VarChar(255)
  order    Int

  // Relationships
  courseId String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id        String  @id @default(cuid())
  title     String  @db.VarChar(255)
  order     Int

  // Relationships
  moduleId String
  module    Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes         UserNote[]
}

model ContentBlock {
  id      String    @id @default(cuid())
  type    LessonType
  content String?   @db.Text
  order   Int

  // Relationships
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

// --- 3. QUIZ & PROGRESS MODELS ---

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String? @db.Text
  maxAttempts  Int?

  // Relationships
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id     String  @id @default(cuid())
  text   String  @db.Text
  order  Int

  // Relationships
  quizId String
  quiz   Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id        String  @id @default(cuid())
  text      String  @db.Text
  isCorrect Boolean @default(false)
  feedback  String? @db.Text
  points    Int     @default(0) // For quiz scoring

  // Relationships
  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String  @id @default(cuid())
  progressPercentage Float?  @default(0)
  lastActivity       DateTime? @updatedAt
  completedAt        DateTime? // This field was moved here

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // BACK-RELATION
  
  enrollmentId String     @unique
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
}


model LessonCompletionRecord {
  id          String   @id @default(cuid())
  type        String   // "view" or "quiz"
  completedAt DateTime @default(now())
  score       Float?   // Only for quizzes

  // Relationships
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id           String   @id @default(cuid())
  attemptNumber Int
  score        Float
  submittedAt  DateTime @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers AnswerAttempt[]
}

model AnswerAttempt {
  id String @id @default(cuid())
  
  // Relationships
  attemptId String
  attempt   QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- 4. PLATFORM-WIDE MODELS ---

model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String   @db.Text
  date     DateTime @default(now())
  priority String   @default("Normal") // Normal, Urgente
  audience Json

  // Relationships
  authorId String
  author   User     @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade) // NAME ADDED
}

model CalendarEvent {
  id                 String            @id @default(cuid())
  title              String
  description        String?           @db.Text
  location           String?
  start              DateTime
  end                DateTime
  allDay             Boolean           @default(false)
  audienceType       EventAudienceType @default(ALL)
  color              String            @default("blue")
  videoConferenceLink String?
  attachments        Json?

  // Relationships
  creatorId String
  creator   User   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String?
  tags        String?
  url         String?      @db.VarChar(1024)
  uploadDate  DateTime     @default(now())
  ispublic    Boolean      @default(true)
  pin         String?      // Hashed PIN
  
  // Relationships
  uploaderId String?
  uploader   User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete:SetNull)
  parentId   String?
  parent     Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children   Resource[]   @relation("FolderHierarchy")
  sharedWith User[]       @relation("SharedResources")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  emailAttempt String?
  country      String?
  city         String?

  // Relationships
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?   @db.Text
  type           String    // SYSTEM or USER
  
  // Relationships
  creatorId      String?
  creator        User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String  @id @default(cuid())
  type       LessonType
  order      Int

  // Relationships
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId String
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- 5. GAMIFICATION MODELS ---
model Achievement {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  description  String
  icon         String?
  points       Int
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  earnedAt      DateTime @default(now())

  // Relationships
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

// --- 6. FORMS & SURVEYS MODELS ---
model Form {
    id              String    @id @default(cuid())
    title           String
    description     String?   @db.Text
    status          FormStatus @default(DRAFT)
    isQuiz          Boolean   @default(false)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Relationships
    creatorId       String
    creator         User          @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("SharedForms")
}

model FormField {
    id              String    @id @default(cuid())
    label           String
    type            FormFieldType
    required        Boolean   @default(false)
    placeholder     String?
    options         Json?     // [{id, text, isCorrect, points}, ...]
    order           Int

    // Relationships
    formId          String
    form            Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers         FormAnswer[]
}

model FormResponse {
    id              String   @id @default(cuid())
    submittedAt     DateTime @default(now())
    score           Float?   // Only for quizzes

    // Relationships
    formId          String
    form            Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers         FormAnswer[]
}

model FormAnswer {
    id              String @id @default(cuid())
    value           String @db.Text

    // Relationships
    responseId      String
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId         String
    field           FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}


// --- GLOBAL SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?   @db.VarChar(1024)
  watermarkUrl              String?   @db.VarChar(1024)
  landingImageUrl           String?   @db.VarChar(1024)
  authImageUrl              String?   @db.VarChar(1024)
  aboutImageUrl             String?   @db.VarChar(1024)
  benefitsImageUrl          String?   @db.VarChar(1024)

  primaryColor              String    @default("#6366f1")
  secondaryColor            String    @default("#a5b4fc")
  accentColor               String    @default("#ec4899")
  backgroundColorLight      String    @default("#f8fafc")
  primaryColorDark          String    @default("#a5b4fc")
  backgroundColorDark       String    @default("#020617")

  fontHeadline              String    @default("Space Grotesk")
  fontBody                  String    @default("Inter")

  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text

  resourceCategories        String    @db.Text
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  // Session Management
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)

  // 2FA
  require2faForAdmins       Boolean   @default(false)

  updatedAt                 DateTime  @updatedAt
}
