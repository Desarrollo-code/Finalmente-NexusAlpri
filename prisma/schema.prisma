
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                  String        @id @default(cuid())
  name                String
  email               String        @unique
  password            String
  avatar              String?
  role                UserRole      @default(STUDENT)
  isTwoFactorEnabled  Boolean       @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime      @default(now())
  
  // Relations
  enrollments         Enrollment[]
  coursesAsInstructor Course[]
  notifications       Notification[]
  resources           Resource[]
  announcements       Announcement[] @relation("UserAnnouncements")
  calendarEvents      CalendarEvent[]
  courseProgress      CourseProgress[]
  lessonTemplates     LessonTemplate[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE MODELS ---
model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  instructorId    String
  instructor      User          @relation(fields: [instructorId], references: [id])
  
  // Relations
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Relations
  lessons     Lesson[]
  
  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  
  moduleId    String
  module      Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // Relations
  contentBlocks ContentBlock[]
  
  @@index([moduleId])
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  order       Int
  
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  // Relations
  quiz        Quiz?
  
  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- QUIZ MODELS ---
model Quiz {
  id              String  @id @default(cuid())
  title           String
  description     String? @db.Text
  
  contentBlockId  String @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  // Relations
  questions       Question[]
}

model Question {
  id          String       @id @default(cuid())
  text        String       @db.Text
  type        QuestionType
  order       Int
  
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  // Relations
  options     AnswerOption[]
  
  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String? @db.Text
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
}

// --- PROGRESS & ENROLLMENT ---
model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Relations
  progress    CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
    id                  String      @id @default(cuid())
    userId              String
    courseId            String
    enrollmentId        String      @unique
    completedLessonIds  Json        @default("[]")
    progressPercentage  Float       @default(0)
    updatedAt           DateTime    @updatedAt
    
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    course              Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
    enrollment          Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

    @@index([userId, courseId])
}

// --- GLOBAL CONTENT & CONFIG ---
model Resource {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    type        ResourceType
    category    String
    tags        Json     @default("[]")
    url         String?  @db.Text
    pin         String?
    uploadDate  DateTime @default(now())
    
    uploaderId  String?
    uploader    User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

    parentId    String?
    parent      Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
    children    Resource[] @relation("FolderHierarchy")

    @@index([parentId])
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    OTHER
}

model Announcement {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  date      DateTime
  audience  Json
  priority  String?
  
  authorId  String
  author    User        @relation("UserAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String?
  attachments         Json?
  
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees           User[]
  
  @@index([creatorId])
}

model PlatformSettings {
  id                         Int      @id @default(1)
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  resourceCategories         Json     @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")

  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  updatedAt                  DateTime @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        String
    ipAddress    String
    userId       String?
    emailAttempt String?
    details      String?  @db.Text
    createdAt    DateTime @default(now())

    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([createdAt])
}

model LessonTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  type            TemplateType
  
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id              String      @id @default(cuid())
  type            LessonType
  order           Int

  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
    SYSTEM
    USER
}
