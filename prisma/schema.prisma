// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum InteractionType {
  view
  quiz
  video
}

enum NotificationType {
  SYSTEM
  ANNOUNCEMENT
  COURSE_UPDATE
  ACHIEVEMENT
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---
model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isActive              Boolean                  @default(true)
  registeredDate        DateTime                 @default(now())
  lastLogin             DateTime?
  theme                 String?
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  xp                    Int?                     @default(0)
  // Relations
  coursesCreated        Course[]                 @relation("CourseInstructor")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  userNotes             UserNote[]
  announcements         Announcement[]           @relation("Author")
  notifications         Notification[]
  resourcesUploaded     Resource[]               @relation("ResourceUploader")
  achievements          UserAchievement[]
  calendarEventsCreated CalendarEvent[]          @relation("EventCreator")
  calendarEvents        CalendarEvent[]          @relation("EventAttendees")
  formsCreated          Form[]                   @relation("FormCreator")
  formResponses         FormResponse[]
  sharedForms           Form[]                   @relation("FormSharedWith")
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  securityLogs          SecurityLog[]
  templatesCreated      LessonTemplate[]         @relation("TemplateCreator")
}

model Course {
  id               String         @id @default(cuid())
  title            String
  description      String         @db.Text
  imageUrl         String?
  category         String?
  status           CourseStatus   @default(DRAFT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  publicationDate  DateTime?
  // Relations
  instructorId     String?
  instructor       User?          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  modules          Module[]
  enrollments      Enrollment[]
  courseProgresses CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  // Relations
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  // Relations
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  // Relations
  contentBlockId String        @unique
  contentBlock ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id          String         @id @default(cuid())
  text        String         @db.Text
  order       Int
  // Relations
  quizId      String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]
}

model AnswerOption {
  id           String         @id @default(cuid())
  text         String
  isCorrect    Boolean
  feedback     String?        @db.Text
  // Relations
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id           String          @id @default(cuid())
  userId       String
  quizId       String
  attemptNumber Int
  score        Float
  submittedAt  DateTime        @default(now())
  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      AnswerAttempt[]
}

model AnswerAttempt {
  id               String        @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  // Relations
  attempt          QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?
  @@unique([userId, courseId])
}

model CourseProgress {
  id                   String                   @id @default(cuid())
  userId               String
  courseId             String
  progressPercentage   Int?                     @default(0)
  completedAt          DateTime?
  // Relations
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId         String?                  @unique
  enrollment           Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
  completedLessons     LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  lessonId     String
  type         InteractionType @default(view)
  completedAt  DateTime        @default(now())
  score        Float?
  // Relations
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([userId, lessonId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  pin          String?
  ispublic     Boolean    @default(true)
  // Relations
  uploaderId   String?
  uploader     User?      @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderChildren")
  sharedWith   User[]     @relation("ResourceSharedWith")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  audience   Json     @default("\"ALL\"")
  priority   String   @default("Normal")
  // Relations
  authorId   String
  author     User     @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  color               String?           @default("blue")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?
  // Relations
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String?
  primaryColor                String?
  secondaryColor              String?
  accentColor                 String?
  backgroundColorLight        String?
  primaryColorDark            String?
  backgroundColorDark         String?
  fontHeadline                String?
  fontBody                    String?
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime          @default(now())
  // Relations
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  // Relations
  users             UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           String           @default("USER") // USER or SYSTEM
  creatorId      String?
  // Relations
  creator        User?            @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  // Relations
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // Relations
  creatorId    String
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("FormSharedWith")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox
  order       Int
  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now())
  score       Float? // Percentage score if it's a quiz
  // Relations
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model Answer {
  id      String @id @default(cuid())
  value   String @db.Text
  // Relations
  fieldId String
  field   FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  responseId String
  response FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}
