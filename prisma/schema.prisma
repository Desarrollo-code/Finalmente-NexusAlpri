// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------
// ---         MODELS               ---
// ------------------------------------

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  avatar                String?
  role                  UserRole
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime               @default(now())
  theme                 String?
  createdCourses        Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  quizAttempts          QuizAttempt[]
  createdAnnouncements  Announcement[]
  notifications         Notification[]
  createdEvents         CalendarEvent[]        @relation("EventCreator")
  attendingEvents       CalendarEvent[]        @relation("EventAttendees")
  securityLogs          SecurityLog[]
  uploadedResources     Resource[]             @relation("UploadedResources")
  sharedResources       Resource[]             @relation("SharedResources")
  createdTemplates      LessonTemplate[]
  userNotes             UserNote[]
  courseProgress        CourseProgress[]

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?        @db.Text
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String                @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  notes          UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      String
  content   String?     @db.Text
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  contentBlockId  String         @unique
  contentBlock    ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id       String         @id @default(cuid())
  text     String         @db.Text
  type     String         // e.g., 'MULTIPLE_CHOICE'
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id       String          @id @default(cuid())
  text     String          @db.Text
  isCorrect Boolean
  feedback String?         @db.Text
  questionId String
  question Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}


model Enrollment {
  id           String        @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float                    @default(0)
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String  @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // 'view' or 'quiz'
    score       Float? // Only for quizzes

    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime      @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@index([questionId])
}


model Resource {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  type          String      // e.g., 'DOCUMENT', 'VIDEO', 'FOLDER'
  category      String
  tags          String[]
  url           String?     @db.Text
  uploadDate    DateTime    @default(now())
  uploaderId    String?
  uploader      User?       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  pin           String?     // Hashed PIN
  ispublic      Boolean     @default(true)
  parentId      String?     
  parent        Resource?   @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]  @relation("FolderChildren")
  sharedWith    User[]      @relation("SharedResources")
  versions      ResourceVersion[]

  @@index([uploaderId])
  @@index([parentId])
}

model ResourceVersion {
  id          String   @id @default(cuid())
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  url         String   @db.Text
  version     Int
  createdAt   DateTime @default(now())

  @@index([resourceId])
}

model Announcement {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  date      DateTime    @default(now())
  authorId  String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json        // Storing as JSON to support 'ALL' or ['STUDENT', 'INSTRUCTOR']
  priority  String?     @default("Normal") // e.g., 'Normal', 'Urgente'

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  color               String
  audienceType        String   // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees           User[]   @relation("EventAttendees")
  attachments         Json?
  videoConferenceLink String?
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([creatorId])
}


model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Comma-separated list of domains
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String    @db.Text // Comma-separated list
  updatedAt                   DateTime  @updatedAt
  primaryColor                String    @default("#6366f1") // indigo-500
  secondaryColor              String    @default("#a5b4fc") // indigo-300
  accentColor                 String    @default("#ec4899") // pink-500
  backgroundColorLight        String    @default("#f8fafc") // slate-50
  primaryColorDark            String    @default("#a5b4fc") // indigo-300
  backgroundColorDark         String    @default("#020617") // slate-950
  fontHeadline                String    @default("Space Grotesk")
  fontBody                    String    @default("Inter")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
}

model SecurityLog {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        String
  ipAddress    String?
  details      String?  @db.Text
  createdAt    DateTime @default(now())
  emailAttempt String? // For failed logins where user might not exist

  @@index([userId])
}

model LessonTemplate {
  id               String          @id @default(cuid())
  name             String
  description      String?         @db.Text
  type             String          // 'SYSTEM' or 'USER'
  creatorId        String?
  creator          User?           @relation(fields: [creatorId], references: [id])
  templateBlocks   TemplateBlock[]
  createdAt        DateTime        @default(now())

  @@index([creatorId])
}

model TemplateBlock {
  id          String         @id @default(cuid())
  type        String         // 'TEXT', 'VIDEO', 'QUIZ', etc.
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// ------------------------------------
// ---         ENUMS                ---
// ------------------------------------

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}
