// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime                 @default(now())
  theme                 String?
  xp                    Int?                     @default(0)

  // Relations
  enrollments             Enrollment[]
  createdCourses          Course[]
  announcements           Announcement[]
  uploadedResources       EnterpriseResource[]     @relation("UploadedResources")
  sharedResources         EnterpriseResource[]     @relation("SharedResources")
  createdEvents           CalendarEvent[]          @relation("CreatedEvents")
  attendedEvents          CalendarEvent[]          @relation("AttendedEvents")
  notifications           Notification[]
  courseProgress          CourseProgress[]
  quizAttempts            QuizAttempt[]
  securityLogs            SecurityLog[]
  createdTemplates        LessonTemplate[]
  notes                   UserNote[]
  achievements            UserAchievement[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String         @default("General")
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?      // Date when the course is scheduled to be published
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  instructorId String?
  instructor   User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  moduleId    String
  module      Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions LessonCompletionRecord[]
  notes       UserNote[]
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    userId    String
    lessonId  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}


enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id        String         @id @default(cuid())
  text      String         @db.Text
  type      QuestionType
  order     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text

  // Relations
  questionId String
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}


model Enrollment {
  id         String         @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime       @default(now())

  // Relations
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0) // Overall course percentage
  completedLessons   LessonCompletionRecord[]

  // Relations
  enrollment        Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id         String      @id @default(cuid())
    progressId String
    lessonId   String
    type       String      // 'view' or 'quiz'
    score      Float?      // Only for quizzes

    // Relations
    progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float           // Score from 0 to 100
  attemptedAt DateTime      @default(now())

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
}

model AnswerAttempt {
    id                String       @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String

    // Relations
    quizAttempt       QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model EnterpriseResource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  category    String
  tags        String?
  uploadDate  DateTime     @default(now())
  pin         String?

  ispublic    Boolean      @default(true)

  // Relations for folder structure
  parentId String?
  parent   EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children EnterpriseResource[] @relation("FolderHierarchy")

  // Relations to User
  uploaderId   String?
  uploader     User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith   User[]   @relation("SharedResources")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  priority  String   @default("Normal") // e.g., 'Normal', 'Urgente'
  audience  Json     // 'ALL', or an array of roles ['STUDENT', 'INSTRUCTOR']

  // Relations
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

model CalendarEvent {
    id                  String            @id @default(cuid())
    title               String
    description         String?           @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean           @default(false)
    location            String?
    videoConferenceLink String?
    color               String            @default("blue")
    audienceType        EventAudienceType @default(ALL)
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    attachments         Json?             // To store [{name: string, url: string}]

    // Relations
    creatorId String
    creator   User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees User[]            @relation("AttendedEvents")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String    @default("#6366f1") // Indigo 500
  secondaryColor            String    @default("#a5b4fc") // Indigo 300
  accentColor               String    @default("#ec4899") // Pink 500
  backgroundColorLight      String    @default("#f8fafc") // Slate 50
  primaryColorDark          String    @default("#a5b4fc") // Indigo 300
  backgroundColorDark       String    @default("#020617") // Slate 950
  fontHeadline              String    @default("Space Grotesk")
  fontBody                  String    @default("Inter")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  resourceCategories        String    @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  updatedAt                 DateTime  @updatedAt
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  PASSWORD_RESET_REQUEST
  USER_ROLE_CHANGED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
}

model SecurityLog {
  id              String           @id @default(cuid())
  event           SecurityLogEvent
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt    String?
  ipAddress       String?
  userAgent       String?          @db.Text
  country         String?
  city            String?
  details         String?          @db.Text
  createdAt       DateTime         @default(now())
}

enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?         @db.Text
  type            TemplateType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id              String      @id @default(cuid())
  type            LessonType
  order           Int

  // Relations
  lessonTemplateId String
  lessonTemplate   LessonTemplate @relation(fields: [lessonTemplateId], references: [id], onDelete: Cascade)
}

// --- Gamification Models ---
model Achievement {
    id              String          @id @default(cuid())
    slug            String          @unique // e.g., 'first-course-completed'
    name            String
    description     String
    icon            String?
    points          Int             @default(0)
    
    // Relations
    users           UserAchievement[]
}

model UserAchievement {
    id              String      @id @default(cuid())
    userId          String
    achievementId   String
    earnedAt        DateTime    @default(now())

    // Relations
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}
