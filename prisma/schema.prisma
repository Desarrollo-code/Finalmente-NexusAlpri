// prisma/schema.prisma

// --- ENUMS & TYPES ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  password             String
  avatar               String?
  role                 UserRole               @default(STUDENT)
  isTwoFactorEnabled   Boolean                @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime               @default(now())
  isActive             Boolean                @default(true)
  xp                   Int                    @default(0)

  // Relations
  enrollments          Enrollment[]
  createdCourses       Course[]
  uploadedResources    Resource[]             @relation("UploadedResources")
  sharedResources      Resource[]             @relation("SharedResources")
  announcements        Announcement[]
  createdEvents        CalendarEvent[]        @relation("CreatedEvents")
  attendedEvents       CalendarEvent[]        @relation("EventAttendees")
  notifications        Notification[]
  notes                UserNote[]
  securityLogs         SecurityLog[]
  quizAttempts         QuizAttempt[]
  achievements         UserAchievement[]
  createdLessonTemplates LessonTemplate[]   @relation("CreatedTemplates")
  createdForms         Form[]                 @relation("CreatedForms")
  sharedForms          Form[]                 @relation("SharedForms")
  formResponses        FormResponse[]
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  instructor   User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module        Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  template      LessonTemplate?
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?
}

model Quiz {
  id           String   @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?     // null means unlimited
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String   @id @default(cuid())
  text      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  points     Int     @default(0)

  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id            String   @id @default(cuid())
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    // Relations
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId   String
    answers  AnswerAttempt[]

    @@unique([userId, quizId, attemptNumber])
}

model AnswerAttempt {
    id                String       @id @default(cuid())

    // Relations
    attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId         String
    question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId        String
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
}


model Enrollment {
  id          String   @id @default(cuid())
  enrolledAt  DateTime @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  progress  CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt

  // Relations
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  course            Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollment        Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId      String                   @unique
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String    @id @default(cuid())
  type         String    // 'view' or 'quiz'
  score        Float?
  completedAt  DateTime  @default(now())
  
  // Relations
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         String
  url          String?
  category     String?
  tags         String?     // Comma-separated
  uploadDate   DateTime    @default(now())
  pin          String?
  ispublic     Boolean     @default(true)

  // Relations
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?
  parent     Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId   String?
  children   Resource[] @relation("FolderChildren")
  sharedWith User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     @default("\"ALL\"")
  priority  String   @default("Normal") // Normal | Urgente

  // Relations
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?
}

model CalendarEvent {
  id                 String             @id @default(cuid())
  title              String
  description        String?            @db.Text
  start              DateTime
  end                DateTime
  allDay             Boolean
  location           String?
  audienceType       EventAudienceType
  color              String?
  videoConferenceLink String?
  attachments        Json?              @default("[]")

  // Relations
  creator              User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]     @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                       String    @id @default(cuid())
  platformName             String    @default("NexusAlpri")
  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   @db.Text // Comma-separated list
  
  // Password Policy
  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  // Session Policy
  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)

  // Security
  require2faForAdmins      Boolean   @default(false)
  
  // Customization
  resourceCategories       String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  primaryColor             String?
  secondaryColor           String?
  accentColor              String?
  backgroundColorLight     String?
  primaryColorDark         String?
  backgroundColorDark      String?
  logoUrl                  String?
  watermarkUrl             String?
  landingImageUrl          String?
  authImageUrl             String?
  aboutImageUrl            String?
  benefitsImageUrl         String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  type           TemplateType    @default(USER) // SYSTEM or USER
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  creator        User?            @relation("CreatedTemplates", fields: [creatorId], references: [id])
  creatorId      String?
  templateBlocks TemplateBlock[]
  sourceLesson   Lesson?          @relation(fields: [sourceLessonId], references: [id], onDelete: SetNull)
  sourceLessonId String?          @unique
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       String   // 'TEXT', 'VIDEO', 'QUIZ', etc.
  order      Int
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String

    @@unique([userId, lessonId])
}


// --- SECURITY & GAMIFICATION ---

model SecurityLog {
  id           String           @id @default(cuid())
  event        String           // e.g., 'SUCCESSFUL_LOGIN', 'FAILED_LOGIN_ATTEMPT'
  ipAddress    String?
  userAgent    String?          @db.Text
  city         String?
  country      String?
  details      String?          @db.Text
  emailAttempt String?          // For failed logins
  createdAt    DateTime         @default(now())

  // Relations
  user         User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
}

model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique // e.g., 'first-course-completed'
  name        String
  description String
  icon        String?  // Icon name from lucide-react
  points      Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  users UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  unlockedAt    DateTime  @default(now())
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
}


// --- FORM BUILDER MODELS ---

model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       FormStatus @default(DRAFT)
  isQuiz       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  creatorId    String
  creator      User       @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]     @relation("SharedForms")
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  placeholder  String?
  options      Json?         // For 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  order        Int
  
  // Relations
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      Answer[]
}

model FormResponse {
  id            String   @id @default(cuid())
  submittedAt   DateTime @default(now())
  score         Float?   // Score percentage if it's a quiz
  
  // Relations
  formId        String
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Answer {
  id            String     @id @default(cuid())
  value         String     @db.Text
  
  // Relations
  fieldId       String
  field         FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  responseId    String
  response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}
