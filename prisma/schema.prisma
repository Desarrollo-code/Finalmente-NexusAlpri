// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  DATE
  NUMBER
}

// --- MODELS ---

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String
  password              String
  role                  UserRole              @default(STUDENT)
  avatar                String?
  theme                 String?               @default("dark")
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime              @default(now())
  coursesCreated        Course[]              @relation("CreatedBy")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  quizAttempts          QuizAttempt[]
  notifications         Notification[]
  eventsCreated         CalendarEvent[]       @relation("CreatedBy")
  eventsAttending       CalendarEvent[]       @relation("Attendees")
  notes                 UserNote[]
  securityLogs          SecurityLog[]
  uploadedResources     EnterpriseResource[]  @relation("UploadedResources")
  sharedResources       EnterpriseResource[]  @relation("SharedResources")
  templatesCreated      LessonTemplate[]
  formsCreated          Form[]                @relation("CreatedBy")
  formResponses         FormResponse[]

  xp                    Int                   @default(0)
  achievements          UserAchievement[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  
  instructorId    String
  instructor      User          @relation("CreatedBy", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType   @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  submittedAt DateTime      @default(now())
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
    id                  String        @id @default(cuid())
    attemptId           String
    attempt             QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId          String
    question            Question      @relation(fields: [questionId], references: [id], onDelete: NoAction)
    selectedOptionId    String
    selectedOption      AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

    @@index([attemptId])
    @@index([questionId])
    @@index([selectedOptionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float                    @default(0)
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progressId  String
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String          // "view" or "quiz"
    score       Float?
    completedAt DateTime        @default(now())

    @@unique([progressId, lessonId])
}

model EnterpriseResource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         String    // FOLDER, DOCUMENT, GUIDE, VIDEO, LINK, etc.
  url          String?
  category     String
  tags         String?
  uploadDate   DateTime  @default(now())
  uploaderId   String
  uploader     User      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId     String?
  parent       EnterpriseResource?  @relation("Children", fields: [parentId], references: [id], onDelete: NoAction)
  children     EnterpriseResource[] @relation("Children")
  ispublic     Boolean   @default(true)
  sharedWith   User[]    @relation("SharedResources")
  pin          String?

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  audience   Json     // e.g., ["ALL"], ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
  priority   String   @default("Normal") // Normal, Urgente

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  color               String             @default("blue")
  location            String?
  audienceType        EventAudienceType  @default(ALL)
  creatorId           String
  creator             User               @relation("CreatedBy", fields: [creatorId], references: [id])
  attendees           User[]             @relation("Attendees")
  videoConferenceLink String?
  attachments         Json? // [{ name: "doc.pdf", url: "..." }]
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime          @default(now())

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  emailWhitelist             String?
  resourceCategories         String    @default("General,Recursos Humanos,TI y Seguridad,Formación Interna")
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")

  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  
  updatedAt                  DateTime  @updatedAt
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

// --- GAMIFICATION ---
model Achievement {
  id                String            @id @default(cuid())
  slug              String            @unique // e.g., "first-course-completed"
  name              String
  description       String
  icon              String?
  points            Int               @default(0)
  userAchievements  UserAchievement[]
}

model UserAchievement {
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime    @default(now())

  @@id([userId, achievementId])
}

// --- FORMS ---
model Form {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  status        FormStatus    @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creatorId     String
  creator       User          @relation("CreatedBy", fields: [creatorId], references: [id])
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[] // Future use for specific sharing
  
  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For select, radio, checkbox, etc.
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete:SetNull) // Optional link to a user
  submittedAt DateTime      @default(now())
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id          String        @id @default(cuid())
  responseId  String
  response    FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value       Json

  @@index([responseId])
  @@index([fieldId])
}
