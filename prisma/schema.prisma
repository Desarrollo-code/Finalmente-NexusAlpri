// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
    SYSTEM
    USER
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}


// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  registeredDate        DateTime  @default(now())
  lastLogin             DateTime?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  theme                 String?
  isActive              Boolean   @default(true)
  xp                    Int       @default(0)

  // Relations
  courses             Course[]          @relation("CreatedCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]   @relation("CreatedEvents")
  courseProgress      CourseProgress[]
  uploadedResources   Resource[]        @relation("UploadedResources")
  sharedResources     Resource[]        @relation("SharedResources")
  createdForms        Form[]            @relation("CreatedForms")
  sharedForms         Form[]            @relation("SharedForms")
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  achievements        UserAchievement[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]

  @@index([email])
}

model Course {
  id               String        @id @default(cuid())
  title            String
  description      String?       @db.Text
  imageUrl         String?
  category         String?
  status           CourseStatus  @default(DRAFT)
  publicationDate  DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  instructorId     String?
  instructor       User?         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules          Module[]
  enrollments      Enrollment[]
  progress         CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  
  @@orderBy([order])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  notes          UserNote[]
  completionRecords LessonCompletionRecord[]

  @@orderBy([order])
}

model ContentBlock {
    id        String   @id @default(cuid())
    type      LessonType
    content   String? @db.Text
    order     Int
    lessonId  String

    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?

    @@orderBy([order])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  maxAttempts Int?
  contentBlockId String @unique

  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  order   Int
  quizId  String

  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
  
  @@orderBy([order])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  points     Int      @default(0)
  questionId String

  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]
}

model Enrollment {
  id          String    @id @default(cuid())
  enrolledAt  DateTime  @default(now())
  userId      String
  courseId    String
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  progressPercentage Float?    @default(0)
  completedAt        DateTime?
  userId             String
  courseId           String
  enrollmentId       String    @unique

  enrollment       Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  completedAt DateTime  @default(now())
  type        String    // 'view' or 'quiz'
  score       Float?    // Only for 'quiz' type
  progressId  String
  lessonId    String
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())
    
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id               String @id @default(cuid())
    attemptId        String
    questionId       String
    selectedOptionId String
    
    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String   @id @default(cuid())
    title               String
    description         String?  @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean  @default(false)
    color               String   @default("blue")
    audienceType        EventAudienceType @default(ALL)
    videoConferenceLink String?
    attachments         Json?
    creatorId           String
    
    creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  uploadDate  DateTime     @default(now())
  pin         String?
  ispublic    Boolean      @default(true)
  
  parentId    String?
  uploaderId  String?
  
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderHierarchy")
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]       @relation("SharedResources")

  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal")
  authorId  String
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  require2faForAdmins        Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)

  // Password Policy
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  
  // Customization
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  primaryColorDark           String?
  backgroundColorDark        String?
  fontHeadline               String?
  fontBody                   String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  
  resourceCategories         String   @db.Text
  updatedAt                  DateTime @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        SecurityLogEvent
    ipAddress    String?
    userAgent    String?  @db.Text
    userId       String?
    emailAttempt String?
    details      String?  @db.Text
    country      String?
    city         String?
    createdAt    DateTime @default(now())
    
    user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?   @db.Text
  type           TemplateType @default(USER)
  creatorId      String
  
  creator        User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String

  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@orderBy([order])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creatorId     String

  creator       User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]         @relation("SharedForms")
}

model FormField {
  id            String   @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean  @default(false)
  placeholder   String?
  options       Json?
  order         Int
  formId        String

  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@orderBy([order])
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime @default(now())
  score         Float?   // Only for quizzes

  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text

  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
