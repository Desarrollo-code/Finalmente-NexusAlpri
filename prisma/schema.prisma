// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---
model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  name                String
  password            String
  avatar              String?
  role                UserRole @default(STUDENT)
  isActive            Boolean  @default(true)
  registeredDate      DateTime @default(now())
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?
  xp                  Int      @default(0)

  // Relations
  courses             Course[] @relation("CreatedCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  resourcesUploaded   Resource[]
  securityLogs        SecurityLog[] @relation("UserSecurityLogs")
  achievements        UserAchievement[]
  notes               UserNote[]
  createdEvents       CalendarEvent[] @relation("CreatedEvents")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  createdForms        Form[] @relation("CreatedForms")
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?
  instructorId    String?
  
  // Relations
  instructor      User?        @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String

  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  
  // Relations
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  templates     LessonTemplate[] // Una lecci√≥n puede ser la base de varias plantillas

  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  
  // Relations
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id            String    @id @default(cuid())
  title         String
  description   String?
  contentBlockId String   @unique
  maxAttempts   Int?      // Null significa ilimitados

  // Relations
  contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id        String          @id @default(cuid())
  text      String
  order     Int
  quizId    String
  
  // Relations
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String

  // Relations
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id              String   @id @default(cuid())
  userId          String
  quizId          String
  score           Float
  attemptNumber   Int
  submittedAt     DateTime @default(now())

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz            Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers         AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
    id              String @id @default(cuid())
    attemptId       String
    questionId      String
    selectedOptionId String
    
    // Relations
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  enrollmentId      String    @unique
  progressPercentage Float    @default(0)
  completedAt       DateTime?

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String   @default("view") // view, quiz, video
  score       Float?
  completedAt DateTime @default(now())
  
  // Relations
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  createdAt   DateTime     @default(now())
  uploaderId  String?
  ispublic    Boolean      @default(true)
  parentId    String?
  pin         String?

  // Relations
  uploader    User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderHierarchy")
  sharedWith  User[]

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  String // Can be a UserRole enum or 'ALL'
  priority  String   @default("Normal")

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        EventAudienceType @default(ALL)
  color               String   @default("blue")
  attachments         Json[]
  creatorId           String

  // Relations
  creator             User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]     @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  
  // Optional relation to user
  userId       String?
  emailAttempt String?          // For failed login attempts where user ID is unknown
  user         User?            @relation("UserSecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  
  // Security
  allowPublicRegistration     Boolean   @default(true)
  emailWhitelist              String?   // Comma-separated list of allowed domains
  require2faForAdmins         Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)

  // Password Policy
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  
  // General
  enableEmailNotifications    Boolean   @default(true)
  resourceCategories          String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formaci√≥n Interna,Documentaci√≥n de Producto,General")

  // Appearance
  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")
  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
  
  updatedAt                   DateTime  @updatedAt
}

model Achievement {
  id              String @id @default(cuid())
  slug            AchievementSlug @unique
  name            String
  description     String
  icon            String // Name of the Lucide icon
  points          Int
  
  // Relations
  users           UserAchievement[]
}

model UserAchievement {
  userId          String
  achievementId   String
  unlockedAt      DateTime @default(now())

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  color       String   @default("yellow") // 'yellow', 'blue', 'green', 'pink', 'purple'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}

model Form {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  status      FormStatus  @default(DRAFT)
  isQuiz      Boolean     @default(false)
  creatorId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  creator     User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]
  
  @@index([creatorId])
}

model FormField {
  id           String      @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean     @default(false)
  placeholder  String?
  options      Json[]      // [{ id: string, text: string, isCorrect?: boolean, points?: number }]
  order        Int
  formId       String
  
  // Relations
  form         Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      Answer[]
  
  @@index([formId])
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?   // Score for quizzes
  
  // Relations
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]
  
  @@index([formId])
  @@index([userId])
}

model Answer {
  id        String   @id @default(cuid())
  responseId String
  fieldId   String
  value     String   @db.Text
  
  // Relations
  response  FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field     FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
  @@index([fieldId])
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType   @default(USER) // SYSTEM or USER
  creatorId      String?
  
  // Relations
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id            String     @id @default(cuid())
  type          LessonType
  order         Int
  templateId    String
  
  // Relations
  template      LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}
