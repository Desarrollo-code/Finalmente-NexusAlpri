// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  role                UserRole @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime @default(now())
  xp                  Int      @default(0)
  theme               String?

  // Relations
  enrollments      Enrollment[]
  coursesCreated   Course[]
  notes            UserNote[]
  resourcesUploaded EnterpriseResource[] @relation("UploaderOfResource")
  resourcesShared   EnterpriseResource[] @relation("SharedWithUser")
  announcements    Announcement[]
  notifications    Notification[]
  eventsCreated    CalendarEvent[]      @relation("CreatorOfEvent")
  eventsAttending  CalendarEvent[]      @relation("AttendeesOfEvent")
  quizAttempts     QuizAttempt[]
  securityLogs     SecurityLog[]
  createdTemplates LessonTemplate[]
  achievements     UserAchievement[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT MODELS ---

model Course {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  category        String?
  publicationDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String  @id @default(cuid())
  title       String
  order       Int
  courseId    String
  
  // Relations
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relations
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completions       LessonCompletionRecord[]
  notes             UserNote[]

  @@index([moduleId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?      // One-to-one with Quiz
  
  @@index([lessonId])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  
  // Relations
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id      String        @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  quizId  String

  // Relations
  quiz    Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
  
  @@index([quizId])
}

model AnswerOption {
  id          String @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String? @db.Text
  questionId  String

  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


// --- USER PROGRESS & ENGAGEMENT ---

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress? // One-to-one with CourseProgress

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String   @unique
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  
  // Relations
  enrollment        Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view' or 'quiz'
    score       Float?
    completedAt DateTime @default(now())
    
    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime @default(now())

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id        String @id @default(cuid())
  attemptId String
  questionId String
  selectedOptionId String
  
  // Relations
  attempt         QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@index([attemptId])
}

model UserNote {
    id        String @id @default(cuid())
    userId    String
    lessonId  String
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}


// --- GLOBAL CONTENT & RESOURCES ---

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model EnterpriseResource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime @default(now())
  ispublic    Boolean  @default(true)
  pin         String?

  // Relations
  uploaderId   String?
  uploader     User?    @relation("UploaderOfResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith   User[]               @relation("SharedWithUser")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal")
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  attachments         Json?    
  audienceType        EventAudienceType @default(ALL)
  
  // Relations
  creatorId           String
  creator             User     @relation("CreatorOfEvent", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("AttendeesOfEvent")
  
  @@index([creatorId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// --- SYSTEM & SETTINGS ---

model PlatformSettings {
  id                       String    @id @default(cuid())
  platformName             String    @default("NexusAlpri")
  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   @db.Text
  resourceCategories       String    @db.Text
  
  // Password Policy
  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  // Security
  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)
  require2faForAdmins      Boolean   @default(false)

  // Appearance
  primaryColor             String?   @default("#6366f1")
  secondaryColor           String?   @default("#a5b4fc")
  accentColor              String?   @default("#ec4899")
  backgroundColorLight     String?   @default("#f8fafc")
  primaryColorDark         String?   @default("#a5b4fc")
  backgroundColorDark      String?   @default("#020617")
  fontHeadline             String?   @default("Space Grotesk")
  fontBody                 String?   @default("Inter")
  logoUrl                  String?
  watermarkUrl             String?
  landingImageUrl          String?
  authImageUrl             String?
  aboutImageUrl            String?
  benefitsImageUrl         String?

  updatedAt                DateTime  @updatedAt
}

model SecurityLog {
  id            String   @id @default(cuid())
  event         String
  details       String?  @db.Text
  ipAddress     String?
  userAgent     String?
  country       String?
  city          String?
  createdAt     DateTime @default(now())
  
  // Relations
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt    String?
  
  @@index([event])
  @@index([userId])
}

// --- GAMIFICATION ---
model Achievement {
    id              String @id @default(cuid())
    slug            String @unique
    name            String
    description     String
    icon            String?
    points          Int @default(0)

    // Relations
    users           UserAchievement[]
}

model UserAchievement {
    userId          String
    achievementId   String
    earnedAt        DateTime @default(now())
    
    // Relations
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@id([userId, achievementId])
}

// --- TEMPLATES ---
model LessonTemplate {
  id              String @id @default(cuid())
  name            String
  description     String?
  type            String @default("USER") // SYSTEM or USER
  creatorId       String?
  
  // Relations
  creator         User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id              String @id @default(cuid())
  type            LessonType
  order           Int
  
  // Relations
  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
