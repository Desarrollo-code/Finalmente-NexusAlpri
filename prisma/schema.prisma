
// prisma/schema.prisma

// --- ENUMS & TYPES ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

// --- MODELS ---
model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime                 @default(now())
  lastLogin             DateTime?
  xp                    Int                      @default(0)
  isActive              Boolean                  @default(true)
  // Relationships
  coursesAsInstructor   Course[]                 @relation("CourseInstructor")
  enrollments           Enrollment[]
  createdResources      Resource[]               @relation("ResourceUploader")
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  progress              CourseProgress[]         @relation("UserProgress")
  quizAttempts          QuizAttempt[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[]          @relation("EventCreator")
  attendedEvents        CalendarEvent[]          @relation("EventAttendees")
  notes                 UserNote[]
  achievements          UserAchievement[]
  createdTemplates      LessonTemplate[]         @relation("TemplateCreator")
  formResponses         FormResponse[]
  securityLogs          SecurityLog[]
  notifications         Notification[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("CourseInstructor", fields: [instructorId], references: [id])
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String                 @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  contentBlockId String   @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
  maxAttempts Int?
}

model Question {
  id       String         @id @default(cuid())
  text     String         @db.Text
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int            @default(0)
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String?                  @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // "view", "quiz", "video"
  score       Float?
  completedAt DateTime       @default(now())
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  @@unique([attemptId, questionId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  hasPin       Boolean    @default(false)
  pin          String?
  uploaderId   String?
  uploader     User?      @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("ResourceSharedWith")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?           @db.Text
  createdAt    DateTime          @default(now())
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  audienceType        String // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String?
  attachments         Json?
  creatorId           String
  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")
}

enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  type           TemplateType
  creatorId      String?
  creator        User?           @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([userId, lessonId])
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String?
  points      Int               @default(0)
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@unique([userId, achievementId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json          @default("[]")
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  userId      String
  score       Float?
  submittedAt DateTime     @default(now())
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String       @db.Text
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  @@unique([responseId, fieldId])
}

// --- GLOBAL SETTINGS ---
model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  // Appearance
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  // Access & Security
  allowPublicRegistration    Boolean   @default(true)
  emailWhitelist             String?
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  // General
  enableEmailNotifications Boolean   @default(true)
  resourceCategories       String?
  updatedAt                  DateTime  @updatedAt
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

```