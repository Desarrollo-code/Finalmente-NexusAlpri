// prisma/schema.prisma
// Este es el esquema de tu base de datos.
// Define los modelos de datos y sus relaciones.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS (Tipos de datos personalizados) ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELOS PRINCIPALES ---

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  password            String
  avatar              String?
  role                UserRole        @default(STUDENT)
  registeredDate      DateTime        @default(now())
  lastLogin           DateTime?
  xp                  Int             @default(0)
  theme               String?
  isActive            Boolean         @default(true)
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorSecret     String?
  coursesAsInstructor Course[]        @relation("InstructorCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  notifications       Notification[]
  achievements        UserAchievement[]
  resourcesUploaded   EnterpriseResource[]
  securityLogs        SecurityLog[]   @relation("UserSecurityLogs")
  calendarEvents      CalendarEvent[] @relation("EventAttendees")
  createdEvents       CalendarEvent[] @relation("EventCreator")
  createdForms        Form[]          @relation("FormCreator")
  formResponses       FormResponse[]
  sharedForms         Form[]          @relation("FormSharedWith")
  sharedResources     EnterpriseResource[] @relation("SharedWithUsers")

  @@map("User")
}

model Course {
  id              String          @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus    @default(DRAFT)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("Course")
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@map("Module")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  templates     LessonTemplate[]

  @@map("Lesson")
}

model ContentBlock {
  id       String    @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String
  lesson   Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@map("ContentBlock")
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?

  @@map("Quiz")
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@map("Question")
}

model AnswerOption {
  id            String  @id @default(cuid())
  text          String
  isCorrect     Boolean @default(false)
  feedback      String?
  questionId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@map("AnswerOption")
}

// --- MODELOS DE RELACIÓN Y PROGRESO ---

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("CourseProgress")
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // 'view', 'quiz', 'video'
  score       Float? // Solo para quizzes
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
  @@map("LessonCompletionRecord")
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@map("QuizAttempt")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("AnswerAttempt")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("UserNote")
}

// --- CONTENIDO GLOBAL ---

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  String   // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR'
  priority  String   @default("Normal") // 'Normal', 'Urgente'

  @@map("Announcement")
}

model EnterpriseResource {
  id           String   @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String?
  tags         String? // Comma-separated
  url          String?
  uploadDate   DateTime @default(now())
  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean  @default(false)
  pin          String?
  parentId     String?
  parent       EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  ispublic     Boolean  @default(true)
  sharedWith   User[]   @relation("SharedWithUsers")

  @@map("EnterpriseResource")
}

// --- GAMIFICACIÓN ---
model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  users             UserAchievement[]

  @@map("Achievement")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("UserAchievement")
}

// --- CONFIGURACIÓN DE LA PLATAFORMA ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean
  enableEmailNotifications  Boolean
  emailWhitelist            String? // Comma-separated domains
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String // Comma-separated
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime  @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("Notification")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation("UserSecurityLogs", fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?

  @@map("SecurityLog")
}


model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  audienceType        String       // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  attendees           User[]       @relation("EventAttendees")
  color               String       @default("blue")
  creatorId           String
  creator             User         @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  videoConferenceLink String?
  attachments         Json[]

  @@map("CalendarEvent")
}


model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@map("LessonTemplate")
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("TemplateBlock")
}


model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("FormSharedWith")

  @@map("Form")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // [{ id: "...", text: "...", isCorrect: bool, points: 10 }]
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@map("FormField")
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime     @default(now())
  answers     FormAnswer[]
  score       Float? // Para quizzes

  @@map("FormResponse")
}

model FormAnswer {
  id         String     @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String     @db.Text // Para selección múltiple, será un JSON array de IDs

  @@map("FormAnswer")
}
