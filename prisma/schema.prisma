// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- Modelos Principales ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  registeredDate        DateTime?     @default(now())
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  theme                 String?
  xp                    Int?          @default(0)
  lastLogin             DateTime?
  
  // Relations
  createdCourses          Course[]
  enrollments             Enrollment[]
  notifications           Notification[]
  createdAnnouncements    Announcement[]  @relation("CreatedAnnouncements")
  createdEvents           CalendarEvent[] @relation("CreatedEvents")
  attendedEvents          CalendarEvent[] @relation("EventAttendees")
  uploadedResources       EnterpriseResource[] @relation("UploadedResources")
  createdLessonTemplates  LessonTemplate[]
  createdForms            Form[] @relation("CreatedForms")
  formResponses           FormResponse[]
  userNotes               UserNote[]
  courseProgresses        CourseProgress[]
  securityLogs            SecurityLog[]
  achievements            UserAchievement[]

  sharedResources         EnterpriseResource[] @relation("SharedResources")
  sharedForms             Form[] @relation("SharedForms")
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?       @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relations
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType  @default(TEXT)
    content   String?     @db.Text
    order     Int
    
    // Relations
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?
}

// --- Modelos de Quiz ---

model Quiz {
    id            String     @id @default(cuid())
    title         String
    description   String?
    
    // Relations
    contentBlockId  String      @unique
    contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions     Question[]
    attempts      QuizAttempt[]
}

model Question {
    id        String        @id @default(cuid())
    text      String
    type      QuestionType
    order     Int
    
    // Relations
    quizId    String
    quiz      Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options   AnswerOption[]
    attempts  AnswerAttempt[]
}

model AnswerOption {
    id          String   @id @default(cuid())
    text        String
    isCorrect   Boolean
    feedback    String?
    
    // Relations
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id          String        @id @default(cuid())
    userId      String
    quizId      String
    score       Float
    submittedAt DateTime      @default(now())
    
    // Relations
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers     AnswerAttempt[]
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    attemptId         String
    questionId        String
    selectedOptionId  String
    
    // Relations
    attempt           QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question          Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption   @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    
    @@unique([attemptId, questionId])
}


// --- Modelos de Progreso e Inscripci√≥n ---

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String                    @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                    @unique
  progressPercentage  Float?                    @default(0)
  completedAt         DateTime?
  
  // Relations
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view' or 'quiz'
    score       Float?
    
    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
}

// --- Modelos de Contenido Global ---

model EnterpriseResource {
    id            String    @id @default(cuid())
    title         String
    description   String?   @db.Text
    type          ResourceType
    category      String
    tags          String?
    url           String?
    uploadDate    DateTime  @default(now())
    uploaderId    String?
    pin           String?
    ispublic    Boolean          @default(true)
    sharedWith  User[]           @relation("SharedResources")

    // Relations
    uploader      User?     @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
    parentId      String?
    parent        EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children      EnterpriseResource[] @relation("FolderHierarchy")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal")
  audience  Json
  
  // Relations
  authorId  String?
  author    User?    @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: SetNull)
}


model CalendarEvent {
    id        String   @id @default(cuid())
    title     String
    description String? @db.Text
    start     DateTime
    end       DateTime
    allDay    Boolean  @default(false)
    location  String?
    color     String?
    videoConferenceLink String?
    attachments Json?
    
    audienceType EventAudienceType @default(ALL)
    
    creatorId String?
    creator   User? @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: SetNull)
    attendees User[] @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Formularios y Encuestas ---

model Form {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  status      FormStatus    @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  creatorId   String
  creator     User          @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]        @relation("SharedForms")
}

model FormField {
    id          String  @id @default(cuid())
    label       String
    type        String // e.g., 'TEXT', 'MULTIPLE_CHOICE', 'RATING'
    options     Json?   // For multiple choice, etc.
    order       Int
    isRequired  Boolean @default(true)

    // Relations
    formId      String
    form        Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormResponse {
    id          String      @id @default(cuid())
    submittedAt DateTime    @default(now())

    // Relations
    formId      String
    form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]

    @@unique([formId, userId])
}

model FormAnswer {
    id          String  @id @default(cuid())
    value       String  @db.Text
    
    // Relations
    responseId  String
    response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId     String
    field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}


// --- Notas de Usuario ---

model UserNote {
  id          String      @id @default(cuid())
  userId      String
  lessonId    String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- Seguridad y Configuraci√≥n ---

model SecurityLog {
    id          String @id @default(cuid())
    event       SecurityLogEvent
    ipAddress   String?
    userAgent   String? @db.Text
    details     String? @db.Text
    createdAt   DateTime @default(now())
    userId      String?
    emailAttempt String?
    city        String?
    country     String?

    // Relations
    user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String    @db.Text
  emailWhitelist            String?   @db.Text // Comma-separated emails for test mode
  updatedAt                 DateTime  @updatedAt
  
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  
  logoUrl           String?
  watermarkUrl      String?
  landingImageUrl   String?
  authImageUrl      String?
  aboutImageUrl     String?
  benefitsImageUrl  String?
}


// --- Gamificaci√≥n y Plantillas ---

model Achievement {
    id          String    @id @default(cuid())
    slug        String    @unique // e.g., "first-course-completed"
    name        String
    description String
    icon        String?
    points      Int

    // Relations
    users       UserAchievement[]
}

model UserAchievement {
    userId        String
    achievementId String
    earnedAt      DateTime @default(now())

    // Relations
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}

model LessonTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String?
  type            TemplateType @default(USER) // SYSTEM or USER
  creatorId       String?
  
  // Relations
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
    id              String      @id @default(cuid())
    type            LessonType
    order           Int
    
    // Relations
    templateId      String
    template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}



// --- Enums ---

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
    SCHEDULED
}

enum QuestionType {
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
    ALL
    STUDENT
    INSTRUCTOR
    ADMINISTRATOR
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
    SYSTEM
    USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
