// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// -------------------------------------
//          MODELOS DE USUARIO
// -------------------------------------

model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  avatar               String?
  role                 UserRole          @default(STUDENT)
  registeredDate       DateTime          @default(now())
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?

  // Relaciones
  courses            Course[]          @relation("CreatedCourses")
  enrollments        Enrollment[]
  notifications      Notification[]
  announcements      Announcement[]
  resources          Resource[]
  securityLogs       SecurityLog[]
  createdEvents      CalendarEvent[]   @relation("CreatedEvents")
  attendingEvents    CalendarEvent[]   @relation("AttendingEvents")
  createdTemplates   LessonTemplate[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// -------------------------------------
//          MODELOS DE CURSO
// -------------------------------------

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String      @default("General")
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relaciones
  instructorId String
  instructor   User   @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]

  @@index([status])
  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  moduleId      String
  module        Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relaciones
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


// -------------------------------------
//       MODELOS DE EVALUACIÓN
// -------------------------------------

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relaciones
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(MULTIPLE_CHOICE)
  order     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relaciones
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}


// -------------------------------------
//       MODELOS DE PROGRESO
// -------------------------------------

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())

  // Relaciones
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  progressPercentage Float     @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relaciones
  enrollmentId String     @unique
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons LessonCompletionRecord[]

  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id         String   @id @default(cuid())
  type       String // "view" or "quiz"
  score      Float?
  completedAt DateTime @default(now())

  // Relaciones
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}


// -------------------------------------
//       MODELOS DE CONTENIDO GLOBAL
// -------------------------------------

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String
  tags        String?
  url         String?
  pin         String?
  uploadDate  DateTime     @default(now())

  // Relaciones
  uploaderId String
  uploader   User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children   Resource[] @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id         String    @id @default(cuid())
  title      String
  content    String    @db.Text
  date       DateTime  @default(now())
  priority   String    @default("Normal") // Normal, Urgente
  audience   Json // "ALL", ["STUDENT", "INSTRUCTOR"], etc.

  // Relaciones
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  color               String       @default("blue")
  videoConferenceLink String?
  attachments         Json?        // [{ "name": "File Name", "url": "..." }]
  audienceType        String       // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR", "SPECIFIC"

  // Relaciones
  creatorId String
  creator   User   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("AttendingEvents")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// -------------------------------------
//       MODELOS DE PLANTILLAS
// -------------------------------------

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM, USER
  createdAt      DateTime        @default(now())

  // Relaciones
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}

// -------------------------------------
//       MODELOS DE CONFIGURACIÓN
// -------------------------------------

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  resourceCategories          String?   @db.Text
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  details      String?
  createdAt    DateTime         @default(now())

  // Relaciones
  userId       String?
  emailAttempt String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}
