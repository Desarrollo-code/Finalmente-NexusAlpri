// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  role                  String    @default("STUDENT") // STUDENT, INSTRUCTOR, ADMINISTRATOR
  avatar                String?
  xp                    Int?      @default(0)
  theme                 String?
  registeredDate        DateTime  @default(now())
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  uploadedResources     EnterpriseResource[] @relation("UploadedBy")
  createdEvents         CalendarEvent[]
  notifications         Notification[]
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdCourses        Course[]
  createdTemplates      LessonTemplate[]
  notes                 UserNote[]
  sharedResources       EnterpriseResource[] @relation("SharedWith")
}

model Enrollment {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
}


// --- COURSE MODELS ---
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  category        String      @default("General")
  imageUrl        String?
  status          String      @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED, SCHEDULED
  publicationDate DateTime?
  instructor      User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContentBlock {
  id       String  @id @default(cuid())
  type     String  // TEXT, VIDEO, QUIZ, FILE
  content  String? @db.Text
  order    Int
  lesson   Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  quiz     Quiz?
}

// --- QUIZ MODELS ---
model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String        @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     String         @default("MULTIPLE_CHOICE")
  order    Int
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?         @db.Text
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  attempts   AnswerAttempt[]
}

// --- PROGRESS & ATTEMPT MODELS ---
model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String
  type       String // view, quiz
  score      Float?
  date       DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  score     Float
  date      DateTime        @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}

// --- PLATFORM CONTENT & SETTINGS MODELS ---

model EnterpriseResource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         String // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, IMAGE, EXTERNAL_LINK, OTHER
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime  @default(now())
  uploader     User?     @relation("UploadedBy", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId   String?
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderChildren")
  pin          String?
  ispublic     Boolean   @default(true)
  sharedWith   User[]    @relation("SharedWith")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  audience  Json // Could be 'ALL', or an array of roles: ['STUDENT', 'INSTRUCTOR']
  priority  String   @default("Normal") // Normal, Urgente
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  audienceType        String // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String   @default("blue")
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  videoConferenceLink String?
  attachments         Json? // Array of {name: string, url: string}
  attendees           User[]
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  require2faForAdmins        Boolean   @default(false)
  idleTimeoutMinutes         Int       @default(20)
  enableIdleTimeout          Boolean   @default(true)
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories         String    @default("General,Recursos Humanos,TI,Marketing") @db.Text
  primaryColor               String?   @default("#6366f1")
  secondaryColor             String?   @default("#a5b4fc")
  accentColor                String?   @default("#ec4899")
  backgroundColorLight       String?   @default("#f8fafc")
  primaryColorDark           String?   @default("#a5b4fc")
  backgroundColorDark        String?   @default("#020617")
  fontHeadline               String?   @default("Space Grotesk")
  fontBody                   String?   @default("Inter")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  updatedAt                  DateTime  @updatedAt
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String // SUCCESSFUL_LOGIN, FAILED_LOGIN_ATTEMPT, PASSWORD_CHANGE_SUCCESS, TWO_FACTOR_ENABLED, TWO_FACTOR_DISABLED, USER_ROLE_CHANGED
  ipAddress    String
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?
  createdAt    DateTime @default(now())
}


model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("USER") // SYSTEM, USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  type       String // TEXT, VIDEO, QUIZ, FILE
  order      Int
}

model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  icon        String?
  points      Int      @default(0)
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  earnedAt      DateTime    @default(now())

  @@id([userId, achievementId])
}
