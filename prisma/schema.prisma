// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED // Added for scheduled publication
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isActive              Boolean   @default(true)
  registeredDate        DateTime? @default(now())
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  xp                    Int?      @default(0)
  theme                 String?

  createdCourses      Course[]           @relation("InstructorCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  announcements       Announcement[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]    @relation("EventCreator")
  attendedEvents      CalendarEvent[]    @relation("EventAttendees")
  uploadedResources   Resource[]
  achievements        UserAchievement[]
  securityLogs        SecurityLog[]
  quizAttempts        QuizAttempt[]
  createdForms        Form[]             @relation("FormCreator")
  sharedForms         Form[]             @relation("FormSharedWith")
  formResponses       FormResponse[]

  @@index([email])
}

model Course {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  
  instructorId    String?
  instructor      User?     @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String    @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id          String   @id @default(cuid())
  type        LessonType
  content     String?  @db.Text
  order       Int
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?

  @@index([lessonId])
}

model Quiz {
    id              String @id @default(cuid())
    title           String
    description     String? @db.Text
    maxAttempts     Int? // null for unlimited
    
    contentBlockId  String @unique
    contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

    questions       Question[]
    attempts        QuizAttempt[]
}

model Question {
    id          String @id @default(cuid())
    text        String @db.Text
    order       Int
    
    quizId      String
    quiz        Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options     AnswerOption[]
    attempts    AnswerAttempt[]

    @@index([quizId])
}

model AnswerOption {
    id          String @id @default(cuid())
    text        String
    isCorrect   Boolean @default(false)
    feedback    String? @db.Text
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    AnswerAttempt AnswerAttempt[]
    
    @@index([questionId])
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId        String
    quiz          Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    answers       AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id              String @id @default(cuid())
    attemptId       String
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    
    questionId      String
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    selectedOptionId String
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}

model Enrollment {
  id              String    @id @default(cuid())
  userId          String
  courseId        String
  enrolledAt      DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress        CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String?   @unique
  progressPercentage Float?    @default(0)
  completedAt        DateTime?
  
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id            String   @id @default(cuid())
  progressId    String
  lessonId      String
  
  type          String   // 'view' or 'quiz'
  score         Float?   // Only for quizzes
  completedAt   DateTime @default(now())

  progress      CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson        Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Resource {
  id           String @id @default(cuid())
  title        String
  description  String? @db.Text
  type         ResourceType @default(DOCUMENT)
  url          String?
  uploadDate   DateTime @default(now())
  category     String?
  tags         String?
  hasPin       Boolean @default(false)
  pin          String?
  ispublic     Boolean @default(true)

  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parentId     String?
  parent       Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[] @relation("FolderChildren")
  
  sharedWith   User[]

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  audience    Json     // 'ALL', or ['ADMINISTRATOR', 'STUDENT']
  priority    String?  @default("Normal")
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?   @db.Text
  link         String?
  read         Boolean   @default(false)
  createdAt    DateTime  @default(now())
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String?  @default("blue")
  audienceType        EventAudienceType @default(ALL)
  attachments         Json? // Array de {name: string, url: string}
  
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees           User[]   @relation("EventAttendees")
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([creatorId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?

  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Lista de dominios/emails permitidos
  
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)

  resourceCategories          String    @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")

  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")

  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id              String   @id @default(cuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event           SecurityLogEvent
  ipAddress       String?
  userAgent       String?  @db.Text
  details         String?  @db.Text
  emailAttempt    String?  // Para registrar el email en intentos fallidos
  city            String?
  country         String?
  
  createdAt       DateTime @default(now())
  
  @@index([userId])
  @@index([event])
}

model LessonTemplate {
  id                String @id @default(cuid())
  name              String
  description       String? @db.Text
  type              TemplateType @default(USER)
  
  creatorId         String?
  creator           User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks    TemplateBlock[]
  
  @@index([creatorId])
}

model TemplateBlock {
  id              String @id @default(cuid())
  type            LessonType
  order           Int
  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

model Achievement {
  id            String @id @default(cuid())
  slug          AchievementSlug @unique
  name          String
  description   String
  icon          String?
  points        Int @default(0)
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id              String @id @default(cuid())
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  achievementId   String
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  unlockedAt      DateTime @default(now())

  @@unique([userId, achievementId])
}

model Form {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  status        FormStatus  @default(DRAFT)
  isQuiz        Boolean     @default(false)

  creatorId     String
  creator       User        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]      @relation("FormSharedWith")

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([creatorId])
}

model FormField {
  id            String      @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean     @default(false)
  options       Json?       // Para tipos como SINGLE_CHOICE, MULTIPLE_CHOICE
  placeholder   String?
  order         Int

  formId        String
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String      @id @default(cuid())
  formId        String
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  submittedAt   DateTime    @default(now())
  score         Float?      // Puntuación si el formulario es un quiz

  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id            String      @id @default(cuid())
  responseId    String
  response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId       String
  field         FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value         String      @db.Text

  @@index([responseId])
  @@index([fieldId])
}
