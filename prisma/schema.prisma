// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
<<<<<<< HEAD
  relationMode = "prisma"
=======
  relationMode = "prisma" // Usamos la emulación de Prisma para evitar restricciones de FK
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
}

generator client {
  provider = "prisma-client-js"
}

<<<<<<< HEAD
// --- Enums ---
=======
// --- ENUMS ---
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

<<<<<<< HEAD
=======
enum TemplateType {
  SYSTEM
  USER
}

>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

<<<<<<< HEAD
// --- Models ---

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  theme                 String?
  registeredDate        DateTime  @default(now())
  lastLogin             DateTime?
  isActive              Boolean   @default(true)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  xp                    Int       @default(0)

  // Relations
  coursesAsInstructor   Course[]     @relation("CourseInstructor")
  enrollments           Enrollment[]
  createdAnnouncements  Announcement[]
  notifications         Notification[]
  createdEvents         CalendarEvent[] @relation("CreatedEvents")
  attendedEvents        CalendarEvent[] @relation("AttendedEvents")
  uploadedResources     Resource[]      @relation("UploadedResources")
  sharedResources       Resource[]      @relation("SharedResources")
  createdForms          Form[]          @relation("CreatedForms")
  sharedForms           Form[]          @relation("SharedForms")
  formResponses         FormResponse[]
  progress              CourseProgress[]
  quizAttempts          QuizAttempt[]
  notes                 UserNote[]
  createdTemplates      LessonTemplate[]
  achievements          UserAchievement[]
  securityLogs          SecurityLog[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String        @db.VarChar(255)
  description     String        @db.Text
  imageUrl        String?       @db.VarChar(1024)
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  instructorId    String
  instructor      User          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes       UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String          @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  contentBlockId  String          @unique
  contentBlock    ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id            String          @id @default(cuid())
  text          String          @db.Text
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options       AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id            String   @id @default(cuid())
  text          String   @db.Text
  isCorrect     Boolean  @default(false)
  feedback      String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  questionId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]
  
  @@index([questionId])
}

model Enrollment {
  id              String      @id @default(cuid())
  userId          String
  courseId        String
  enrolledAt      DateTime    @default(now())
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress        CourseProgress?
=======

// --- MODELS ---

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  password            String
  avatar              String?
  role                UserRole        @default(STUDENT)
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime        @default(now())
  theme               String?
  xp                  Int?            @default(0)
  isActive            Boolean         @default(true) // Para inactivación de usuarios

  coursesAuthored     Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  userNotes           UserNote[]
  uploadedResources   Resource[]      @relation("UploadedResources")
  sharedResources     Resource[]      @relation("SharedResources")
  createdForms        Form[]          @relation("FormCreator")
  formResponses       FormResponse[]
  sharedForms         Form[]          @relation("SharedForms")
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  quizAttempts        QuizAttempt[]
  courseProgresses    CourseProgress[]
  createdTemplates    LessonTemplate[]
  securityLogs        SecurityLog[]
  achievements        UserAchievement[]
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?

  instructorId    String
  instructor      User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int

  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  lessonCompletions LessonCompletionRecord[]
}

model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int

    lessonId  String
    lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    quiz      Quiz?
}

model Quiz {
    id           String      @id @default(cuid())
    title        String
    description  String?
    maxAttempts  Int?        // Null for unlimited attempts

    contentBlockId String      @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions    Question[]
    attempts     QuizAttempt[]
}

model Question {
    id      String       @id @default(cuid())
    text    String
    type    QuestionType @default(SINGLE_CHOICE)
    order   Int
    
    quizId  String
    quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options AnswerOption[]
    answerAttempts AnswerAttempt[]
}

model AnswerOption {
    id         String   @id @default(cuid())
    text       String
    isCorrect  Boolean  @default(false)
    feedback   String?
    points     Int      @default(0) // For quiz scoring

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
<<<<<<< HEAD
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Int      @default(0)
  completedAt         DateTime?
  
  // Relations
  enrollmentId        String?  @unique
  enrollment          Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
=======
    id                  String    @id @default(cuid())
    userId              String
    courseId            String
    enrollmentId        String    @unique
    progressPercentage  Float?
    lastActivity        DateTime? @updatedAt
    completedAt         DateTime? // Date of 100% completion

    enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    completedLessons    LessonCompletionRecord[]

    @@unique([userId, courseId])
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
<<<<<<< HEAD
    type        String // 'view' or 'quiz'
    score       Float?   // Score from 0 to 100 for quizzes
=======
    type        String   // "view" or "quiz"
    score       Float?   // Score for quiz types
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
    completedAt DateTime @default(now())

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String    @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime  @default(now())

<<<<<<< HEAD
model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float // Percentage score
    submittedAt   DateTime @default(now())
    
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id               String @id @default(cuid())
    attemptId        String
    questionId       String
    selectedOptionId String

    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String   @default("Normal")
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  color               String?
  videoConferenceLink String?
  attachments         Json?
  
  // Relations
  creatorId           String
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("AttendedEvents")
  audienceType        EventAudienceType @default(ALL)

  @@index([creatorId])
}


model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Resource {
  id              String   @id @default(cuid())
  title           String
  description     String?  @db.Text
  type            ResourceType
  category        String?
  tags            String?  // Comma-separated
  url             String?
  pin             String?
  uploadDate      DateTime @default(now())
  ispublic        Boolean  @default(true)
  
  // Relations
  uploaderId      String?
  uploader        User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId        String?
  parent          Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children        Resource[] @relation("FolderChildren")
  sharedWith      User[]   @relation("SharedResources")

  @@index([parentId])
  @@index([type])
  @@index([uploaderId])
}

model LessonTemplate {
  id              String @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  createdAt       DateTime @default(now())
  
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id])
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String @id @default(cuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  enableEmailNotifications    Boolean   @default(true)
  require2faForAdmins         Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)

  // Password Policy
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)

  // Appearance
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  // Content
  resourceCategories  String    @db.Text
  
  updatedAt           DateTime  @updatedAt
}

model SecurityLog {
  id              String      @id @default(cuid())
  event           SecurityLogEvent
  ipAddress       String?
  userAgent       String?
  details         String?
  createdAt       DateTime    @default(now())
  
  userId          String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt    String?
  country         String?
  city            String?

  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  color       String   @default("yellow")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- Gamification ---
model Achievement {
    id              String @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    icon            String
    points          Int
    
    userAchievements UserAchievement[]
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

model UserAchievement {
    id              String @id @default(cuid())
    userId          String
    achievementId   String
    unlockedAt      DateTime @default(now())
    
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@unique([userId, achievementId])
=======
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id                String @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String

    quizAttempt       QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String?  @default("Normal")
  
  authorId  String
  audience  Json
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String    @id @default(cuid())
    title               String
    description         String?   @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean
    color               String    @default("blue")
    location            String?
    videoConferenceLink String?
    attachments         Json?
    
    audienceType        EventAudienceType @default(ALL)
    
    creatorId           String
    creator             User      @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    
    attendees           User[]    @relation("EventAttendees")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?
  hasPin      Boolean      @default(false)
  pin         String?

  uploaderId  String?
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Resource[]   @relation("FolderChildren")
  
  sharedWith  User[]       @relation("SharedResources")
  ispublic    Boolean      @default(true)
}

model Notification {
    id          String    @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean   @default(false)
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
    id                        String    @id @default(cuid())
    platformName              String    @default("NexusAlpri")
    allowPublicRegistration   Boolean   @default(true)
    enableEmailNotifications  Boolean   @default(true)
    emailWhitelist            String?   @db.Text
    resourceCategories        String?   @db.Text

    passwordMinLength         Int       @default(8)
    passwordRequireUppercase  Boolean   @default(true)
    passwordRequireLowercase  Boolean   @default(true)
    passwordRequireNumber     Boolean   @default(true)
    passwordRequireSpecialChar Boolean  @default(true)

    enableIdleTimeout         Boolean   @default(true)
    idleTimeoutMinutes        Int       @default(20)
    require2faForAdmins       Boolean   @default(false)
    
    primaryColor              String?
    secondaryColor            String?
    accentColor               String?
    backgroundColorLight      String?
    primaryColorDark          String?
    backgroundColorDark       String?
    fontHeadline              String?
    fontBody                  String?
    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    aboutImageUrl             String?
    benefitsImageUrl          String?

    updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
    id           String           @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
    details      String?          @db.Text
    ipAddress    String?
    userAgent    String?          @db.Text
    city         String?
    country      String?
    createdAt    DateTime         @default(now())
    emailAttempt String?
}

model LessonTemplate {
    id             String @id @default(cuid())
    name           String
    description    String?
    type           TemplateType
    creatorId      String?
    creator        User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)

    templateBlocks TemplateBlock[]
}

model TemplateBlock {
    id         String     @id @default(cuid())
    type       LessonType
    order      Int

    templateId String
    template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
}

// --- Forms ---
model Form {
<<<<<<< HEAD
    id              String @id @default(cuid())
    title           String
    description     String? @db.Text
    status          FormStatus @default(DRAFT)
    isQuiz          Boolean @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    creatorId       String
    creator         User   @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]   @relation("SharedForms")

    @@index([creatorId])
}

model FormField {
    id              String @id @default(cuid())
    label           String
    type            FormFieldType
    placeholder     String?
    required        Boolean @default(false)
    options         Json? // For select, radio, checkbox
    order           Int
    
    formId          String
    form            Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers         FormAnswer[]

    @@index([formId])
}

model FormResponse {
    id              String @id @default(cuid())
    submittedAt     DateTime @default(now())
    score           Float?
    
    formId          String
    form            Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    answers         FormAnswer[]

    @@index([formId])
    @@index([userId])
}

model FormAnswer {
    id              String @id @default(cuid())
    value           String @db.Text
    
    responseId      String
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId         String
    field           FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@index([responseId])
    @@index([fieldId])
=======
    id              String      @id @default(cuid())
    title           String
    description     String?
    status          FormStatus  @default(DRAFT)
    isQuiz          Boolean     @default(false)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    creatorId       String
    creator         User        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)

    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]      @relation("SharedForms")
}

model FormField {
    id          String        @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE
    required    Boolean       @default(false)
    placeholder String?
    order       Int

    formId      String
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)

    answers     FormAnswer[]
}

model FormResponse {
    id          String    @id @default(cuid())
    formId      String
    form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    submittedAt DateTime  @default(now())
    score       Float?    // Puntuación si el formulario es un quiz

    answers     FormAnswer[]
}

model FormAnswer {
    id          String @id @default(cuid())
    responseId  String
    response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

    fieldId     String
    field       FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    
    value       String    @db.Text
}

model Achievement {
    id          String    @id @default(cuid())
    slug        String    @unique // e.g., "first-course-completed"
    name        String
    description String
    icon        String?
    points      Int       @default(10)

    users       UserAchievement[]
}

model UserAchievement {
    id            String      @id @default(cuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt      DateTime    @default(now())

    @@unique([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
>>>>>>> 1a980b313c81d2867350d6979f82c2b606909af1
}
