// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "mysql"
  url           = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  password              String
  avatar                String?
  role                  String            @default("STUDENT") // ADMINISTRATOR, INSTRUCTOR, STUDENT
  registeredDate        DateTime?         @default(now())
  isTwoFactorEnabled    Boolean           @default(false)
  twoFactorSecret       String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  coursesAsInstructor Course[]          @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  resources             Resource[]
  announcements         Announcement[]
  notifications         Notification[]
  eventsAsCreator       CalendarEvent[]   @relation("EventCreators")
  eventsAsAttendee      CalendarEvent[]   @relation("EventAttendees")
  templates             LessonTemplate[]
  SecurityLog           SecurityLog[]
}

model Course {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  imageUrl      String?
  category      String?
  status        String         @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED, SCHEDULED
  publicationDate DateTime?

  instructorId String?
  instructor   User?           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([instructorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id                 String               @id @default(cuid())
  title              String
  order              Int
  moduleId           String
  module             Module               @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  LessonTemplate     LessonTemplate?

  @@index([moduleId])
}

model ContentBlock {
  id       String   @id @default(cuid())
  type     String // TEXT, VIDEO, QUIZ, FILE
  content  String?  @db.Text
  order    Int

  lessonId String
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text

  contentBlockId  String          @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions Question[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    String         @default("MULTIPLE_CHOICE")
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id         String     @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                 @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                  @default(0)
  enrollmentId       String                 @unique

  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment             @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id         String       @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float? // Only for quizzes

  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  type        String // FOLDER, DOCUMENT, VIDEO, etc.
  url         String?
  category    String
  tags        String?   // Stored as a comma-separated string
  pin         String?
  uploadDate  DateTime  @default(now())

  uploaderId String?
  uploader   User?     @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId String?
  parent   Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Corregido aquí
  children Resource[] @relation("FolderChildren")

  @@index([parentId])
  @@index([uploaderId])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal") // Normal, Urgente

  authorId  String?
  author    User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json          // e.g., ["STUDENT", "INSTRUCTOR"] or "ALL"

  @@index([authorId])
}


model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                    String          @id @default(cuid())
  title                 String
  description           String?         @db.Text
  location              String?
  start                 DateTime
  end                   DateTime
  allDay                Boolean         @default(false)
  color                 String          @default("blue")
  videoConferenceLink   String?

  audienceType String @default("ALL") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC

  attachments Json @default("[]")

  creatorId String
  creator   User            @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)

  attendees User[] @relation("EventAttendees")

  @@index([creatorId])
}

model LessonTemplate {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        String // SYSTEM, USER

  creatorId   String?
  creator     User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]

  baseLessonId String? @unique
  baseLesson   Lesson? @relation(fields: [baseLessonId], references: [id], onDelete: SetNull)

  @@index([creatorId])
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       String // TEXT, VIDEO, QUIZ, FILE
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories        String?   @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String    @id @default(cuid())
  event        String
  ipAddress    String?
  details      String?
  userId       String?
  emailAttempt String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
}