// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole            @default(STUDENT)
  theme                 String?
  isTwoFactorEnabled    Boolean             @default(false)
  twoFactorSecret       String?
  xp                    Int                 @default(0)
  isActive              Boolean             @default(true)
  registeredDate        DateTime?           @default(now())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  enrollments           Enrollment[]
  coursesAsInstructor   Course[]            @relation("CoursesByInstructor")
  announcements         Announcement[]
  notifications         Notification[]
  userNotes             UserNote[]
  progress              CourseProgress[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdEvents         CalendarEvent[]     @relation("CreatedEvents")
  attendedEvents        CalendarEvent[]     @relation("EventAttendees")
  createdLessonTemplates LessonTemplate[]   @relation("CreatedTemplates")
  createdResources      Resource[]          @relation("UploadedResources")
  sharedResources       Resource[]          @relation("SharedResources")
  createdForms          Form[]              @relation("CreatedForms")
  submittedForms        FormResponse[]
  sharedForms           Form[]              @relation("SharedForms")
  achievements          UserAchievement[]
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?       @relation("CoursesByInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id           String             @id @default(cuid())
  title        String
  order        Int
  moduleId     String
  module       Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions  LessonCompletionRecord[]
  userNotes    UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?
  maxAttempts Int?
  contentBlockId String   @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id        String      @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?     @db.Text
  questionId String
  question  Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id            String   @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@unique([userId, quizId, attemptNumber])
}

model AnswerAttempt {
    id              String @id @default(cuid())
    attemptId       String
    questionId      String
    selectedOptionId String

    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String      @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float?      @default(0)
  completedAt         DateTime?
  enrollmentId        String?     @unique
  enrollment          Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id            String @id @default(cuid())
  progressId    String
  lessonId      String
  completedAt   DateTime @default(now())
  type          String   // "view" o "quiz"
  score         Float?
  
  progress      CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson        Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
}

model UserNote {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json     // 'ALL' o array de UserRole
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  attachments         Json?
  audienceType        EventAudienceType @default(ALL)
  color               String?
  
  creatorId           String?
  creator             User?    @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: SetNull)
  attendees           User[]   @relation("EventAttendees")
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin      Boolean      @default(false)
  pin         String?
  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderChildren")
  ispublic    Boolean      @default(true)
  sharedWith  User[]       @relation("SharedResources")
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime  @updatedAt
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?          @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean  @default(false)
  creatorId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  creator       User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]         @relation("SharedForms")
}

model FormField {
  id            String    @id @default(cuid())
  label         String
  type          FormFieldType
  placeholder   String?
  required      Boolean   @default(false)
  options       Json?
  order         Int
  formId        String
  form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  userId       String
  submittedAt  DateTime @default(now())
  score        Float?

  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]
}

model FormAnswer {
  id          String    @id @default(cuid())
  responseId  String
  fieldId     String
  value       String    @db.Text

  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model Achievement {
  id            String @id @default(cuid())
  slug          AchievementSlug @unique
  name          String
  description   String
  icon          String
  points        Int
  
  users         UserAchievement[]
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}
