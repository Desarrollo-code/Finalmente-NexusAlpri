// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// --- MODELS ---

model Course {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  category        String?
  imageUrl        String?   @db.Text
  instructorId    String?
  instructor      User?     @relation("CreatedCourses", fields: [instructorId], references: [id])
  modules         Module[]
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  lessonCompletions LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("LessonTemplateToLesson")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String         @db.Text
  type    QuestionType   @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id            String          @id @default(cuid())
  text          String
  isCorrect     Boolean
  feedback      String?
  questionId    String
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  theme                 String?
  xp                    Int?      @default(0)
  isActive              Boolean   @default(true)

  // Relations
  createdCourses        Course[]          @relation("CreatedCourses")
  enrollments           Enrollment[]
  notes                 UserNote[]
  uploadedResources     Resource[]        @relation("Uploader")
  sharedResources       Resource[]        @relation("SharedWith")
  createdEvents         CalendarEvent[]   @relation("EventCreator")
  attendedEvents        CalendarEvent[]   @relation("EventAttendees")
  notifications         Notification[]
  achievements          UserAchievement[]
  securityLogs          SecurityLog[]
  createdForms          Form[]            @relation("FormCreator")
  sharedForms           Form[]            @relation("SharedForms")
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
  createdAnnouncements  Announcement[]
  courseProgresses      CourseProgress[]
  createdTemplates      LessonTemplate[]
}


model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float?                   @default(0)
  lastActivity       DateTime?                @updatedAt
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // "view" or "quiz"
  score       Float?
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?    @db.Text
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[] @relation("FolderHierarchy")
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedWith")
}

model Announcement {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  date      DateTime   @default(now())
  authorId  String
  priority  String?    @default("Normal")
  audience  Json
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  audienceType        EventAudienceType @default(ALL)
  attendees           User[]            @relation("EventAttendees")
  color               String            @default("blue")
  videoConferenceLink String?
  attachments         Json?             @default("[]")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  resourceCategories          String?   @db.Text
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  require2faForAdmins         Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model SecurityLog {
  id           String           @id @default(cuid())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  emailAttempt String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
}

model Form {
    id              String          @id @default(cuid())
    title           String
    description     String?         @db.Text
    creatorId       String
    creator         User            @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    status          FormStatus      @default(DRAFT)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("SharedForms")
    isQuiz          Boolean         @default(false)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model FormField {
    id          String        @id @default(cuid())
    formId      String
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    order       Int
    label       String
    type        FormFieldType
    required    Boolean       @default(false)
    placeholder String?
    options     Json?         @default("[]") // For select, radio, checkbox
}

model FormResponse {
    id          String        @id @default(cuid())
    formId      String
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt DateTime      @default(now())
    score       Float?        // For quizzes
    answers     Answer[]
}

model Answer {
    id         String       @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    value      String       @db.Text
}

model QuizAttempt {
    id            String          @id @default(cuid())
    userId        String
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId        String
    quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id               String       @id @default(cuid())
    attemptId        String
    attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- GAMIFICATION ---
model Achievement {
  id                 String            @id @default(cuid())
  slug               String            @unique // e.g., 'first-course-completed'
  name               String
  description        String
  icon               String?
  points             Int               @default(0)
  userAchievements   UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime    @default(now())

  @@unique([userId, achievementId])
}

// --- TEMPLATES ---
enum TemplateType {
  SYSTEM
  USER
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]        @relation("LessonTemplateToLesson")
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
