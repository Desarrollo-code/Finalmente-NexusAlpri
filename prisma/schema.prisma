// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---
model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  registeredDate        DateTime? @default(now())
  lastLoginDate         DateTime?
  isActive              Boolean   @default(true)
  theme                 String?
  xp                    Int       @default(0)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  
  // Relations
  createdCourses        Course[]      @relation("CreatedCourses")
  enrollments           Enrollment[]
  notifications         Notification[]
  notes                 UserNote[]
  achievements          UserAchievement[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[] @relation("CreatedEvents")
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  uploadedResources     Resource[]    @relation("UploadedResources")
  sharedResources       Resource[]    @relation("SharedResources")
  createdForms          Form[]        @relation("CreatedForms")
  sharedForms           Form[]        @relation("SharedForms")
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]

  @@map("users")
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  
  // Relations
  instructorId    String
  instructor      User          @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  
  // Relations
  module        Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("LessonTemplates")

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  
  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String    @unique
  
  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String   @id @default(cuid())
  text      String   @db.Text
  order     Int
  quizId    String
  
  // Relations
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  answers   AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  feedback    String?
  questionId  String
  
  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@map("answer_options")
}

model QuizAttempt {
    id            String          @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())

    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id               String       @id @default(cuid())
    attemptId        String
    questionId       String
    selectedOptionId String

    attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}


model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  enrollmentId        String    @unique

  // Relations
  enrollment          Enrollment            @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view', 'quiz', 'video'
    score       Float?
    completedAt DateTime @default(now())

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime      @default(now())
  category    String?
  tags        String?
  ispublic    Boolean       @default(true)
  
  // Relations
  parentId    String?
  parent      Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]    @relation("FolderHierarchy")

  uploaderId  String
  uploader    User          @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  pin         String?

  sharedWith  User[]        @relation("SharedResources")

  @@map("resources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  String   // JSON string: "ALL" o ["STUDENT", "INSTRUCTOR"]
  priority  String?  @default("Normal")
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CalendarEvent {
    id                  String      @id @default(cuid())
    title               String
    description         String?     @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean     @default(false)
    location            String?
    videoConferenceLink String?
    audienceType        String      // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
    color               String      @default("blue")
    attachments         Json?

    creatorId           String
    creator             User        @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]      @relation("EventAttendees")

    @@map("calendar_events")
}

model PlatformSettings {
  id                      String    @id @default(cuid())
  platformName            String    @default("NexusAlpri")
  logoUrl                 String?
  watermarkUrl            String?
  landingImageUrl         String?
  authImageUrl            String?
  aboutImageUrl           String?
  benefitsImageUrl        String?
  fontHeadline            String?   @default("Space Grotesk")
  fontBody                String?   @default("Inter")
  
  allowPublicRegistration Boolean   @default(true)
  emailWhitelist          String?   // Comma-separated list of allowed domains
  
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)

  resourceCategories      String    @default("General,Recursos Humanos,Ventas") @db.Text
  
  primaryColor            String?   @default("#6366f1")
  secondaryColor          String?   @default("#a5b4fc")
  accentColor             String?   @default("#ec4899")
  backgroundColorLight    String?   @default("#f8fafc")
  primaryColorDark        String?   @default("#a5b4fc")
  backgroundColorDark     String?   @default("#020617")

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@map("platform_settings")
}

model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  userId        String?
  emailAttempt  String?
  ipAddress     String?
  userAgent     String?
  city          String?
  country       String?
  details       String?
  createdAt     DateTime          @default(now())
  
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            String         // SYSTEM or USER
  creatorId       String?        // Null for SYSTEM templates
  
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]       @relation("LessonTemplates")

  @@map("lesson_templates")
}

model TemplateBlock {
  id          String      @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String

  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("template_blocks")
}


model Achievement {
  id           String             @id @default(cuid())
  slug         AchievementSlug    @unique
  name         String
  description  String
  icon         String
  points       Int

  unlockedBy   UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}


model Form {
    id              String      @id @default(cuid())
    title           String
    description     String?     @db.Text
    status          FormStatus  @default(DRAFT)
    isQuiz          Boolean     @default(false)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    creatorId       String
    creator         User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]      @relation("SharedForms")

    @@map("forms")
}

model FormField {
    id              String          @id @default(cuid())
    label           String
    type            FormFieldType
    options         Json?           // For SINGLE_CHOICE, MULTIPLE_CHOICE
    required        Boolean         @default(false)
    placeholder     String?
    order           Int
    
    formId          String
    form            Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers         FormResponseAnswer[]

    @@map("form_fields")
}

model FormResponse {
    id              String      @id @default(cuid())
    formId          String
    userId          String
    submittedAt     DateTime    @default(now())
    score           Float?      // Percentage score if it's a quiz
    
    form            Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers         FormResponseAnswer[]

    @@map("form_responses")
}

model FormResponseAnswer {
    id              String      @id @default(cuid())
    responseId      String
    fieldId         String
    value           String      @db.Text // JSON string for multiple choice
    
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field           FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@map("form_response_answers")
}
