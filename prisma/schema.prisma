// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  isActive              Boolean       @default(true)
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime      @default(now())
  lastLogin             DateTime?
  xp                    Int           @default(0)
  theme                 String?

  coursesAsInstructor   Course[]      @relation("CourseInstructor")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  userNotes             UserNote[]
  notifications         Notification[]
  quizAttempts          QuizAttempt[]
  createdEvents         CalendarEvent[] @relation("EventCreator")
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  userAchievements      UserAchievement[]
  uploadedResources     Resource[]    @relation("UploadedResources")
  sharedResources       Resource[]    @relation("SharedResources")
  createdForms          Form[]
  formResponses         FormResponse[]
  createdLessonTemplates LessonTemplate[]
  
  @@index([email])
}

model Course {
  id               String        @id @default(cuid())
  title            String
  description      String        @db.Text
  category         String?
  imageUrl         String?
  status           CourseStatus  @default(DRAFT)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  publicationDate  DateTime?

  instructorId     String
  instructor       User          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules          Module[]
  enrollments      Enrollment[]
  progress         CourseProgress[]
  
  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons   Lesson[]
  
  @@index([courseId])
}

model Lesson {
  id             String            @id @default(cuid())
  title          String
  order          Int
  
  moduleId       String
  module         Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  userNotes      UserNote[]
  templates      LessonTemplate[]
  
  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?
  
  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  maxAttempts    Int?

  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String   @id @default(cuid())
  text      String
  order     Int
  
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]
  attempts  AnswerAttempt[]
  
  @@index([quizId])
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean         @default(false)
  feedback     String?         @db.Text
  points       Int             @default(0)
  
  questionId   String
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())

  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers       AnswerAttempt[]
  
  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  
  attemptId         String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Restrict)

  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model Enrollment {
  id          String   @id @default(cuid())
  enrolledAt  DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  progressPercentage Float    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime? @updatedAt

  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId           String
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  enrollmentId       String?   @unique
  enrollment         Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    type        String // e.g., 'view', 'quiz', 'video'
    score       Float?
    completedAt DateTime @default(now())
    
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@index([progressId])
}


model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  ispublic     Boolean      @default(true)
  pin          String?      
  
  uploaderId  String?
  uploader    User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Resource?  @relation("FolderContent", fields: [parentId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  children    Resource[] @relation("FolderContent")
  
  sharedWith  User[]     @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}


model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  location            String?
  color               String?
  videoConferenceLink String?
  attachments         Json?            @db.Json
  
  audienceType        EventAudienceType @default(ALL)
  
  creatorId           String
  creator             User               @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("EventAttendees")
  
  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String?
  audience  Json     // Can be "ALL" or an array of UserRole strings
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}


model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}


model PlatformSettings {
    id                        String   @id @default(cuid())
    platformName              String   @default("NexusAlpri")
    allowPublicRegistration   Boolean  @default(true)
    enableEmailNotifications  Boolean  @default(true)
    emailWhitelist            String?  @db.Text // Comma-separated list of allowed domains
    resourceCategories        String   @default("General") @db.Text
    
    // Password policies
    passwordMinLength         Int      @default(8)
    passwordRequireUppercase  Boolean  @default(true)
    passwordRequireLowercase  Boolean  @default(true)
    passwordRequireNumber     Boolean  @default(true)
    passwordRequireSpecialChar Boolean @default(false)

    // Security settings
    enableIdleTimeout         Boolean  @default(true)
    idleTimeoutMinutes        Int      @default(20)
    require2faForAdmins       Boolean  @default(false)

    // Theme settings
    primaryColor              String?
    secondaryColor            String?
    accentColor               String?
    backgroundColorLight      String?
    fontHeadline              String?
    fontBody                  String?

    primaryColorDark          String?
    backgroundColorDark       String?

    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    aboutImageUrl             String?
    benefitsImageUrl          String?

    updatedAt                 DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  details      String?          @db.Text
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())

  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  
  @@index([userId])
  @@index([event])
}


model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?        @db.Text
  type           String         @default("USER") // SYSTEM or USER

  creatorId      String?
  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int

  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       FormStatus @default(DRAFT)
  isQuiz       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  creatorId    String
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]

  sharedWith   User[]    @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id           String   @id @default(cuid())
  label        String
  type         String   // SHORT_TEXT, LONG_TEXT, SINGLE_CHOICE, MULTIPLE_CHOICE
  required     Boolean  @default(false)
  placeholder  String?
  options      Json?    // For choice fields, e.g., [{id: 'abc', text: 'Option 1', isCorrect: false, points: 0}]
  order        Int

  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      Answer[]

  @@index([formId])
}

model FormResponse {
  id           String   @id @default(cuid())
  submittedAt  DateTime @default(now())
  score        Float?   // Score if the form is a quiz

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  answers      Answer[]

  @@index([userId, formId])
}

model Answer {
  id         String   @id @default(cuid())
  value      String   @db.Text

  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Restrict)

  @@index([responseId])
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  unlockedAt    DateTime  @default(now())

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}
