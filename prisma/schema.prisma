// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime? @default(now())
  theme                 String?
  xp                    Int?      @default(0) // Puntos de experiencia para gamificaci√≥n

  instructorOfCourses   Course[]         @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  createdTemplates      LessonTemplate[]
  notes                 UserNote[]
  securityLogs          SecurityLog[]
  uploadedResources     EnterpriseResource[] @relation("UploadedResources")
  sharedResources       EnterpriseResource[] @relation("SharedResources")
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]     @relation("EventAttendees")
  notifications         Notification[]
  quizAttempts          QuizAttempt[]
  announcements         Announcement[]

  achievements UserAchievement[]

  @@map("users")
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  instructorId String?
  instructor   User?   @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id       String       @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?         @db.Text
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]

  @@map("answer_options")
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime      @default(now())
  answers   AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id         String        @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String // 'view' or 'quiz'
  score      Float? // Only for 'quiz' type

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
    @@map("user_notes")
}


enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  category     String
  tags         String?
  uploadDate   DateTime     @default(now())
  pin          String?
  ispublic     Boolean      @default(true)

  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderChildren")
  sharedWith   User[]               @relation("SharedResources")

  @@map("enterprise_resources")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal") // e.g., 'Normal', 'Urgente'
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  audienceType        EventAudienceType @default(ALL)
  color               String?           @default("blue")
  videoConferenceLink String?
  attachments         Json?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")

  @@map("calendar_events")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  
  // Password policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  // Idle timeout
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)

  // Content related
  resourceCategories        String    @db.Text

  // Theming
  primaryColor        String? @default("#6366f1") // indigo-500
  secondaryColor      String? @default("#a5b4fc") // indigo-300
  accentColor         String? @default("#ec4899") // pink-500
  backgroundColorLight String? @default("#f8fafc") // slate-50
  primaryColorDark    String? @default("#a5b4fc") // indigo-300
  backgroundColorDark String? @default("#020617") // slate-950
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  updatedAt                 DateTime  @updatedAt

  @@map("platform_settings")
}


enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model SecurityLog {
  id              String           @id @default(cuid())
  event           SecurityLogEvent
  ipAddress       String
  createdAt       DateTime         @default(now())
  details         String?          @db.Text
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt    String?
  
  @@map("security_logs")
}

model LessonTemplate {
    id String @id @default(cuid())
    name String @unique
    description String?
    type String // SYSTEM or USER
    creatorId String?
    creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

    templateBlocks TemplateBlock[]
}

model TemplateBlock {
    id String @id @default(cuid())
    type LessonType
    order Int
    
    templateId String
    template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
    id        String   @id @default(cuid())
    slug      String   @unique
    name      String
    description String
    icon      String?
    points    Int      @default(0)

    users UserAchievement[]
}

model UserAchievement {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    achievementId String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    earnedAt DateTime @default(now())
    
    @@id([userId, achievementId])
}
