// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- MODELS ---

model User {
  id                      String          @id @default(uuid())
  email                   String          @unique
  name                    String
  password                String
  avatar                  String?
  role                    UserRole        @default(STUDENT)
  isTwoFactorEnabled      Boolean         @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime        @default(now())
  lastLogin               DateTime?
  xp                      Int             @default(0)
  isActive                Boolean         @default(true)
  createdCourses          Course[]
  enrollments             Enrollment[]
  notes                   UserNote[]
  notifications           Notification[]
  quizAttempts            QuizAttempt[]
  userAchievements        UserAchievement[]
  uploadedResources       Resource[]      @relation("UploadedResources")
  sharedResources         Resource[]      @relation("SharedResources")
  createdAnnouncements    Announcement[]
  createdEvents           CalendarEvent[] @relation("CreatedEvents")
  attendedEvents          CalendarEvent[] @relation("EventAttendees")
  createdForms            Form[]
  formResponses           FormResponse[]
  createdLessonTemplates  LessonTemplate[] @relation("CreatedTemplates")
  securityLogs            SecurityLog[]   @relation("SecurityLogs")

  @@map("users")
}

model Course {
  id              String         @id @default(uuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Module {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(uuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("LessonTemplates")

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(uuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String        @id @default(uuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id      String         @id @default(uuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id         String  @id @default(uuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  points     Int?    @default(0) // Puntos por respuesta, Ãºtil para quizzes avanzados
  questionId String
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@map("answer_options")
}

model QuizAttempt {
    id            String          @id @default(uuid())
    userId        String
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId        String
    quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())
    answers       AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id               String       @id @default(uuid())
    quizAttemptId    String
    quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}


model Enrollment {
  id          String         @id @default(uuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(uuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id           String @id @default(uuid())
    progressId   String
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId     String
    lesson       Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    completedAt  DateTime @default(now())
    type         String // "view", "quiz", "video"
    score        Float?

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Resource {
  id           String     @id @default(uuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String
  uploader     User       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResources")
  // Self-relation for folders
  parentId     String?
  parent       Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderHierarchy")

  @@map("resources")
}


model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // 'ALL' o un JSON array de roles: ["STUDENT", "INSTRUCTOR"]

  @@map("announcements")
}

model CalendarEvent {
  id                  String            @id @default(uuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  attendees           User[]            @relation("EventAttendees")
  color               String?           @default("blue")
  creatorId           String
  creator             User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attachments         Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("calendar_events")
}


model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String    @default("General")
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  updatedAt                 DateTime  @updatedAt

  @@map("platform_settings")
}

model SecurityLog {
  id            String           @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userId        String?
  emailAttempt  String?
  details       String?          @db.Text
  createdAt     DateTime         @default(now())
  userAgent     String?
  country       String?
  city          String?
  
  user          User?             @relation("SecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String?
  points            Int
  UserAchievement   UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER)
  creatorId      String?
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  usedInLessons  Lesson[]        @relation("LessonTemplates")

  @@map("lesson_templates")
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}


// --- Models for Forms/Surveys ---
model Form {
  id           String          @id @default(cuid())
  title        String
  description  String?         @db.Text
  status       FormStatus      @default(DRAFT)
  isQuiz       Boolean         @default(false) // If true, enables scoring
  creatorId    String
  creator      User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]          @relation("SharedForms")

  @@map("forms")
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  options      Json?         // [{id, text, isCorrect, points}]
  placeholder  String?
  order        Int
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id           String       @id @default(cuid())
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime     @default(now())
  score        Float? // Overall score percentage if it's a quiz
  answers      FormAnswer[]

  @@map("form_responses")
}

model FormAnswer {
  id         String    @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String    @db.Text // Stored as string, can be JSON for multiple choice

  @@map("form_answers")
}

// --- ENUMS for Forms ---
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
