// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?     @default(now())
  xp                    Int?          @default(0)
  theme                 String?
  
  enrollments           Enrollment[]
  coursesCreated        Course[]      @relation("InstructorCourses")
  notes                 UserNote[]
  resourcesUploaded     EnterpriseResource[]
  announcements         Announcement[]
  calendarEventsCreated CalendarEvent[]
  notifications         Notification[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  userAchievements      UserAchievement[]
  formsCreated          Form[]        @relation("CreatorForms")
  formResponses         FormResponse[]
  sharedResources       EnterpriseResource[] @relation("SharedResourceWithUser")
  sharedEvents          CalendarEvent[]      @relation("EventAttendees")
  sharedForms           Form[]               @relation("SharedFormWithUser")

  @@index([email])
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  instructorId    String?
  instructor      User?       @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String         @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  
  module          Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes       UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  order     Int
  content   String?    @db.Text
  lessonId  String
  
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String        @unique
  
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  order   Int
  quizId  String
  
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?  @db.Text
  questionId String

  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String    @unique
  progressPercentage Float?
  lastActivity       DateTime? @updatedAt
  completedAt        DateTime?
  
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([enrollmentId])
}


model LessonCompletionRecord {
  id          String      @id @default(cuid())
  progressId  String
  lessonId    String
  type        String      // 'view' or 'quiz'
  score       Float?      // Only for 'quiz' type
  completedAt DateTime    @default(now())
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id              String      @id @default(cuid())
  quizAttemptId   String
  questionId      String
  selectedOptionId String
  
  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model EnterpriseResource {
    id           String @id @default(cuid())
    title        String
    description  String? @db.Text
    type         ResourceType
    category     String?
    tags         String?
    url          String?
    uploadDate   DateTime @default(now())
    uploaderId   String?
    uploader     User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
    parentId     String?
    hasPin       Boolean  @default(false)
    pin          String?
    ispublic     Boolean  @default(true)

    parent       EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
    children     EnterpriseResource[] @relation("FolderHierarchy")
    sharedWith   User[]               @relation("SharedResourceWithUser")

    @@index([parentId])
    @@index([uploaderId])
}

model Announcement {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  date      DateTime    @default(now())
  authorId  String?
  audience  Json        // Can be 'ALL', or an array of UserRole
  priority  String?     @default("Normal")
  
  author    User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                 String   @id @default(cuid())
  title              String
  description        String?  @db.Text
  location           String?
  start              DateTime
  end                DateTime
  allDay             Boolean  @default(false)
  color              String?
  creatorId          String
  audienceType       EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments        Json?    // Array of {name: string, url: string}

  creator            User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees          User[]   @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
    id           String      @id @default(cuid())
    event        SecurityLogEvent
    ipAddress    String?
    userAgent    String?
    userId       String?
    emailAttempt String?
    details      String?
    createdAt    DateTime    @default(now())
    country      String?
    city         String?

    user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([event])
}

model PlatformSettings {
    id                       String    @id @default(cuid())
    platformName             String    @default("NexusAlpri")
    allowPublicRegistration  Boolean   @default(true)
    enableEmailNotifications Boolean   @default(true)
    emailWhitelist           String?   @db.Text
    resourceCategories       String?   @db.Text
    passwordMinLength        Int       @default(8)
    passwordRequireUppercase Boolean   @default(true)
    passwordRequireLowercase Boolean   @default(true)
    passwordRequireNumber    Boolean   @default(true)
    passwordRequireSpecialChar Boolean @default(true)
    enableIdleTimeout        Boolean   @default(true)
    idleTimeoutMinutes       Int       @default(20)
    require2faForAdmins      Boolean   @default(false)
    updatedAt                DateTime  @updatedAt
    
    // Theme properties
    primaryColor             String?
    secondaryColor           String?
    accentColor              String?
    backgroundColorLight     String?
    primaryColorDark         String?
    backgroundColorDark      String?
    fontHeadline             String?
    fontBody                 String?
    logoUrl                  String?
    watermarkUrl             String?
    landingImageUrl          String?
    authImageUrl             String?
    aboutImageUrl            String?
    benefitsImageUrl         String?
}

// --- GAMIFICATION MODELS ---
model Achievement {
    id              String            @id @default(cuid())
    slug            String            @unique
    name            String
    description     String
    icon            String?
    points          Int
    userAchievements UserAchievement[]
}

model UserAchievement {
    id            String      @id @default(cuid())
    userId        String
    achievementId String
    earnedAt      DateTime    @default(now())

    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}

// --- FORMS MODELS ---
model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      FormStatus @default(DRAFT)
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isQuiz      Boolean  @default(false)

  creator     User     @relation("CreatorForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]        @relation("SharedFormWithUser")

  @@index([creatorId])
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean  @default(false)
  placeholder String?
  options     Json?    // [{id: string, text: string, isCorrect: boolean, points: number}]
  order       Int
  formId      String

  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?   // Only for quizzes

  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text

  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

// --- ENUMS ---

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
    SCHEDULED
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
  ALL
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
  SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
