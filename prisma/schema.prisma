// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTHENTICATION MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  role                UserRole  @default(STUDENT)
  avatar              String?
  registeredDate      DateTime  @default(now())
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  resourcesUploaded   Resource[]
  notifications       Notification[]
  eventsCreated       CalendarEvent[] @relation("EventCreator")
  eventsAttending     CalendarEvent[] @relation("EventAttendees")

  @@map("users")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE STRUCTURE MODELS ---

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?       @db.Text
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  instructorId    String?
  instructor      User?         @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  
  // These fields are deprecated by ContentBlock but kept for potential migration logic
  type      String? // Deprecated
  content   String? @db.Text // Deprecated

  @@map("lessons")
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  quiz      Quiz?

  @@map("content_blocks")
}


// --- QUIZ MODELS ---

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions       Question[]

  @@map("quizzes")
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  type      QuestionType
  order     Int
  
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]

  @@map("questions")
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String   @db.Text
  isCorrect   Boolean
  feedback    String?  @db.Text
  
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answer_options")
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}


// --- USER PROGRESS & ENROLLMENT ---

model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  userId               String
  courseId             String
  completedLessonIds   Json
  progressPercentage   Float   @default(0)
  
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
  @@map("course_progress")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED // For future use
}


// --- PLATFORM-WIDE MODELS ---

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  type        ResourceType
  category    String        @default("General")
  tags        Json          @default("[]")
  url         String?       @db.Text
  uploadDate  DateTime      @default(now())
  pin         String?

  uploaderId  String?
  uploader    User?         @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  // Self-relation for folders
  parentId    String?
  parent      Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Resource[]    @relation("FolderHierarchy")

  @@map("resources")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal")
  audience  Json
  
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CalendarEvent {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  location      String?
  start         DateTime
  end           DateTime
  allDay        Boolean  @default(false)
  audienceType  String   @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  color         String?  @default("blue")
  createdAt     DateTime @default(now())

  creatorId     String
  creator       User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  attendees     User[]   @relation("EventAttendees")

  @@map("calendar_events")
}

// --- PLATFORM SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  resourceCategories        Json      @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt

  @@map("platform_settings")
}
