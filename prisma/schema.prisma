// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- USER & AUTHENTICATION ---
model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  password                String?
  avatar                  String?   @db.VarChar(2048)
  role                    UserRole  @default(STUDENT)
  isTwoFactorEnabled      Boolean   @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime? @default(now())
  theme                   String?
  lastLogin               DateTime?

  // Gamification
  xp                      Int       @default(0)

  // Relations
  courses                 Course[]
  enrollments             Enrollment[]
  notifications           Notification[]
  announcements           Announcement[]
  createdEvents           CalendarEvent[]   @relation("EventCreators")
  attendedEvents          CalendarEvent[]   @relation("EventAttendees")
  notes                   UserNote[]
  uploadedResources       EnterpriseResource[]
  courseProgresses        CourseProgress[]
  securityLogs            SecurityLog[]
  createdLessonTemplates  LessonTemplate[]
  quizAttempts            QuizAttempt[]

  sharedResources       EnterpriseResource[] @relation("SharedResources")
  sharedForms           Form[]               @relation("SharedForms")
  createdForms          Form[]               @relation("FormCreator")
  formResponses         FormResponse[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE STRUCTURE ---

model Course {
  id               String       @id @default(cuid())
  title            String
  description      String?      @db.Text
  imageUrl         String?      @db.VarChar(2048)
  category         String?
  status           CourseStatus @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  publicationDate  DateTime?

  // Relations
  instructorId     String?
  instructor       User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules          Module[]
  enrollments      Enrollment[]
  courseProgresses CourseProgress[]

}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relations
  module        Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completedBy   LessonCompletionRecord[]
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    content   String?     @db.Text
    order     Int
    lessonId  String

    // Relations
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?
}

enum LessonType {
    TEXT
    VIDEO
    QUIZ
    FILE
}


// --- QUIZZES ---

model Quiz {
    id            String    @id @default(cuid())
    title         String
    description   String?   @db.Text
    contentBlockId String   @unique

    // Relations
    contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions     Question[]
    attempts      QuizAttempt[]
}

model Question {
    id      String        @id @default(cuid())
    text    String
    type    QuestionType
    order   Int
    quizId  String

    // Relations
    quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options   AnswerOption[]
    AnswerAttempt AnswerAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
    id          String    @id @default(cuid())
    text        String
    isCorrect   Boolean
    feedback    String?   @db.Text
    questionId  String

    // Relations
    question      Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id          String          @id @default(cuid())
    userId      String
    quizId      String
    score       Float
    submittedAt DateTime        @default(now())

    // Relations
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers     AnswerAttempt[]
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String

    // Relations
    quizAttempt     QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question        Question      @relation(fields: [questionId], references: [id], onDelete: NoAction)
    selectedOption  AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)
}


// --- USER PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  progress    CourseProgress?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}


model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String    @unique
  progressPercentage  Float?    @default(0) // Final calculated percentage
  updatedAt           DateTime  @updatedAt

  // Relations
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]
}


model LessonCompletionRecord {
    id          String      @id @default(cuid())
    progressId  String
    lessonId    String
    type        String      // 'view' or 'quiz'
    score       Float?      // Only for 'quiz' type
    completedAt DateTime    @default(now())

    // Relations
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
}

model UserNote {
    id          String   @id @default(cuid())
    userId      String
    lessonId    String
    content     String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relations
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}

// --- PLATFORM CONTENT ---

model EnterpriseResource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?  @db.VarChar(2048)
  uploadDate   DateTime @default(now())
  uploaderId   String?
  hasPin       Boolean  @default(false)
  pin          String?  // The hashed PIN
  ispublic     Boolean  @default(true)

  // Relations
  uploader    User?                @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]               @relation("SharedResources")
  // Self-relation for folders
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    EnterpriseResource[] @relation("FolderHierarchy")

}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  date        DateTime    @default(now())
  authorId    String?
  audience    Json        // Can be 'ALL', or a list of roles ['STUDENT', 'INSTRUCTOR']
  priority    String?     // e.g., 'Normal', 'Urgente'
  
  // Relations
  author      User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String? @db.VarChar(2048)
  audienceType        EventAudienceType @default(ALL)
  color               String   @default("blue")
  creatorId           String
  attachments         Json? // Array of { name: string, url: string }

  // Relations
  creator             User     @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Notification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  link         String?
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- PLATFORM SETTINGS ---

model PlatformSettings {
  id                            String      @id @default(cuid())
  platformName                  String      @default("NexusAlpri")
  allowPublicRegistration       Boolean     @default(true)
  enableEmailNotifications      Boolean     @default(true)
  require2faForAdmins           Boolean     @default(false)
  idleTimeoutMinutes            Int         @default(20)
  enableIdleTimeout             Boolean     @default(true)
  passwordMinLength             Int         @default(8)
  passwordRequireUppercase      Boolean     @default(true)
  passwordRequireLowercase      Boolean     @default(true)
  passwordRequireNumber         Boolean     @default(true)
  passwordRequireSpecialChar    Boolean     @default(true)
  resourceCategories            String      @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  updatedAt                     DateTime    @updatedAt
  
  // Theme settings
  primaryColor                  String?     @default("#6366f1") // indigo-500
  secondaryColor                String?     @default("#a5b4fc") // indigo-300
  accentColor                   String?     @default("#ec4899") // pink-500
  backgroundColorLight          String?     @default("#f8fafc") // slate-50
  primaryColorDark              String?     @default("#a5b4fc") // indigo-300
  backgroundColorDark           String?     @default("#020617") // slate-950
  fontHeadline                  String?     @default("Space Grotesk")
  fontBody                      String?     @default("Inter")
  logoUrl                       String?     @db.VarChar(2048)
  watermarkUrl                  String?     @db.VarChar(2048)
  landingImageUrl               String?     @db.VarChar(2048)
  authImageUrl                  String?     @db.VarChar(2048)
  aboutImageUrl                 String?     @db.VarChar(2048)
  benefitsImageUrl              String?     @db.VarChar(2048)
}

// --- SECURITY & AUDIT ---
model SecurityLog {
    id            String    @id @default(cuid())
    event         SecurityLogEvent
    ipAddress     String?
    userAgent     String?   @db.Text
    details       String?   @db.Text
    createdAt     DateTime  @default(now())
    userId        String?   // The user affected
    emailAttempt  String?   // For failed logins where user is unknown

    // Extra geo info
    city          String?
    country       String?
    
    // Relations
    user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT 
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

// --- GAMIFICATION ---
model Achievement {
    id            String    @id @default(cuid())
    slug          String    @unique // e.g., 'first-course-completed'
    name          String
    description   String
    icon          String?   // Icon name from lucide-react, for example
    points        Int       @default(50)

    // Relations
    users         UserAchievement[]
}

model UserAchievement {
    userId          String
    achievementId   String
    earnedAt        DateTime @default(now())

    // Relations
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}

// --- LESSON TEMPLATES ---
model LessonTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          TemplateType    @default(USER) // SYSTEM or USER
  creatorId     String?         // Null for SYSTEM templates

  // Relations
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
    id          String      @id @default(cuid())
    type        LessonType
    order       Int
    templateId  String

    // Relations
    template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMS ---
model Form {
    id            String        @id @default(cuid())
    title         String
    description   String?       @db.Text
    status        FormStatus    @default(DRAFT)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    creatorId     String

    // Relations
    creator       User          @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]        @relation("SharedForms")
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

model FormField {
    id          String    @id @default(cuid())
    formId      String
    label       String
    type        String // e.g., 'TEXT', 'MULTIPLE_CHOICE', 'RATING'
    options     Json?     // For multiple choice, etc.
    isRequired  Boolean   @default(true)
    order       Int

    // Relations
    form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormResponse {
    id          String    @id @default(cuid())
    formId      String
    userId      String
    submittedAt DateTime  @default(now())

    // Relations
    form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormAnswer {
    id            String    @id @default(cuid())
    responseId    String
    fieldId       String
    value         String    @db.Text

    // Relations
    response      FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field         FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
