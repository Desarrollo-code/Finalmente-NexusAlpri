// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// MODELO DE USUARIO Y AUTENTICACIÓN
// ==============================================================================
model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  role                UserRole  @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  courses           Course[]          @relation("CreatedCourses")
  enrollments       Enrollment[]
  courseProgress    CourseProgress[]
  resourcesUploaded Resource[]        @relation("UploadedResources")
  announcements     Announcement[]    @relation("AuthoredAnnouncements")
  notifications     Notification[]
  
  // Relaciones para Calendario
  createdEvents     CalendarEvent[]   @relation("CreatedEvents")
  attendingEvents   CalendarEvent[]   @relation("AttendingEvents")

  securityLogs      SecurityLog[]

  // Relaciones para Plantillas
  createdTemplates  LessonTemplate[] @relation("CreatedTemplates")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}


// ==============================================================================
// MODELOS DE CURSOS Y CONTENIDO
// ==============================================================================
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?      // Para cursos programados
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  instructorId    String
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  moduleId  String
  module    Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    order     Int
    content   String?     @db.Text
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    quiz      Quiz?       // Relación uno a uno con Quiz
    
    @@index([lessonId])
}


model Quiz {
    id            String      @id @default(cuid())
    title         String
    description   String?     @db.Text
    
    contentBlockId String      @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions     Question[]
}

model Question {
    id        String      @id @default(cuid())
    text      String
    type      QuestionType
    order     Int
    
    quizId    String
    quiz      Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options   AnswerOption[]
    
    @@index([quizId])
}

model AnswerOption {
    id          String  @id @default(cuid())
    text        String
    isCorrect   Boolean
    feedback    String? @db.Text
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    @@index([questionId])
}


enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}


// ==============================================================================
// MODELOS DE PROGRESO Y INSCRIPCIONES
// ==============================================================================

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress   CourseProgress? // Cada inscripción puede tener un registro de progreso

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}


model CourseProgress {
  id                 String  @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float   @default(0)
  completedAt        DateTime?
  
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Relación uno a uno con Enrollment, usando un campo único
  enrollmentId       String  @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  type        String   // 'view' or 'quiz'
  score       Float?
  completedAt DateTime @default(now())

  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
}


// ==============================================================================
// MODELOS DE RECURSOS Y COMUNICACIÓN
// ==============================================================================

model Resource {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  type         ResourceType
  category     String?
  tags         String?   // Comma-separated tags
  url          String?
  pin          String?   // Hashed PIN for sensitive resources
  uploadDate   DateTime  @default(now())

  uploaderId   String
  uploader     User      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)

  parentId     String?
  parent       Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[] @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
}


enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}


model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  audience   Json     // 'ALL', ['STUDENT'], ['INSTRUCTOR', 'ADMINISTRATOR']
  priority   String   @default("Normal") // 'Normal', 'Urgente'
  
  authorId   String
  author     User     @relation("AuthoredAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
}


model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                 String   @id @default(cuid())
  title              String
  description        String?  @db.Text
  start              DateTime
  end                DateTime
  allDay             Boolean  @default(false)
  location           String?
  videoConferenceLink String?
  attachments        Json?    // Array de { name: string, url: string }
  color              String   @default("blue")
  audienceType       Json     // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  creatorId          String
  creator            User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees          User[]   @relation("AttendingEvents")
}

model LessonTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          TemplateType
  
  creatorId     String?
  creator       User?    @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}


// ==============================================================================
// MODELO DE CONFIGURACIÓN Y AUDITORÍA
// ==============================================================================

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  // Comma-separated list of allowed domains/emails
  resourceCategories         String   @default("General,Recursos Humanos,TI,Marketing,Ventas,Legal") @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
}


model SecurityLog {
  id           String    @id @default(cuid())
  event        String    // e.g., 'SUCCESSFUL_LOGIN', 'FAILED_LOGIN_ATTEMPT', 'PASSWORD_CHANGE'
  ipAddress    String?
  details      String?   @db.Text
  createdAt    DateTime  @default(now())
  
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // To store email for failed attempts where user is not found
  emailAttempt String?

  @@index([userId])
  @@index([event])
}
