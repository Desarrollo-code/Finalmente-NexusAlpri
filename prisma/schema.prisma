// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  registeredDate        DateTime  @default(now())
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  theme                 String?
  xp                    Int?      @default(0) // Gamification: Experience Points

  // Relations
  enrollments           Enrollment[]
  createdCourses        Course[]      @relation("CreatedCourses")
  createdAnnouncements  Announcement[] @relation("CreatedAnnouncements")
  createdEvents         CalendarEvent[] @relation("CreatedEvents")
  notifications         Notification[]
  securityLogs          SecurityLog[]
  resources             Resource[]
  quizAttempts          QuizAttempt[]
  userNotes             UserNote[]
  createdTemplates      LessonTemplate[] @relation("CreatedTemplates")
  achievements          UserAchievement[]
  eventAttendees        CalendarEvent[] @relation("EventAttendees")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  category        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?
  
  // Relations
  instructorId    String?
  instructor      User?       @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  
  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes     UserNote[]
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
    id              String      @id @default(cuid())
    title           String
    description     String?
    
    // Relations
    contentBlockId  String      @unique
    contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions       Question[]
    attempts        QuizAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE // Allows one correct answer
  // Potentially add more types later, like MULTIPLE_ANSWER, TRUE_FALSE
}

model Question {
  id        String        @id @default(cuid())
  text      String
  type      QuestionType
  order     Int
  
  // Relations
  quizId    String
  quiz      Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  
  // Relations
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Float
  submittedAt DateTime @default(now())

  answers     AnswerAttempt[]
}

model AnswerAttempt {
  id              String      @id @default(cuid())
  attemptId       String
  attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId      String
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}


model CourseProgress {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  progressPercentage Float    @default(0)
  
  // Relations
  enrollmentId      String    @unique
  enrollment        Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String    // 'view' or 'quiz'
  score       Float?    // Only for quizzes

  @@unique([progressId, lessonId])
}

model UserNote {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, lessonId])
}


model Announcement {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  date        DateTime
  authorId    String
  author      User       @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
  audience    Json       // 'ALL' | UserRole[]
  priority    String?    @default("Normal") // Normal | Urgente
}


model Notification {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean    @default(false)
  createdAt   DateTime   @default(now())
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String?  @default("blue")
  audienceType        EventAudienceType @default(ALL)
  attachments         Json?    // [{ name: string, url: string }]
  
  creatorId           String
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
  createdAt           DateTime @default(now())
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Resource {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  type          ResourceType
  url           String?
  category      String
  tags          String?   // Comma-separated values
  uploadDate    DateTime  @default(now())
  pin           String?   // Hashed PIN for security
  ispublic      Boolean   @default(true)
  
  // Relations
  uploaderId    String?
  uploader      User?     @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[] @relation("FolderHierarchy")
  sharedWith    User[]
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userId        String?
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt  String?
  details       String?           @db.Text
  createdAt     DateTime          @default(now())
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


model PlatformSettings {
    id                       String    @id @default(cuid())
    platformName             String    @default("NexusAlpri")
    allowPublicRegistration  Boolean   @default(true)
    enableEmailNotifications Boolean   @default(true)
    emailWhitelist           String?   @db.Text // Comma-separated domains
    
    // Password Policy
    passwordMinLength        Int       @default(8)
    passwordRequireUppercase Boolean   @default(true)
    passwordRequireLowercase Boolean   @default(true)
    passwordRequireNumber    Boolean   @default(true)
    passwordRequireSpecialChar Boolean @default(true)

    // Security
    require2faForAdmins      Boolean   @default(false)
    enableIdleTimeout        Boolean   @default(true)
    idleTimeoutMinutes       Int       @default(20)

    // Content
    resourceCategories       String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
    
    // Theming & Branding
    primaryColor             String?   @default("#6366f1") // indigo-500
    secondaryColor           String?   @default("#a5b4fc") // indigo-300
    accentColor              String?   @default("#ec4899") // pink-500
    backgroundColorLight     String?   @default("#f8fafc") // slate-50
    primaryColorDark         String?   @default("#a5b4fc") // indigo-300
    backgroundColorDark      String?   @default("#020617") // slate-950
    fontHeadline             String?   @default("Space Grotesk")
    fontBody                 String?   @default("Inter")
    logoUrl                  String?
    watermarkUrl             String?
    landingImageUrl          String?
    authImageUrl             String?
    aboutImageUrl            String?
    testimonial1ImageUrl     String?
    testimonial2ImageUrl     String?

    updatedAt                DateTime  @updatedAt
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType    @default(USER) // SYSTEM or USER
  creatorId       String?
  creator         User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks  TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id              String      @id @default(cuid())
  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type            LessonType
  order           Int
}


// --- Gamification Models ---
model Achievement {
  id              String      @id @default(cuid())
  slug            String      @unique // e.g., 'first-course-completed'
  name            String
  description     String
  icon            String?
  points          Int         @default(0) // XP awarded for this achievement

  users           UserAchievement[]
}

model UserAchievement {
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId   String
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt        DateTime    @default(now())

  @@id([userId, achievementId])
}
