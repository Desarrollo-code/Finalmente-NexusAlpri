// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Importante para entornos sin llaves foráneas directas (ej. PlanetScale)
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS (Tipos de datos personalizados) ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELOS PRINCIPALES ---
model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isActive            Boolean              @default(true)
  registeredDate      DateTime             @default(now())
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  xp                  Int                  @default(0)

  // Relations
  createdCourses       Course[]             @relation("InstructorCourses")
  enrollments          Enrollment[]
  progress             CourseProgress[]
  quizAttempts         QuizAttempt[]
  notifications        Notification[]
  resourcesUploaded    Resource[]           @relation("UploadedResources")
  resourcesSharedWith  Resource[]           @relation("SharedResources")
  calendarEventsOwned  CalendarEvent[]      @relation("EventCreator")
  calendarEventsJoined CalendarEvent[]      @relation("EventAttendees")
  securityLogs         SecurityLog[]
  announcements        Announcement[]
  lessonTemplates      LessonTemplate[]
  notes                UserNote[]
  formResponses        FormResponse[]
  formsCreated         Form[]               @relation("FormCreator")
  formsSharedWith      Form[]               @relation("FormSharedWith")
  achievements         UserAchievement[]
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relations
  instructor   User?        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String

  // Relations
  course  Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String

  // Relations
  module        Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  sourceTemplates LessonTemplate[] @relation("LessonToTemplate")
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String

  // Relations
  lesson Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?
}

// --- MODELOS DE QUIZZES ---
model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  contentBlockId String    @unique
  maxAttempts    Int?      // Nullable: null = unlimited attempts

  // Relations
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String

  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id            String   @id @default(cuid())
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    // Relations
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId   String
    answers  AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id                String  @id @default(cuid())
    
    // Relations
    attempt           QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId         String
    question          Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId        String
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
}


// --- MODELOS DE PROGRESO ---
model Enrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())
  userId     String
  courseId   String

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt

  // Relations
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  course            Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollment        Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId      String                   @unique
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String    @id @default(cuid())
  type         String // 'view' o 'quiz'
  score        Float?
  completedAt  DateTime  @default(now())

  // Relations
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String

  @@unique([progressId, lessonId])
}

// --- BIBLIOTECA DE RECURSOS ---
model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?
  pin         String?      // Hashed PIN
  ispublic    Boolean      @default(true)

  // Relations
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?
  parent     Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?
  children   Resource[] @relation("FolderChildren")
  sharedWith User[]     @relation("SharedResources")
}

// --- CONTENIDO GLOBAL ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      DateTime @default(now())
  audience  Json
  priority  String? // 'Normal', 'Urgente'

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  audienceType        EventAudienceType
  color               String
  videoConferenceLink String?
  attachments         Json?

  // Relations
  creator              User       @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]     @relation("EventAttendees")
}

// --- CONFIGURACIÓN Y PLANTILLAS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)

  // Customization
  resourceCategories        String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  
  updatedAt                 DateTime  @updatedAt
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         // 'SYSTEM' or 'USER'
  
  // Relations
  creator        User?            @relation(fields: [creatorId], references: [id])
  creatorId      String?
  templateBlocks TemplateBlock[]
  sourceLesson   Lesson?          @relation("LessonToTemplate", fields: [sourceLessonId], references: [id], onDelete: SetNull)
  sourceLessonId String?          @unique
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String

  // Relations
  template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- MODELOS DE GAMIFICATION ---
model UserNote {
  id        String   @id @default(cuid())
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String

  @@unique([userId, lessonId])
}

model Achievement {
  id              String    @id @default(cuid())
  slug            AchievementSlug @unique
  name            String
  description     String
  icon            String    // Icon name from lucide-react
  points          Int
  
  // Relations
  UserAchievement UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  unlockedAt    DateTime @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
}


// --- SEGURIDAD ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  
  // Relations
  user         User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
}

// --- FORMULARIOS Y ENCUESTAS ---
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
    id            String         @id @default(cuid())
    title         String
    description   String?
    status        FormStatus     @default(DRAFT)
    isQuiz        Boolean        @default(false)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    // Relations
    creatorId     String
    creator       User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]         @relation("FormSharedWith")
}

model FormField {
    id            String        @id @default(cuid())
    label         String
    type          FormFieldType
    required      Boolean       @default(false)
    placeholder   String?
    options       Json?         // Para SINGLE_CHOICE y MULTIPLE_CHOICE
    order         Int
    
    // Relations
    formId        String
    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormResponse {
    id            String   @id @default(cuid())
    submittedAt   DateTime @default(now())
    score         Float?   // Score as a percentage for quizzes

    // Relations
    formId        String
    form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormAnswer {
    id            String     @id @default(cuid())
    value         String

    // Relations
    responseId    String
    response      FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId       String
    field         FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@unique([responseId, fieldId])
}
