// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  // Esta es la única fuente de verdad.
  // En local, tomará la URL del .env (conexión directa, puerto 5432).
  // En Vercel, tomará la variable de entorno de Vercel (pooler, puerto 6543).
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- MODELS ---

// Modelo de Usuario
model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  name                String
  password            String
  role                UserRole      @default(STUDENT)
  avatar              String?
  xp                  Int           @default(0)
  registeredDate      DateTime      @default(now())
  lastLogin           DateTime?
  isTwoFactorEnabled  Boolean       @default(false)
  twoFactorSecret     String?
  theme               String?
  isActive            Boolean       @default(true)

  // Relations
  coursesCreated      Course[]      @relation("CourseInstructor")
  enrollments         Enrollment[]
  notes               UserNote[]
  announcements       Announcement[]
  calendarEvents      CalendarEvent[] @relation("EventCreator")
  resourcesUploaded   EnterpriseResource[]
  quizAttempts        QuizAttempt[]
  userAchievements    UserAchievement[]
  createdForms        Form[]        @relation("CreatedForms")
  sharedForms         Form[]        @relation("SharedForms")
  formResponses       FormResponse[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
}


// --- COURSE & CONTENT ---

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId    String
  instructor      User          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id          String        @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  
  // Relations
  module        Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String

  // Relations
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

// --- QUIZZES ---

model Quiz {
  id              String        @id @default(cuid())
  title           String
  description     String?
  contentBlockId  String        @unique
  maxAttempts     Int?

  // Relations
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id      String    @id @default(cuid())
  text    String
  order   Int
  quizId  String

  // Relations
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options       AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean   @default(false)
  feedback    String?
  points      Int       @default(0)
  questionId  String

  // Relations
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id              String          @id @default(cuid())
    userId          String
    quizId          String
    attemptNumber   Int
    score           Float
    submittedAt     DateTime        @default(now())

    // Relations
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers         AnswerAttempt[]
}

model AnswerAttempt {
    id              String      @id @default(cuid())
    attemptId       String
    questionId      String
    selectedOptionId String

    // Relations
    attempt         QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption    @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


// --- PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
    id                  String      @id @default(cuid())
    userId              String
    courseId            String
    progressPercentage  Float       @default(0)
    completedAt         DateTime?
    enrollmentId        String      @unique

    // Relations
    enrollment          Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    completedLessons    LessonCompletionRecord[]
    
    @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String      @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view', 'quiz', 'video'
    score       Float?
    completedAt DateTime    @default(now())

    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}


// --- GLOBAL CONTENT ---

model EnterpriseResource {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String // FOLDER, DOCUMENT, VIDEO, EXTERNAL_LINK, etc.
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime  @default(now())
  pin         String?   // PIN encriptado
  ispublic    Boolean   @default(true)
  
  // Relations
  uploaderId  String?
  uploader    User?     @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  // Self-relation for folders
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children     EnterpriseResource[] @relation("FolderChildren")

  // Many-to-many for sharing
  sharedWith  User[]
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  date      DateTime  @default(now())
  audience  String    // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR
  priority  String    @default("Normal") // Normal, Urgente

  // Relations
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String @id @default(cuid())
    title               String
    description         String?
    start               DateTime
    end                 DateTime
    allDay              Boolean @default(false)
    location            String?
    audienceType        String // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
    color               String?
    videoConferenceLink String?
    attachments         Json[] // Array de objetos { name: string, url: string }

    // Relations
    creatorId           String
    creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]   // Relación muchos a muchos para asistentes específicos
}

model UserNote {
    id          String @id @default(cuid())
    userId      String
    lessonId    String
    content     String @db.Text
    color       String @default("yellow") // 'yellow', 'blue', 'green', 'pink'
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lessonId])
}


// --- GAMIFICATION ---

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

model Achievement {
    id              String @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    icon            String
    points          Int

    // Relations
    unlockedBy      UserAchievement[]
}

model UserAchievement {
    userId          String
    achievementId   String
    unlockedAt      DateTime @default(now())

    // Relations
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@id([userId, achievementId])
}


// --- PLATFORM SETTINGS ---

model PlatformSettings {
  id                      String    @id @default(cuid())
  platformName            String    @default("NexusAlpri")
  logoUrl                 String?
  watermarkUrl            String?
  landingImageUrl         String?
  authImageUrl            String?
  aboutImageUrl           String?
  benefitsImageUrl        String?

  // Security
  allowPublicRegistration Boolean   @default(true)
  emailWhitelist          String?   // Comma-separated list of allowed domains
  require2faForAdmins     Boolean   @default(false)
  enableIdleTimeout       Boolean   @default(true)
  idleTimeoutMinutes      Int       @default(20)

  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  // Content
  resourceCategories      String    @default("General,Recursos Humanos,TI,Ventas")

  // Notifications
  enableEmailNotifications Boolean  @default(true)

  // Theming
  primaryColor          String?   @default("#6366f1")
  secondaryColor        String?   @default("#a5b4fc")
  accentColor           String?   @default("#ec4899")
  backgroundColorLight  String?   @default("#f8fafc")
  primaryColorDark      String?   @default("#a5b4fc")
  backgroundColorDark   String?   @default("#020617")
  fontHeadline          String?   @default("Space Grotesk")
  fontBody              String?   @default("Inter")

  updatedAt             DateTime  @updatedAt
}

// --- SECURITY LOGGING ---
enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model SecurityLog {
    id           String           @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    emailAttempt String?
    ipAddress    String?
    userAgent    String?
    createdAt    DateTime         @default(now())
    details      String?
    country      String?
    city         String?

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- TEMPLATES ---
enum TemplateType {
    SYSTEM
    USER
}

model LessonTemplate {
    id              String @id @default(cuid())
    name            String
    description     String?
    type            TemplateType @default(USER)
    
    // Relations
    creatorId       String?
    creator         User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    templateBlocks  TemplateBlock[]
}

model TemplateBlock {
    id              String @id @default(cuid())
    type            LessonType
    order           Int
    templateId      String

    // Relations
    template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMS & SURVEYS ---
model Form {
    id            String    @id @default(cuid())
    title         String
    description   String?
    status        FormStatus @default(DRAFT)
    isQuiz        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    creatorId     String
    creator       User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]         @relation("SharedForms")
}

model FormField {
    id            String        @id @default(cuid())
    label         String
    type          FormFieldType
    options       Json?         // [{ id, text, isCorrect, points }, ...]
    required      Boolean       @default(false)
    placeholder   String?
    order         Int
    
    // Relations
    formId        String
    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormResponse {
    id            String        @id @default(cuid())
    formId        String
    userId        String
    submittedAt   DateTime      @default(now())
    score         Float?        // Percentage score if it's a quiz

    // Relations
    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormAnswer {
    id            String        @id @default(cuid())
    responseId    String
    fieldId       String
    value         String        @db.Text

    // Relations
    response      FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field         FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
