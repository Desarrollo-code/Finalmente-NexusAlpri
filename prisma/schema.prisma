
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS (Tipos de datos personalizados) ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

// --- MODELOS PRINCIPALES ---
model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  password                String
  role                    UserRole                 @default(STUDENT)
  avatar                  String?
  registeredDate          DateTime                 @default(now())
  xp                      Int                      @default(0)
  isActive                Boolean                  @default(true)
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorSecret         String?
  theme                   String?
  enrollments             Enrollment[]
  createdCourses          Course[]                 @relation("InstructorCourses")
  uploadedResources       Resource[]               @relation("UploadedResources")
  sharedResources         Resource[]               @relation("SharedResources")
  createdAnnouncements    Announcement[]
  createdEvents           CalendarEvent[]          @relation("EventCreator")
  eventsAttending         CalendarEvent[]          @relation("EventAttendees")
  courseProgress          CourseProgress[]         @relation("UserProgress")
  userNotes               UserNote[]
  notifications           Notification[]
  achievements            UserAchievement[]
  createdForms            Form[]                   @relation("FormCreator")
  sharedForms             Form[]                   @relation("FormSharedWith")
  formResponses           FormResponse[]
  quizAttempts            QuizAttempt[]
  securityLogs            SecurityLog[]
  createdLessonTemplates  LessonTemplate[]         @relation("TemplateCreator")
}

model Course {
  id              String           @id @default(cuid())
  title           String           @db.VarChar(255)
  description     String           @db.Text
  category        String?
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")
}

model Module {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id              String                   @id @default(cuid())
  title           String                   @db.VarChar(255)
  order           Int
  moduleId        String
  module          Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]
  notes           UserNote[]
  lessonTemplates LessonTemplate[]         @relation("LessonToTemplate")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id          String         @id @default(cuid())
  text        String
  type        QuestionType   @default(SINGLE_CHOICE)
  order       Int
  quizId      String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[] @relation("QuestionAttempts")
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean         @default(false)
  feedback    String?
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]
}

// --- Modelos de Relaci√≥n y Progreso ---

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String?                  @unique
  progressPercentage  Float                    @default(0)
  completedAt         DateTime?
  lastActivity        DateTime?                @updatedAt
  user                User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course              Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  lessonId     String
  type         String // 'view' or 'quiz'
  score        Float?
  completedAt  DateTime        @default(now())
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation("QuestionAttempts", fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  field            FormField?   @relation(fields: [formFieldId], references: [id])
  formFieldId      String?
  response         FormResponse?   @relation(fields: [formResponseId], references: [id])
  formResponseId   String?
}

// --- Contenido Global ---
model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  url          String?
  tags         String?
  uploadDate   DateTime   @default(now())
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  uploaderId   String?
  uploader     User?      @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  sharedWith   User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  String   // 'ALL' o un array JSON de roles
  priority  String   @default("Normal")
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  videoConferenceLink String?
  color               String             @default("blue")
  audienceType        EventAudienceType  @default(ALL)
  creatorId           String
  creator             User               @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("EventAttendees")
  attachments         Json?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Gamificaci√≥n ---
model Achievement {
  id             String            @id @default(cuid())
  slug           AchievementSlug   @unique
  name           String
  description    String
  icon           String
  points         Int
  userUnlocks    UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@id([userId, achievementId])
}

// --- MODELOS PARA FORMULARIOS ---
model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]   @relation("FormSharedWith")
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean  @default(false)
  placeholder String?
  options     Json? // Para select, radio, checkbox
  order       Int
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime        @default(now())
  score       Float? // Puntuaci√≥n si es un quiz
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]
}

// --- Auditor√≠a y Configuraci√≥n ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                        String  @id @default(cuid())
  platformName              String  @default("NexusAlpri")
  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String? // Comma-separated domains
  require2faForAdmins       Boolean @default(false)
  idleTimeoutMinutes        Int     @default(20)
  enableIdleTimeout         Boolean @default(true)
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(false)
  resourceCategories        String  @default("General,Recursos Humanos,TI,Marketing") @db.Text
  primaryColor              String? @default("#6366f1")
  secondaryColor            String? @default("#a5b4fc")
  accentColor               String? @default("#ec4899")
  backgroundColorLight      String? @default("#f8fafc")
  primaryColorDark          String? @default("#a5b4fc")
  backgroundColorDark       String? @default("#020617")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model LessonTemplate {
  id           String         @id @default(cuid())
  name         String
  description  String?
  type         String         @default("USER") // "USER" o "SYSTEM"
  creatorId    String?
  creator      User?          @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons      Lesson[]       @relation("LessonToTemplate")
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
