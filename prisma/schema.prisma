// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTHENTICATION ---

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  name                 String
  password             String
  role                 UserRole      @default(STUDENT)
  avatar               String?
  isTwoFactorEnabled   Boolean       @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime?     @default(now())
  xp                   Int           @default(0)
  isActive             Boolean       @default(true) // Added for soft-delete/inactivation
  lastLogin            DateTime?
  fontHeadline         String?
  fontBody             String?
  theme                String?
  // Relations
  courses              Course[]      @relation("CreatedCourses")
  enrollments          Enrollment[]
  progress             CourseProgress[]
  announcements        Announcement[]
  notifications        Notification[]
  notes                UserNote[]
  uploadedResources    Resource[]    @relation("UploadedResources") // Renamed relation
  sharedResources      Resource[]    @relation("SharedResources") // Renamed relation
  createdEvents        CalendarEvent[] @relation("CreatedEvents")
  attendedEvents       CalendarEvent[] @relation("AttendedEvents")
  createdForms         Form[]        @relation("CreatedForms")
  sharedForms          Form[]        @relation("SharedForms")
  formResponses        FormResponse[]
  createdTemplates     LessonTemplate[]
  unlockedAchievements UserAchievement[]
  quizAttempts         QuizAttempt[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model SecurityLog {
  id           String             @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?            @db.Text
  createdAt    DateTime           @default(now())
  // Relations
  user         User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  emailAttempt String?
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- COURSE STRUCTURE ---

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relations
  instructor      User?            @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId    String?
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  // Relations
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id       String    @id @default(cuid())
  title    String
  order    Int
  moduleId String
  // Relations
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  templates     LessonTemplate[] // A lesson can be saved as a template
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  // Relations
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}


// --- QUIZZES ---

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?      // Null for unlimited
  contentBlockId String    @unique
  // Relations
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean @default(false)
  feedback    String?
  questionId  String
  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// Model to track each full attempt at a quiz
model QuizAttempt {
    id            String @id @default(cuid())
    attemptNumber Int
    score         Float // Score for this attempt
    submittedAt   DateTime @default(now())

    // Relations
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    quiz          Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId        String

    answers       AnswerAttempt[]

    @@index([quizId])
}

// Model to track the answer for each question in an attempt
model AnswerAttempt {
    id        String @id @default(cuid())

    // Relations
    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId       String
    question        Question @relation(fields: [questionId], references: [id], onDelete: NoAction)
    questionId      String
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)
    selectedOptionId String
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


// --- USER PROGRESS ---

model Enrollment {
  id          String         @id @default(cuid())
  enrolledAt  DateTime       @default(now())
  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float?
  completedAt        DateTime?
  // Relations
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id           String @id @default(cuid())
    completedAt  DateTime @default(now())
    type         String // "view" or "quiz"
    score        Float? // Score if it was a quiz

    // Relations
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    progressId   String
    lesson       Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId     String

    @@unique([progressId, lessonId])
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String
    
    @@unique([userId, lessonId])
}


// --- GLOBAL CONTENT ---

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        String
  url         String?
  category    String?
  tags        String?
  uploadDate  DateTime @default(now())
  pin         String?
  parentId    String?
  ispublic    Boolean  @default(true)
  // Relations
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?
  parent     Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children   Resource[] @relation("FolderHierarchy")
  sharedWith User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     @default("ALL")
  priority  String?  @default("Normal")
  // Relations
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  String?
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model CalendarEvent {
    id                  String   @id @default(cuid())
    title               String
    description         String?  @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean  @default(false)
    color               String?
    videoConferenceLink String?
    attachments         Json?
    audienceType        String   // "ALL", "ADMINISTRATOR", "INSTRUCTOR", "STUDENT", "SPECIFIC"
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    // Relations
    creator              User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId            String
    attendees            User[]     @relation("AttendedEvents")
}

// --- PLATFORM SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String? // Comma-separated list of allowed emails/domains
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories        String?
  updatedAt                 DateTime  @updatedAt
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}


// --- GAMIFICATION ---
model Achievement {
    id                  String   @id @default(cuid())
    slug                AchievementSlug @unique
    name                String
    description         String
    points              Int
    icon                String?
    
    // Relations
    users               UserAchievement[]
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

model UserAchievement {
    id             String   @id @default(cuid())
    unlockedAt     DateTime @default(now())

    // Relations
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    achievement    Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    achievementId  String

    @@unique([userId, achievementId])
}


// --- TEMPLATES ---
model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType   @default(USER) // SYSTEM or USER
  
  // Relations
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?        
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMS & SURVEYS ---
model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       FormStatus @default(DRAFT)
  isQuiz       Boolean  @default(false) // True if it's a graded quiz
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  creatorId    String
  creator      User       @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]     @relation("SharedForms")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For select, radio, checkbox
  order       Int
  
  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
  DATE
  RATING
}

model FormResponse {
  id           String   @id @default(cuid())
  submittedAt  DateTime @default(now())
  score        Float?   // Score if the form is a quiz
  
  // Relations
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  value      String   @db.Text
  
  // Relations
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}