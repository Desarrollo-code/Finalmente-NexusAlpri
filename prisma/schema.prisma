// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  name                String
  password            String
  avatar              String?
  role                UserRole     @default(STUDENT)
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime     @default(now())
  theme               String?      @default("dark")
  xp                  Int          @default(0) // For gamification

  // Relations
  coursesCreated      Course[]         @relation("CreatedBy")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]    @relation("UserEvents")
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]  @relation("CreatedBy")
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  uploadedResources   EnterpriseResource[]
  notifications       Notification[]
  userNotes           UserNote[]
  achievements        UserAchievement[]
  
  // Forms
  createdForms        Form[]           @relation("CreatedForms")
  formResponses       FormResponse[]
  sharedForms         Form[]           @relation("SharedForms") // Relation to forms shared with this user

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE CONTENT MODELS ---

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?       @relation("CreatedBy", fields: [instructorId], references: [id])
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  courseId    String
  
  // Relations
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  
  // Relations
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
  
  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  
  // Relations
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id            String          @id @default(cuid())
  title         String
  description   String?
  contentBlockId String         @unique
  
  // Relations
  contentBlock  ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id          String        @id @default(cuid())
  text        String
  type        QuestionType  @default(SINGLE_CHOICE)
  order       Int
  quizId      String
  
  // Relations
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]

  @@index([quizId])
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  
  // Relations
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


// --- USER PROGRESS & INTERACTION MODELS ---

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String      @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String      @unique
  progressPercentage  Float?
  
  // Relations
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String   // "view" or "quiz"
    score       Float?   // Only for quiz types
    completedAt DateTime @default(now())
    
    // Relations
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}


model QuizAttempt {
  id          String          @id @default(cuid())
  userId      String
  quizId      String
  score       Float           // Percentage score
  submittedAt DateTime        @default(now())

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                  String        @id @default(cuid())
  quizAttemptId       String
  questionId          String
  selectedOptionId    String

  // Relations
  quizAttempt       QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}

model UserNote {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- GLOBAL CONTENT & SETTINGS MODELS ---

model EnterpriseResource {
  id          String          @id @default(cuid())
  title       String
  description String?         @db.Text
  type        ResourceType    @default(OTHER)
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime        @default(now())
  uploaderId  String?
  pin         String?         // Hashed PIN for security
  
  // Relations for folder structure
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    EnterpriseResource[] @relation("FolderHierarchy")

  // Sharing
  ispublic    Boolean          @default(true)
  sharedWith  User[]           @relation("SharedResources")

  // Relations
  uploader    User?           @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  @@index([parentId])
  @@index([uploaderId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  date        DateTime    @default(now())
  audience    Json
  priority    String?     @default("Normal")
  authorId    String

  //Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?     @db.Text
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean     @default(false)
  color               String?     @default("blue")
  audienceType        EventAudienceType @default(ALL)
  attachments         Json?
  
  // Relations
  creatorId           String
  creator             User        @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]      @relation("EventAttendees")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                         String      @id @default(cuid())
  platformName               String      @default("NexusAlpri")
  allowPublicRegistration    Boolean     @default(true)
  enableEmailNotifications   Boolean     @default(true)
  resourceCategories         String      @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  passwordMinLength          Int         @default(8)
  passwordRequireUppercase   Boolean     @default(true)
  passwordRequireLowercase   Boolean     @default(true)
  passwordRequireNumber      Boolean     @default(true)
  passwordRequireSpecialChar Boolean     @default(true)
  enableIdleTimeout          Boolean     @default(true)
  idleTimeoutMinutes         Int         @default(20)
  require2faForAdmins        Boolean     @default(false)
  
  // New Theme fields
  primaryColor        String?     @default("#6366f1")
  secondaryColor      String?     @default("#a5b4fc")
  accentColor         String?     @default("#ec4899")
  backgroundColorLight String?    @default("#f8fafc")
  primaryColorDark    String?     @default("#a5b4fc")
  backgroundColorDark String?     @default("#020617")
  fontHeadline        String?     @default("Space Grotesk")
  fontBody            String?     @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?

  updatedAt           DateTime    @updatedAt
}

model SecurityLog {
  id            String    @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userId        String?
  emailAttempt  String?
  details       String?   @db.Text
  createdAt     DateTime  @default(now())
  userAgent     String?
  country       String?
  city          String?

  // Relations
  user          User?     @relation("UserEvents", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType    @default(USER)
  creatorId       String?
  
  // Relations
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String      @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  // Relations
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- GAMIFICATION MODELS ---
model Achievement {
  id          String            @id @default(cuid())
  slug        String            @unique
  name        String
  description String
  icon        String?
  points      Int               @default(50)
  
  //Relations
  users       UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  //Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}


// --- FORMS MODELS ---

model Form {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  status        FormStatus  @default(DRAFT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  creatorId     String
  creator       User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]      @relation("SharedForms") // Users who can view results
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String      @id @default(cuid())
  formId      String
  label       String
  fieldType   String // e.g., 'TEXT', 'MULTIPLE_CHOICE', 'CHECKBOX', 'SCALE'
  options     Json?      // For multiple choice, etc.
  order       Int
  
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id          String      @id @default(cuid())
  formId      String
  userId      String?     // Can be anonymous
  submittedAt DateTime    @default(now())
  
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  answers     FormAnswer[]
  
  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id              String      @id @default(cuid())
  responseId      String
  fieldId         String
  value           String?     @db.Text
  
  response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field           FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}