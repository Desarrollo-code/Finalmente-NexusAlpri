// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// ENUMS
// --------------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --------------------------------------
// MODELS
// --------------------------------------

model User {
  id                     String            @id @default(uuid())
  email                  String            @unique
  name                   String
  password               String
  avatar                 String?
  role                   UserRole          @default(STUDENT)
  isTwoFactorEnabled     Boolean           @default(false)
  twoFactorSecret        String?
  isActive               Boolean           @default(true)
  registeredDate         DateTime          @default(now())
  xp                     Int               @default(0)

  // Relations
  createdCourses         Course[]          @relation("CreatedCourses")
  enrollments            Enrollment[]
  courseProgress         CourseProgress[]
  notes                  UserNote[]
  quizAttempts           QuizAttempt[]
  uploadedResources      Resource[]        @relation("UploadedResources")
  announcements          Announcement[]
  createdEvents          CalendarEvent[]   @relation("EventCreator")
  attendedEvents         CalendarEvent[]   @relation("EventAttendees")
  notifications          Notification[]
  achievements           UserAchievement[]
  createdTemplates       LessonTemplate[]  @relation("CreatedTemplates")
  formResponses          FormResponse[]
  createdForms           Form[]            @relation("CreatedForms")
  sharedForms            Form[]            @relation("SharedForms")
  sharedResources        Resource[]        @relation("SharedResources")
  securityLogs           SecurityLog[]     @relation("SecurityLogs")

  @@map("users")
}


model Course {
  id               String         @id @default(uuid())
  title            String
  description      String         @db.Text
  imageUrl         String?
  category         String?
  status           CourseStatus   @default(DRAFT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  publicationDate  DateTime?

  // Relations
  instructorId     String
  instructor       User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules          Module[]
  enrollments      Enrollment[]

  @@map("courses")
}

model Module {
  id        String   @id @default(uuid())
  title     String
  order     Int
  courseId  String
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id         String   @id @default(uuid())
  title      String
  order      Int
  moduleId   String

  // Relations
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]

  @@map("lessons")
}

model ContentBlock {
  id       String     @id @default(uuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String

  // Relations
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?      // One-to-one relation with Quiz

  @@map("content_blocks")
}

model Quiz {
  id             String        @id @default(uuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  
  // Relations
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id      String         @id @default(uuid())
  text    String
  order   Int
  quizId  String

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@map("questions")
}

model AnswerOption {
  id           String    @id @default(uuid())
  text         String
  isCorrect    Boolean
  feedback     String?
  points       Int       @default(10)
  questionId   String
  
  // Relations
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]

  @@map("answer_options")
}

// --- USER PROGRESS & INTERACTIONS ---

model Enrollment {
  id           String         @id @default(uuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(uuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?

  // Relations
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment       Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
  id           String    @id @default(uuid())
  progressId   String
  lessonId     String
  type         String    // 'view', 'quiz', 'video', etc.
  score        Float?    // Score obtained, e.g., for a quiz
  completedAt  DateTime  @default(now())

  // Relations
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id            String          @id @default(uuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String       @id @default(uuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  
  // Relations
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Restrict)
  
  @@map("answer_attempts")
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}


// --- GLOBAL CONTENT ---

model Resource {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String
  hasPin       Boolean      @default(false)
  pin          String?
  ispublic     Boolean      @default(true)

  // Self-relation for folders
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")

  // Relations to User
  uploader     User         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  sharedWith   User[]       @relation("SharedResources")

  @@map("resources")
}


model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  String   // "ALL" or JSON array of roles: ["STUDENT", "INSTRUCTOR"]
  priority  String   @default("Normal")
  authorId  String
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model CalendarEvent {
  id                  String   @id @default(uuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String   @default("blue")
  attachments         Json[]
  audienceType        String   // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR", "SPECIFIC"
  creatorId           String
  
  // Relations
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@map("calendar_events")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// --- SYSTEM & SETTINGS ---

model PlatformSettings {
  id                        String  @id @default(uuid())
  platformName              String
  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String? // Comma-separated domains
  
  // Password Policy
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  
  // Security
  enableIdleTimeout         Boolean @default(true)
  idleTimeoutMinutes        Int     @default(20)
  require2faForAdmins       Boolean @default(false)

  // Content
  resourceCategories        String  @db.Text // Comma-separated list
  
  // Branding & Theme
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt

  @@map("platform_settings")
}

model SecurityLog {
  id           String           @id @default(uuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?          @db.Text
  userId       String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
  
  // Relations
  user         User?            @relation("SecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model Achievement {
  id          String            @id @default(uuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@id([userId, achievementId])
  @@map("user_achievements")
}


model LessonTemplate {
  id             String          @id @default(uuid())
  name           String
  description    String?
  type           String          // SYSTEM or USER
  creatorId      String?
  
  // Relations
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  
  @@map("lesson_templates")
}

model TemplateBlock {
  id         String   @id @default(uuid())
  templateId String
  type       String   // TEXT, VIDEO, QUIZ, etc.
  order      Int
  
  // Relations
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}


model Form {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")

  @@map("forms")
}

model FormField {
  id           String        @id @default(uuid())
  formId       String
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  placeholder  String?
  options      Json          @default("[]") // [{ "id": "...", "text": "...", "isCorrect": false, "points": 10 }]
  order        Int
  
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormResponseAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id           String        @id @default(uuid())
  formId       String
  userId       String
  submittedAt  DateTime      @default(now())
  score        Float?        // Only for quizzes
  
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      FormResponseAnswer[]

  @@map("form_responses")
}

model FormResponseAnswer {
  id           String      @id @default(uuid())
  responseId   String
  fieldId      String
  value        String      @db.Text
  
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("form_response_answers")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
