// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?     @default(now())
  theme                 String?
  xp                    Int?          @default(0)
  isActive              Boolean       @default(true)
  createdCourses        Course[]      @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  notes                 UserNote[]
  notifications         Notification[]
  uploadedResources     Resource[]    @relation("Uploader")
  createdEvents         CalendarEvent[] @relation("Creator")
  attendedEvents        CalendarEvent[] @relation("Attendees")
  securityLogs          SecurityLog[]
  userAchievements      UserAchievement[]
  createdForms          Form[]        @relation("FormCreator")
  formResponses         FormResponse[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@orderBy([order])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completionRecords LessonCompletionRecord[]

  @@orderBy([order])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@orderBy([order])
}

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int? // null for infinite
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String         @db.Text
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@orderBy([order])
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  feedback   String?
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cfuid())
  userId             String
  courseId           String
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // 'view', 'quiz', 'video'
    score       Float? // Score for quizzes
    completedAt DateTime @default(now())
    
    @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float // Percentage score
    submittedAt   DateTime @default(now())

    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id               String @id @default(cuid())
    attemptId        String
    attempt          QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
    id          String   @id @default(cuid())
    userId      String
    lessonId    String
    content     String   @db.Text
    color       String   @default("yellow")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lessonId])
}


model Resource {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    type        ResourceType
    category    String?
    tags        String?
    url         String?
    uploadDate  DateTime @default(now())
    uploaderId  String?
    uploader    User?    @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
    parentId    String?
    parent      Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
    children    Resource[] @relation("FolderChildren")
    pin         String? // Hashed PIN
    ispublic    Boolean  @default(true)
    sharedWith  User[]   @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // "ALL", "STUDENT", etc. or JSON array of roles
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?           @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String            @default("blue")
  videoConferenceLink String?
  attachments         Json[]
  creatorId           String
  creator             User              @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("Attendees")
}

model PlatformSettings {
    id                       String    @id @default(cuid())
    platformName             String    @default("NexusAlpri")
    allowPublicRegistration  Boolean   @default(true)
    enableEmailNotifications Boolean   @default(true)
    emailWhitelist           String?   // Comma-separated list of allowed domains
    require2faForAdmins      Boolean   @default(false)
    idleTimeoutMinutes       Int       @default(20)
    enableIdleTimeout        Boolean   @default(true)
    passwordMinLength        Int       @default(8)
    passwordRequireUppercase Boolean   @default(true)
    passwordRequireLowercase Boolean   @default(true)
    passwordRequireNumber    Boolean   @default(true)
    passwordRequireSpecialChar Boolean @default(true)
    resourceCategories       String?   @db.Text // Comma-separated
    updatedAt                DateTime  @updatedAt
    // Theme
    primaryColor             String?
    secondaryColor           String?
    accentColor              String?
    backgroundColorLight     String?
    fontHeadline             String?
    fontBody                 String?
    primaryColorDark         String?
    backgroundColorDark      String?
    logoUrl                  String?
    watermarkUrl             String?
    landingImageUrl          String?
    authImageUrl             String?
    aboutImageUrl            String?
    benefitsImageUrl         String?
}

model SecurityLog {
    id            String    @id @default(cuid())
    event         SecurityLogEvent
    ipAddress     String?
    userAgent     String?
    userId        String?
    user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
    emailAttempt  String?
    details       String?
    createdAt     DateTime  @default(now())
    country       String?
    city          String?

    @@index([createdAt])
    @@index([event])
}

model LessonTemplate {
  id              String @id @default(cuid())
  name            String
  description     String?
  type            String @default("USER") // SYSTEM or USER
  creatorId       String?
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int
  
  @@orderBy([order])
}

model Achievement {
  id               String            @id @default(cuid())
  slug             AchievementSlug   @unique
  name             String
  description      String
  icon             String?
  points           Int
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Form {
    id              String      @id @default(cuid())
    title           String
    description     String?     @db.Text
    status          FormStatus      @default(DRAFT)
    isQuiz          Boolean     @default(false)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    creatorId       String
    creator         User        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]      @relation("SharedForms")
}

model FormField {
    id          String          @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json?           // For SINGLE_CHOICE, MULTIPLE_CHOICE
    required    Boolean         @default(false)
    placeholder String?
    order       Int
    formId      String
    form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]

    @@orderBy([order])
}

model FormResponse {
    id           String       @id @default(cuid())
    formId       String
    form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId       String
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt  DateTime     @default(now())
    score        Float?       // Only if form is a quiz
    answers      FormAnswer[]
}

model FormAnswer {
    id         String       @id @default(cuid())
    responseId String
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId    String
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value      String       @db.Text // Can be single value or JSON array for multiple choices
}
