// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String
  email               String         @unique
  password            String
  avatar              String?
  role                UserRole       @default(STUDENT)
  isTwoFactorEnabled  Boolean        @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime       @default(now())
  announcements       Announcement[]
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  uploadedResources   Resource[]
  calendarEvents      CalendarEvent[] @relation("EventAttendees")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id       String      @id @default(cuid())
  title    String
  content  String?     @db.Text
  type     LessonType
  order    Int
  moduleId String
  module   Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quiz     Quiz?
  progress CourseProgress[] @relation("CompletedLessons")


  @@index([moduleId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  lessonId    String     @unique
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}


model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessonIds String   @db.Text
  progressPercentage Float    @default(0)
  completedLessons   Lesson[] @relation("CompletedLessons")

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String
  date     DateTime @default(now())
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience String // JSON string of UserRole[] or "ALL"

  @@index([authorId])
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?
  start        DateTime
  end          DateTime
  allDay       Boolean
  location     String?
  audienceType EventAudienceType @default(SPECIFIC)
  attendees    User[]           @relation("EventAttendees")
  color        String?          @default("default")
}

enum EventAudienceType {
  ALL
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
  SPECIFIC
}

model Resource {
  id          String         @id @default(cuid())
  title       String
  type        ResourceType
  url         String?
  category    String
  tags        String         @db.Text
  uploadDate  DateTime       @default(now())
  uploaderId  String?
  uploader    User?          @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  pin         String?
  parentId    String?
  parent      Resource?      @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]     @relation("FolderHierarchy")
  
  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories         String   @db.Text
  updatedAt                  DateTime @updatedAt
}
