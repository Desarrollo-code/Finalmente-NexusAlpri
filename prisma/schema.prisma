// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// ENUMS
// -------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// -------------------
// MODELS
// -------------------

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  avatar                  String?
  role                    UserRole                @default(STUDENT)
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime                @default(now())
  theme                   String?                 @default("dark")
  xp                      Int                     @default(0)
  // Relations
  courses                 Course[]
  enrollments             Enrollment[]
  createdResources        EnterpriseResource[]
  createdAnnouncements    Announcement[]
  createdEvents           CalendarEvent[]
  notifications           Notification[]
  notes                   UserNote[]
  courseProgresses        CourseProgress[]
  securityLogs            SecurityLog[]
  quizAttempts            QuizAttempt[]
  createdLessonTemplates  LessonTemplate[]
  createdForms            Form[]                  @relation("FormCreator")
  sharedForms             Form[]                  @relation("FormSharedWith")
  formResponses           FormResponse[]
  sharedResources         EnterpriseResource[]    @relation("SharedResources")
  achievements            UserAchievement[]
  eventAttendees          CalendarEvent[]         @relation("EventAttendees")
}

model Course {
  id              String       @id @default(cuid())
  title           String       @db.VarChar(255)
  description     String?      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructorId String?
  instructor   User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules      Module[]
  enrollments  Enrollment[]
  progresses   CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?
}

model Quiz {
  id           String   @id @default(cuid())
  title        String
  description  String?
  contentBlockId String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(SINGLE_CHOICE)
  order     Int
  quizId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  submittedAt DateTime @default(now())

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers AnswerAttempt[]
}

model AnswerAttempt {
    id String @id @default(cuid())
    attemptId String
    questionId String
    selectedOptionId String

    // Relations
    attempt QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float?
  completedAt        DateTime?
  // Relations
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    lessonId    String
    type        String // 'view' or 'quiz'
    score       Float? // Only for quizzes
    completedAt DateTime @default(now())

    // Relations
    progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String
  tags         String?
  url          String?
  pin          String? // Hashed PIN
  uploadDate   DateTime     @default(now())
  ispublic     Boolean      @default(true)

  // Relations for folder structure
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    EnterpriseResource[] @relation("FolderHierarchy")

  // Relation to uploader
  uploaderId  String?
  uploader    User?                @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]               @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal") // e.g., 'Normal', 'Urgente'
  audience  Json     // ['ALL', 'STUDENT', 'INSTRUCTOR', etc.]

  // Relations
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  audienceType        EventAudienceType @default(ALL)
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  color               String   @default("blue")
  videoConferenceLink String?
  attachments         Json     @default("[]")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  attendees User[]  @relation("EventAttendees")
}

// --- Platform Configuration ---
model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  require2faForAdmins        Boolean   @default(false)
  emailWhitelist             String?   @db.Text
  idleTimeoutMinutes         Int       @default(20)
  enableIdleTimeout          Boolean   @default(true)
  // Password policy
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  // Categories
  resourceCategories         String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  // Branding
  primaryColor               String    @default("#6366f1")
  secondaryColor             String    @default("#a5b4fc")
  accentColor                String    @default("#ec4899")
  backgroundColorLight       String    @default("#f8fafc")
  primaryColorDark           String    @default("#a5b4fc")
  backgroundColorDark        String    @default("#020617")
  fontHeadline               String    @default("Space Grotesk")
  fontBody                   String    @default("Inter")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  updatedAt                  DateTime  @updatedAt
}

model SecurityLog {
    id            String            @id @default(cuid())
    event         SecurityLogEvent
    userId        String?
    emailAttempt  String?
    ipAddress     String?
    userAgent     String?
    country       String?
    city          String?
    details       String?           @db.Text
    createdAt     DateTime          @default(now())

    // Relations
    user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Forms ---
model Form {
  id           String      @id @default(cuid())
  title        String
  description  String?
  status       FormStatus  @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  creatorId   String?
  creator     User?        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]       @relation("FormSharedWith") // Users who can view results
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  label       String
  description String?
  type        String   // E.g., 'TEXT', 'MULTIPLE_CHOICE', 'RATING'
  options     Json?    // For multiple choice, dropdown, etc.
  required    Boolean  @default(false)
  order       Int

  // Relations
  form    Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers FormAnswer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())

  // Relations
  form    Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text

  // Relations
  response FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field    FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

// --- Gamification ---

model Achievement {
    id            String    @id @default(cuid())
    slug          String    @unique // e.g., 'first-course-completed'
    name          String
    description   String
    icon          String?
    points        Int       @default(0)

    // Relations
    userAchievements UserAchievement[]
}

model UserAchievement {
    id            String    @id @default(cuid())
    userId        String
    achievementId String
    earnedAt      DateTime  @default(now())

    // Relations
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}


// --- Lesson Templates ---

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         // 'SYSTEM' or 'USER'
  creatorId      String?

  // Relations
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String      @id @default(cuid())
  templateId  String
  type        LessonType  // Re-uses LessonType enum
  order       Int

  // Relations
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
