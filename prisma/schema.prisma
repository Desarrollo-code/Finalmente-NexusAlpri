// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- MODELS ---

// --- Core Models: User and Platform Configuration ---
model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  name                String
  password            String
  role                UserRole     @default(STUDENT)
  avatar              String?
  xp                  Int          @default(0)
  registeredDate      DateTime?    @default(now())
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  isActive            Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  courses             Course[]                @relation("CourseInstructor")
  enrollments         Enrollment[]
  notifications       Notification[]
  announcements       Announcement[]
  uploadedResources   Resource[]              @relation("UploadedResources")
  sharedResources     Resource[]              @relation("SharedResources")
  notes               UserNote[]
  calendarEvents      CalendarEvent[]
  quizAttempts        QuizAttempt[]
  formResponses       FormResponse[]
  createdForms        Form[]                  @relation("FormCreator")
  sharedForms         Form[]                  @relation("SharedForms")
  achievements        UserAchievement[]
  SecurityLog         SecurityLog[]
}

model PlatformSettings {
  id                       String    @id @default(cuid())
  platformName             String    @default("NexusAlpri")
  logoUrl                  String?
  watermarkUrl             String?
  landingImageUrl          String?
  authImageUrl             String?
  aboutImageUrl            String?
  benefitsImageUrl         String?

  allowPublicRegistration  Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist           String?   @db.Text

  passwordMinLength        Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber    Boolean   @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  enableIdleTimeout        Boolean   @default(true)
  idleTimeoutMinutes       Int       @default(20)
  require2faForAdmins      Boolean   @default(false)

  primaryColor             String?   @default("#6366f1")
  secondaryColor           String?   @default("#a5b4fc")
  accentColor              String?   @default("#ec4899")
  backgroundColorLight     String?   @default("#f8fafc")
  primaryColorDark         String?   @default("#a5b4fc")
  backgroundColorDark      String?   @default("#020617")

  resourceCategories       String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  updatedAt                DateTime  @updatedAt
}

// --- Course Content Models ---
model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructor        User       @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  modules           Module[]
  enrollments       Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

// --- Quiz Models ---
model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int? // Número máximo de intentos permitidos. Null para ilimitados.

  // Relations
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId  String     @unique
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id        String   @id @default(cuid())
  text      String
  order     Int

  // Relations
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  options   AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean
  feedback  String?
  points    Int      @default(0) // Puntos por esta opción

  // Relations
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

// --- User Progress Models ---
model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?    @default(0)
  completedAt        DateTime?

  // Relations
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String    @unique
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}


model LessonCompletionRecord {
  id           String      @id @default(cuid())
  progressId   String
  lessonId     String
  type         String // 'view' o 'quiz'
  score        Float? // Puntuación obtenida en el quiz
  completedAt  DateTime    @default(now())

  // Relations
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id              String      @id @default(cuid())
  attemptId       String
  questionId      String
  selectedOptionId String

  // Relations
  attempt         QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


// --- Library/Resource Models ---
model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  pin          String?
  uploadDate   DateTime    @default(now())
  ispublic     Boolean     @default(true)
  
  // Relations
  uploader     User?       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId   String?
  sharedWith   User[]      @relation("SharedResources")
  
  parent       Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  children     Resource[]  @relation("FolderHierarchy")

  @@index([parentId])
}

// --- Communication & Events ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal")

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

model CalendarEvent {
  id                   String     @id @default(cuid())
  title                String
  description          String?    @db.Text
  start                DateTime
  end                  DateTime
  allDay               Boolean    @default(false)
  location             String?
  audienceType         String     @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  color                String?
  videoConferenceLink  String?
  attachments          Json?
  
  // Relations
  creator              User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]
}

model Notification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  link         String?
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
    @@index([userId])
}


// --- Gamification ---
model Achievement {
    id           String   @id @default(cuid())
    slug         AchievementSlug @unique
    name         String
    description  String
    icon         String
    points       Int
    
    // Relations
    userAchievements UserAchievement[]
}

model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime @default(now())
    
    // Relations
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@unique([userId, achievementId])
    @@index([userId])
}

// --- Forms/Surveys ---
model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json?
  required     Boolean       @default(false)
  placeholder  String?
  order        Int
  
  // Relations
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       String
  answers      Answer[]
  
  @@index([formId])
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  userId       String
  submittedAt  DateTime @default(now())
  score        Float?   // Puntaje porcentual si es un quiz

  // Relations
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers      Answer[]
  
  @@index([formId])
  @@index([userId])
}

model Answer {
  id           String  @id @default(cuid())
  responseId   String
  fieldId      String
  value        String  @db.Text // Para selección única/múltiple, puede guardar el ID o un array de IDs en JSON

  // Relations
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
}

// --- Security Logging ---
model SecurityLog {
  id            String            @id @default(cuid())
  event         SecurityLogEvent
  ipAddress     String?
  userAgent     String?
  details       String?
  createdAt     DateTime          @default(now())
  emailAttempt  String? // Para registrar el email en intentos de login fallidos
  userId        String?
  country       String?
  city          String?

  // Relations
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}


// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
