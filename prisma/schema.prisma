// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---

model User {
  id                  String       @id @default(cuid())
  name                String
  email               String       @unique
  password            String
  role                UserRole     @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime     @default(now())

  courses           Course[]
  enrollments       Enrollment[]
  notifications     Notification[]
  createdEvents     CalendarEvent[] @relation("CreatedEvents")
  attendedEvents    CalendarEvent[] @relation("EventAttendees")
  uploadedResources Resource[]
  createdTemplates  LessonTemplate[]
  securityLogs      SecurityLog[]

  @@index([email])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model SecurityLog {
  id           String           @id @default(cuid())
  userId       String?
  event        SecurityLogEvent
  ipAddress    String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String? // For failed logins where user might not exist

  @@index([userId, event])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- COURSE & CONTENT MODELS ---

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  instructor    User          @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules       Module[]
  enrollments   Enrollment[]
  progress      CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  
  module        Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model LessonTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          TemplateType
  creatorId     String?
  
  creator       User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String      @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- QUIZ MODELS ---

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  contentBlockId String       @unique
  
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  type    QuestionType @default(MULTIPLE_CHOICE)
  order   Int
  quizId  String

  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}


// --- PROGRESS & ENROLLMENT ---

model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@id([userId, courseId])
}

model CourseProgress {
  id                   String                  @id @default(cuid())
  userId               String
  courseId             String
  progressPercentage   Float                   @default(0)
  
  enrollmentId         String                  @unique
  enrollment           Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons     LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  type        String    // "view" or "quiz"
  score       Float?    // Only for quizzes

  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
}

// --- GLOBAL CONTENT ---

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  pin          String?      // Hashed PIN
  uploadDate   DateTime     @default(now())
  uploaderId   String
  parentId     String?
  
  uploader     User          @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parent       Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id])
  children     Resource[]    @relation("FolderHierarchy")

  @@index([parentId])
  @@index([category])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String   @db.Text
  date     DateTime @default(now())
  authorId String
  priority String   @default("Normal")
  audience Json?

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  color               String?
  videoConferenceLink String?
  attachments         Json?
  
  audienceType        String   // Can be 'ALL', a UserRole, or 'SPECIFIC'
  creatorId           String
  
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// --- SYSTEM SETTINGS ---

model PlatformSettings {
  id                         Int      @id @default(1)
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  
  require2faForAdmins        Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)

  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  resourceCategories         String   @default("General,Recursos Humanos,TI,Legal") @db.Text
  updatedAt                  DateTime @updatedAt
}
