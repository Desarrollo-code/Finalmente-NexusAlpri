// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum NotificationType {
  NEW_ANNOUNCEMENT
  COURSE_PUBLISHED
  ENROLLMENT_CONFIRMATION
  UPCOMING_EVENT
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- MODELS ---

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  password           String?
  role               UserRole        @default(STUDENT)
  avatar             String?
  registeredDate     DateTime?       @default(now())
  isTwoFactorEnabled Boolean         @default(false)
  twoFactorSecret    String?

  // Relations
  courses            Course[]        @relation("CourseInstructor")
  enrollments        Enrollment[]
  uploadedResources  Resource[]      @relation("ResourceUploader")
  announcements      Announcement[]
  createdEvents      CalendarEvent[] @relation("EventCreator")
  notifications      Notification[]
  securityLogs       SecurityLog[]
  createdTemplates   LessonTemplate[]

  sharedResources    Resource[]      @relation("SharedResources")
  attendingEvents    CalendarEvent[] @relation("EventAttendees")

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructorId    String?
  instructor      User?        @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  template           LessonTemplate?          @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId         String?

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int

  // Relations
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String?

  // Relations
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

model Question {
  id     String       @id @default(cuid())
  text   String       @db.Text
  type   QuestionType @default(SINGLE_CHOICE)
  order  Int

  // Relations
  quizId String
  quiz   Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id        String  @id @default(cuid())
  text      String
  isCorrect Boolean @default(false)
  feedback  String? @db.Text

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id          String   @id @default(cuid())
  enrolledAt  DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  progress    CourseProgress? // An enrollment can have one progress record

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  progressPercentage  Float    @default(0)
  completedAt         DateTime?

  // Relations
  enrollmentId        String   @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  userId              String
  courseId            String
  
  completedLessons    LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  type        String   // 'view' or 'quiz'
  score       Float?
  completedAt DateTime @default(now())

  // Relations
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  pin          String?
  ispublic     Boolean      @default(true) @map("isPublic")

  // Relations
  uploaderId   String?
  uploader     User?        @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")

  sharedWith   User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     // Can be 'ALL' or an array of UserRole
  priority  String?  @default("Normal")

  // Relations
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([authorId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  color               String           @default("blue")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?

  // Relations
  creatorId           String
  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String    @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  details      String?
  ipAddress    String?
  createdAt    DateTime          @default(now())

  // Relations
  userId       String?
  user         User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?

  @@index([userId])
}

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            String           // 'SYSTEM' or 'USER'
  createdAt       DateTime         @default(now())
  
  // Relations
  creatorId       String?          // Null for SYSTEM templates
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]         // Lessons using this template
  
  @@index([creatorId])
}

model TemplateBlock {
  id              String     @id @default(cuid())
  type            LessonType
  order           Int
  
  // Relations
  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}
