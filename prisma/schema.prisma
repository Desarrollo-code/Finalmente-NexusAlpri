// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  xp                    Int       @default(0)
  theme                 String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  coursesCreated        Course[]
  enrollments           Enrollment[]
  progress              CourseProgress[]
  notes                 UserNote[]
  notifications         Notification[]
  securityLogs          SecurityLog[]
  resourcesUploaded     Resource[]    @relation("UploadedResources")
  resourcesSharedWith   Resource[]    @relation("SharedResources")
  announcements         Announcement[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[] @relation("EventAttendees")
  quizAttempts          QuizAttempt[]
  achievements          UserAchievement[]
  createdForms          Form[]
  formResponses         FormResponse[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String        @db.VarChar(255)
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  instructor      User?         @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("TemplateFromLesson")

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  maxAttempts    Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id          String         @id @default(cuid())
  text        String
  type        QuestionType   @default(SINGLE_CHOICE)
  order       Int
  quizId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id             String          @id @default(cuid())
  userId         String
  quizId         String
  attemptNumber  Int
  score          Float
  submittedAt    DateTime        @default(now())

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String

  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  progressPercentage  Float?                   @default(0)
  completedAt         DateTime?
  lastActivity        DateTime?                @updatedAt

  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String   // "view" or "quiz"
  score       Float?   // Only for quiz type
  completedAt DateTime @default(now())

  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  parentId     String?
  ispublic     Boolean      @default(true)
  pin          String?      // Hashed PIN
  
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parent       Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]   @relation("FolderChildren")
  sharedWith   User[]       @relation("SharedResources")

  @@index([parentId])
}

model Announcement {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  date      DateTime   @default(now())
  authorId  String
  audience  Json       // 'ALL' o un array de UserRole
  priority  String?    @default("Normal") // "Normal", "Urgente"

  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  audienceType        EventAudienceType @default(ALL)
  color               String            @default("blue")
  creatorId           String
  videoConferenceLink String?
  attachments         Json?             // Array de objetos { name: string, url: string }

  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  userId       String?
  emailAttempt String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?

  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text // Comma-separated list
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String    @default("General") @db.Text
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime  @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            TemplateType   @default(USER)
  creatorId       String?
  lessonId        String?        @unique // Original lesson this was created from
  
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  lesson          Lesson?        @relation("TemplateFromLesson", fields: [lessonId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  templateId  String
  type        LessonType
  order       Int

  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  status        FormStatus     @default(DRAFT)
  isQuiz        Boolean        @default(false)
  creatorId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]

  @@index([creatorId])
}

model FormField {
  id            String        @id @default(cuid())
  formId        String
  label         String
  type          FormFieldType
  options       Json?         // [{ id, text, isCorrect, points }]
  required      Boolean       @default(false)
  placeholder   String?
  order         Int

  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@index([formId])
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime @default(now())
  score         Float?   // Only for quizzes

  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@index([formId])
  @@index([userId])
}

model Answer {
  id          String   @id @default(cuid())
  responseId  String
  fieldId     String
  value       String   @db.Text

  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
}
