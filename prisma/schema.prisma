// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- USER & AUTH MODELS ---
model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?     @default(now()) @map("registered_date")
  lastLogin             DateTime?     @map("last_login")
  theme                 String?
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  coursesAsInstructor   Course[]      @relation("InstructorToCourse")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[]
  createdResources      Resource[] @relation("UploaderToResource")
  notifications         Notification[]
  notes                 UserNote[]
  quizAttempts          QuizAttempt[]
  lessonCompletions     LessonCompletionRecord[]
  securityLogs          SecurityLog[]
  AnswerAttempt         AnswerAttempt[]
  sharedResources       Resource[]     @relation(name: "SharedWithUser")

  @@map("users")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE & CONTENT MODELS ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  instructorId    String?
  instructor      User?          @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
  @@map("lessons")
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
  @@map("content_blocks")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


// --- QUIZ MODELS ---
model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]

  @@index([contentBlockId])
  @@map("quizzes")
}

model Question {
  id          String          @id @default(cuid())
  text        String
  type        QuestionType
  order       Int
  quizId      String
  quiz        Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  attempts    AnswerAttempt[]

  @@index([quizId])
  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?   @db.Text
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
  @@map("answer_options")
}

model QuizAttempt {
    id        String          @id @default(cuid())
    userId    String
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId    String
    quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    score     Float
    attemptedAt DateTime        @default(now())
    answers   AnswerAttempt[]

    @@index([userId, quizId])
    @@map("quiz_attempts")
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    attemptId         String
    attempt           QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId        String
    question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
    selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    User              User?         @relation(fields: [userId], references: [id])
    userId            String?

    @@index([attemptId])
    @@map("answer_attempts")
}

// --- USER PROGRESS MODELS ---
model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now()) @map("enrolled_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String        @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String        // "view" or "quiz"
    score       Float?        // Score for quizzes
    completedAt DateTime      @default(now())
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


// --- OTHER MODELS ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  priority  String? // "Normal", "Urgente"
  audience  Json // Could be 'ALL', or an array of roles ['STUDENT', 'INSTRUCTOR']
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String   @default("blue")
  audienceType        String   // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees           User[]
  attachments         Json?
  creatorId           String
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
  @@map("notifications")
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?      // Comma-separated
  url          String?
  uploadDate   DateTime     @default(now())
  pin          String?
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation(name: "SharedWithUser")
  uploaderId   String?
  uploader     User?        @relation("UploaderToResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")

  @@index([parentId])
  @@index([uploaderId])
  @@map("resources")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model SecurityLog {
  id           String    @id @default(cuid())
  event        String    // e.g., 'SUCCESSFUL_LOGIN', 'FAILED_LOGIN_ATTEMPT'
  ipAddress    String?
  createdAt    DateTime  @default(now())
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?   // For failed logins where userId is unknown
  details      String?   @db.Text

  @@index([userId])
  @@map("security_logs")
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text // Comma-separated domains
  resourceCategories         String   @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
  primaryColor               String?  @default("#6366f1") // indigo-500
  secondaryColor             String?  @default("#a5b4fc") // indigo-300
  accentColor                String?  @default("#ec4899") // pink-500
  backgroundColorLight       String?  @default("#f8fafc") // slate-50
  primaryColorDark           String?  @default("#a5b4fc") // indigo-300
  backgroundColorDark        String?  @default("#020617") // slate-950
  fontHeadline               String?  @default("Space Grotesk")
  fontBody                   String?  @default("Inter")

  @@map("platform_settings")
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            String          // "SYSTEM" or "USER"
  creatorId       String?         // Null for system templates
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  createdAt       DateTime        @default(now())

  @@index([creatorId])
  @@map("lesson_templates")
}

model TemplateBlock {
  id          String        @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int

  @@index([templateId])
  @@map("template_blocks")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("user_notes")
}
