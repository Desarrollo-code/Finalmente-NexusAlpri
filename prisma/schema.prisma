// prisma/schema.prisma
// Este es tu archivo de esquema de Prisma, define los modelos de tu base de datos.
// Aprende más sobre esto en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- MODELOS DE AUTENTICACIÓN Y USUARIOS ---

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  role                  UserRole                 @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime                 @default(now())
  lastLogin             DateTime?
  isActive              Boolean                  @default(true)
  xp                    Int                      @default(0)
  enrollments           Enrollment[]             @relation("UserEnrollments")
  coursesTaught         Course[]                 @relation("InstructorCourses")
  announcements         Announcement[]           @relation("Author")
  createdEvents         CalendarEvent[]          @relation("EventCreators")
  attendedEvents        CalendarEvent[]          @relation("EventAttendees")
  uploadedResources     Resource[]               @relation("Uploader")
  securityLogs          SecurityLog[]
  userAchievements      UserAchievement[]
  createdTemplates      LessonTemplate[]
  notes                 UserNote[]
  formResponses         FormResponse[]
  sharedForms           Form[]                   @relation("FormSharedWith")
  createdForms          Form[]                   @relation("FormCreator")
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  courseProgressRecords CourseProgress[]         @relation("UserCourseProgress")
  quizAttempts          QuizAttempt[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- MODELOS DE CONTENIDO DEL CURSO ---

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String      @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String        @id @default(cuid())
  text        String
  isCorrect   Boolean       @default(false)
  feedback    String?
  questionId  String
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- MODELOS DE PROGRESO E INSCRIPCIÓN ---

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation("UserCourseProgress", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId   String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     String
  type         String         // 'view', 'quiz', 'video'
  score        Float?         // Para quizzes
  completedAt  DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  quiz         Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId       String
  attemptNumber Int
  score        Float           // Puntuación de 0 a 100
  submittedAt  DateTime        @default(now())
  answers      AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


// --- MODELOS DE BIBLIOTECA DE RECURSOS ---

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         String     // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  category     String?
  tags         String?    // Comma-separated
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  pin          String?
  parentId     String?
  parent       Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderChildren")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("ResourceSharedWith")
}


// --- MODELOS DE COMUNICACIÓN Y EVENTOS ---

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json     // NOTE: Prisma historically doesn't support @default on Json fields at the schema level — set defaults in app or DB.
  priority   String   @default("Normal")
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  audienceType        EventAudienceType
  color               String?            @default("blue")
  creatorId           String
  creator             User               @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json?
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}


// --- MODELOS DE FORMULARIOS Y EVALUACIONES ---

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  type        FormFieldType
  options     Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  answers     FormResponseAnswer[]
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String               @id @default(cuid())
  formId      String
  form        Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime             @default(now())
  score       Float?               // Puntuación si es un quiz
  answers     FormResponseAnswer[]
}

model FormResponseAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String       @db.Text
}


// --- MODELOS DE CONFIGURACIÓN Y AUDITORÍA ---

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String    @default("General,Recursos Humanos,TI") @db.Text
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String             @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime           @default(now())
  emailAttempt String?
  country      String?
  city         String?
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- MODELOS DE GAMIFICACIÓN ---

model Achievement {
  id                String              @id @default(cuid())
  slug              AchievementSlug     @unique
  name              String
  description       String
  icon              String?
  points            Int
  userAchievements  UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

// --- MODELOS DE PLANTILLAS ---

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
