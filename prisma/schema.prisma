// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// ENUMS - Tipos de datos personalizados
// --------------------------------------
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --------------------------------------
// MODELS - Estructura de la Base de Datos
// --------------------------------------

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  registeredDate      DateTime?            @default(now())
  lastLogin           DateTime?
  xp                  Int                  @default(0)
  isActive            Boolean              @default(true)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  courses             Course[] // Cursos que imparte
  enrollments         Enrollment[]
  achievements        UserAchievement[]
  notes               UserNote[]
  announcements       Announcement[]
  resources           EnterpriseResource[]
  securityLogs        SecurityLog[]
  createdEvents       CalendarEvent[]      @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]      @relation("AttendingEvents")
  createdForms        Form[]               @relation("CreatedForms")
  sharedForms         Form[]               @relation("SharedForms")
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
  lessonTemplates     LessonTemplate[]
  courseProgress      CourseProgress[]
  notifications       Notification[]
  sentInvites         Invite[]             @relation("SentInvites")
  receivedInvites     Invite[]             @relation("ReceivedInvites")
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id            String                  @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  templateId    String?
  template      LessonTemplate?         @relation(fields: [templateId], references: [id], onDelete: SetNull)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id          String         @id @default(cuid())
  text        String
  order       Int
  quizId      String
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id              String          @id @default(cuid())
  text            String
  isCorrect       Boolean
  feedback        String?
  questionId      String
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt   AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String // "view", "quiz", "video"
  score       Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
}

model EnterpriseResource {
  id           String   @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  url          String?
  uploadDate   DateTime @default(now())
  uploaderId   String
  uploader     User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  category     String?
  tags         String?
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("FolderChildren")
  pin          String?
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR"
  priority  String   @default("Normal") // Normal, Urgente
  updatedAt DateTime @updatedAt
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        String   // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  color               String?  @default("blue")
  videoConferenceLink String?
  attachments         Json[]
  creatorId           String
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("AttendingEvents")
  updatedAt           DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  resourceCategories        String?
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  updatedAt                 DateTime  @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  users           UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())
  
  @@unique([userId, achievementId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json[]
  required     Boolean       @default(false)
  placeholder  String?
  order        Int
  formId       String
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormResponse {
  id           String          @id @default(cuid())
  formId       String
  form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime        @default(now())
  answers      Answer[]
  score        Float? // For quizzes
}

model Answer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  // No relation to FormField to avoid cycles
  value      String
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String // SYSTEM, USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       LessonType
  order      Int
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  role      UserRole
  status    String   // PENDING, ACCEPTED, EXPIRED
  expiresAt DateTime
  senderId  String
  sender    User     @relation("SentInvites", fields: [senderId], references: [id])
  inviteeId String?
  invitee   User?    @relation("ReceivedInvites", fields: [inviteeId], references: [id])
  createdAt DateTime @default(now())
}
