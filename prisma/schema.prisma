// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------------------------------
// ENUMS
// ---------------------------------
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  DATE
  NUMBER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// ---------------------------------
// MODELS
// ---------------------------------

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  avatar                String?
  role                  UserRole               @default(STUDENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?              @default(now())
  theme                 String?                @default("dark")
  xp                    Int?                   @default(0)

  // Relations
  enrollments           Enrollment[]
  createdCourses        Course[]
  notifications         Notification[]
  notes                 UserNote[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]        @relation("EventAttendees")
  lessonTemplates       LessonTemplate[]
  createdForms          Form[]                 @relation("FormCreator")
  formResponses         FormResponse[]
  
  uploadedResources     EnterpriseResource[]   @relation("UploadedResources")
  sharedResources       EnterpriseResource[]   @relation("SharedResources")
  
  createdAnnouncements  Announcement[]
  sharedForms           Form[]                 @relation("SharedForms")

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId    String?
  instructor      User?         @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String                 @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  notes           UserNote[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime        @default(now())
  answers   AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
    id                  String        @id @default(cuid())
    attemptId           String
    attempt             QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId          String
    question            Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId    String
    selectedOption      AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
    @@index([questionId])
}


model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt   DateTime        @default(now())
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float                    @default(0)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progressId  String
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String          // "view" or "quiz"
    score       Float?          // Only for quiz type

    @@unique([progressId, lessonId])
}

model EnterpriseResource {
  id           String               @id @default(cuid())
  title        String
  description  String?              @db.Text
  type         ResourceType
  category     String
  tags         String?              // Comma-separated
  url          String?
  uploadDate   DateTime             @default(now())
  uploaderId   String
  uploader     User                 @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId     String?
  parent       EnterpriseResource?  @relation("Children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("Children")
  pin          String?
  ispublic     Boolean              @default(true)
  sharedWith   User[]               @relation("SharedResources")
  
  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  audience   Json     // e.g., ["ALL"], ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
  priority   String   @default("Normal") // "Normal" or "Urgente"
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
  attachments         Json?             // Array of {name: string, url: string}

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
  emailAttempt String?          // For failed login attempts on non-existent users

  @@index([userId])
  @@index([event])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model PlatformSettings {
  id                           String   @id @default(cuid())
  platformName                 String
  allowPublicRegistration      Boolean  @default(true)
  enableEmailNotifications     Boolean  @default(true)
  resourceCategories           String   @db.Text // Comma-separated
  passwordMinLength            Int      @default(8)
  passwordRequireUppercase     Boolean  @default(true)
  passwordRequireLowercase     Boolean  @default(true)
  passwordRequireNumber        Boolean  @default(true)
  passwordRequireSpecialChar   Boolean  @default(true)
  enableIdleTimeout            Boolean  @default(true)
  idleTimeoutMinutes           Int      @default(20)
  require2faForAdmins          Boolean  @default(false)
  updatedAt                    DateTime @updatedAt
  
  // Theme settings
  primaryColor                 String?
  secondaryColor               String?
  accentColor                  String?
  backgroundColorLight         String?
  primaryColorDark             String?
  backgroundColorDark          String?
  fontHeadline                 String?
  fontBody                     String?
  logoUrl                      String?
  watermarkUrl                 String?
  landingImageUrl              String?
  authImageUrl                 String?
  aboutImageUrl                String?
  benefitsImageUrl             String?
}

model LessonTemplate {
  id               String           @id @default(cuid())
  name             String
  description      String?
  type             TemplateType
  creatorId        String?
  creator          User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks   TemplateBlock[]
}

model TemplateBlock {
  id          String       @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int
}

model Achievement {
    id          String              @id @default(cuid())
    slug        String              @unique
    name        String
    description String
    icon        String?
    points      Int                 @default(0)
    users       UserAchievement[]
}

model UserAchievement {
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt        DateTime    @default(now())

    @@id([userId, achievementId])
}

// --- FORMS & SURVEYS ---
model Form {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  status        FormStatus     @default(DRAFT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  creator       User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]         @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // For multiple choice, etc.
  order       Int

  @@index([formId])
}

model FormResponse {
  id        String       @id @default(cuid())
  formId    String
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime   @default(now())
  answers   FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id           String       @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId      String
  // No relation to FormField to avoid issues if a field is deleted
  value        Json

  @@index([responseId])
}
