// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED // For future use
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

// --- MODELS ---

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  role                UserRole             @default(STUDENT)
  avatar              String?
  theme               String?              @default("dark")
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime             @default(now())
  xp                  Int?                 @default(0)

  // Relations
  coursesCreated      Course[]             @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  announcements       Announcement[]
  notifications       Notification[]
  eventsCreated       CalendarEvent[]      @relation("EventCreator")
  eventsAttending     CalendarEvent[]      @relation("EventAttendees")
  resourcesUploaded   EnterpriseResource[]
  securityLogs        SecurityLog[]
  userNotes           UserNote[]
  templatesCreated    LessonTemplate[]
  achievements        UserAchievement[]
  quizAttempts        QuizAttempt[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String        @db.VarChar(255)
  description     String?       @db.Text
  imageUrl        String?       @db.VarChar(1024)
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  instructorId    String?
  instructor      User?         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
  @@index([status])
}

model Module {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  order       Int

  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String          @db.VarChar(255)
  order         Int

  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  userNotes     UserNote[]
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?

  @@index([moduleId])
}

model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int

    // Relations
    lessonId  String
    lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?      // One-to-one with Quiz

    @@index([lessonId])
}

model Quiz {
    id           String         @id @default(cuid())
    title        String
    description  String?        @db.Text

    // Relations
    contentBlockId String     @unique // Foreign key to ContentBlock
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions    Question[]
    attempts     QuizAttempt[]

    @@index([contentBlockId])
}

model Question {
    id      String       @id @default(cuid())
    text    String       @db.Text
    type    QuestionType @default(SINGLE_CHOICE)
    order   Int

    // Relations
    quizId  String
    quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options AnswerOption[]
    answerAttempts AnswerAttempt[]

    @@index([quizId])
}

model AnswerOption {
    id          String       @id @default(cuid())
    text        String       @db.Text
    isCorrect   Boolean
    feedback    String?      @db.Text

    // Relations
    questionId  String
    question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    AnswerAttempt AnswerAttempt[]

    @@index([questionId])
}

model Enrollment {
  id           String         @id @default(cuid())
  enrolledAt   DateTime       @default(now())

  // Relations
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
    id                  String                   @id @default(cuid())
    enrollmentId        String                   @unique
    enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    userId              String
    user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId            String
    course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    progressPercentage  Float                    @default(0)
    completedAt         DateTime?
    
    completedLessons    LessonCompletionRecord[]

    @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    type        String   // "view" or "quiz"
    score       Float?   // Only for quizzes
    completedAt DateTime @default(now())
    
    // Relations
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  score     Float           // Percentage score
  attemptedAt DateTime      @default(now())
  
  // Relations
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())

  // Relations
  attemptId         String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  priority  String   @default("Normal")
  audience  Json     // Can be "ALL" or an array of UserRole
  
  // Relations
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         String       // e.g., FOLDER, DOCUMENT, VIDEO, LINK
  url          String?      @db.VarChar(1024)
  category     String?
  tags         String?      // Comma-separated
  uploadDate   DateTime     @default(now())
  pin          String?
  ispublic     Boolean      @default(true)

  // Relations
  uploaderId   String?
  uploader     User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       EnterpriseResource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  sharedWith   User[]

  @@index([parentId])
  @@index([uploaderId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  color               String            @default("blue")
  audienceType        EventAudienceType @default(ALL)
  attachments         Json?             // Array of { name: string, url: string }
  createdAt           DateTime          @default(now())
  
  // Relations
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?           @db.Text
  emailAttempt String?           // For failed logins where user might not exist
  createdAt    DateTime          @default(now())
  
  // Geolocation info from Vercel
  country      String?
  city         String?

  // Relations
  userId       String?
  user         User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String    @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  primaryColor               String    @default("#6366f1")
  secondaryColor             String    @default("#a5b4fc")
  accentColor                String    @default("#ec4899")
  backgroundColorLight       String    @default("#f8fafc")
  primaryColorDark           String    @default("#a5b4fc")
  backgroundColorDark        String    @default("#020617")
  fontHeadline               String    @default("Space Grotesk")
  fontBody                   String    @default("Inter")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications Boolean   @default(true)
  emailWhitelist             String?
  resourceCategories         String?   @db.Text
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  updatedAt                  DateTime  @updatedAt

  @@map("platform_settings")
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?        @db.Text
  type            TemplateType   @default(USER)
  createdAt       DateTime       @default(now())

  // Relations
  creatorId       String?        // Null for SYSTEM templates
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]       // Lessons using this template

  @@index([creatorId])
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int

  // Relations
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Achievement {
    id          String            @id @default(cuid())
    slug        String            @unique // e.g., 'first-enrollment'
    name        String
    description String
    icon        String?           // e.g., lucide-icon name
    points      Int               @default(0) // XP awarded for this achievement

    users       UserAchievement[]

    @@index([slug])
}

model UserAchievement {
    id              String      @id @default(cuid())
    earnedAt        DateTime    @default(now())

    // Relations
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@index([userId])
}