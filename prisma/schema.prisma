// Este es tu archivo de esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Ajustado de mysql a postgresql
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String
  email                 String                @unique
  password              String
  avatar                String?
  role                  UserRole              @default(STUDENT)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime              @default(now())
  xp                    Int                   @default(0)
  isActive              Boolean               @default(true)
  coursesAsInstructor   Course[]
  enrollments           Enrollment[]
  notifications         Notification[]
  createdEvents         CalendarEvent[]       @relation("CreatedEvents")
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  uploadedResources     Resource[]
  notes                 UserNote[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  formResponses         FormResponse[]
  createdForms          Form[]                @relation("CreatedForms")
  sharedForms           Form[]                @relation("SharedForms")
  achievements          UserAchievement[]
  sharedWithResources   Resource[]            @relation("SharedResource")

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id               String          @id @default(cuid())
  title            String          @db.VarChar(255)
  description      String?         @db.Text
  imageUrl         String?
  category         String?
  status           CourseStatus    @default(DRAFT)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  publicationDate  DateTime?
  instructorId     String?
  instructor       User?           @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules          Module[]
  enrollments      Enrollment[]
  progress         CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String          @db.VarChar(255)
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completedBy   LessonCompletionRecord[]
  notes         UserNote[]
  
  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  
  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlockId String        @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
  maxAttempts  Int?
}

model Question {
  id            String         @id @default(cuid())
  text          String
  order         Int
  quizId        String
  quiz          Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options       AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean  @default(false)
  feedback  String?
  points    Int      @default(0)
  questionId String
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                    @id @default(cuid())
  userId              String
  courseId            String
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId        String                    @unique
  enrollment          Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float                     @default(0)
  completedAt         DateTime?
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String          @id @default(cuid())
  progressId   String
  progress     CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type         String // "view", "quiz", "video"
  score        Float?
  completedAt  DateTime        @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([userId, lessonId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String?
  tags         String?    // Comma-separated
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  pin          String?    // Hashed PIN
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResource")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean     @default(false)
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  creator             User        @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]      @relation("EventAttendees")
  color               String?     @default("blue")
  videoConferenceLink String?
  attachments         Json        @default("[]")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model SecurityLog {
  id           String      @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime    @default(now())

  @@index([userId])
  @@index([createdAt])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

enum TemplateType {
  SYSTEM
  USER
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String? // Comma-separated list
  resourceCategories        String? // Comma-separated list
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  
  // Theme settings
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")

  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")

  // Font settings
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  
  // Image settings
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
}

// --- Forms ---
model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  creatorId   String
  creator     User     @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]       @relation("SharedForms")

  @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean  @default(false)
  placeholder String?
  options     Json     @default("[]") // For select, radio, checkbox
  order       Int
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     FormResponseAnswer[]
  score       Float? // For quizzes

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id         String   @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String   @db.Text

  @@index([responseId])
  @@index([fieldId])
}


// --- Gamification ---
model Achievement {
  id             String   @id @default(cuid())
  slug           AchievementSlug @unique
  name           String
  description    String
  points         Int
  icon           String? // e.g., name of a Lucide icon
  UserAchievement UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}
