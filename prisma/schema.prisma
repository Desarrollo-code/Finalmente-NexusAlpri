// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// --- AUTH & USER ---
// -------------------

model User {
  id                  String              @id @default(cuid())
  name                String
  email               String              @unique
  password            String
  avatar              String?
  role                UserRole            @default(STUDENT)
  isTwoFactorEnabled  Boolean             @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime            @default(now())
  xp                  Int                 @default(0)
  theme               String?
  
  // Relations
  coursesCreated      Course[]            @relation("InstructorCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  resourcesUploaded   Resource[]          @relation("Uploader")
  resourcesSharedWith Resource[]          @relation("SharedWith")
  securityLogs        SecurityLog[]
  userNotes           UserNote[]
  createdTemplates    LessonTemplate[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]
  createdEvents       CalendarEvent[]     @relation("EventCreator")
  attendedEvents      CalendarEvent[]     @relation("EventAttendees")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

// --------------------
// --- COURSE & CONTENT ---
// --------------------

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String         @default("General")
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?      // Para programar publicaciones
  
  // Relations
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  
  // Relations
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  
  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  
  // Progress tracking
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  
  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --------------------
// --- QUIZ & QUESTIONS ---
// --------------------

model Quiz {
  id            String        @id @default(cuid())
  title         String
  description   String?
  
  // Relations
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType   @default(MULTIPLE_CHOICE)
  order    Int
  
  // Relations
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
  
  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@index([questionId])
}


// --- PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String  @id @default(cuid())
  progressPercentage  Float   @default(0)
  
  // Relations
  userId              String
  courseId            String
  enrollmentId        String  @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]
  
  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  type        String    // 'view' or 'quiz'
  score       Float?
  
  // Relations
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
    id        String @id @default(cuid())
    userId    String
    quizId    String
    score     Float
    attemptedAt DateTime @default(now())

    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz      Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers   AnswerAttempt[]

    @@index([userId, quizId])
}

model AnswerAttempt {
    id        String @id @default(cuid())
    attemptId String
    questionId String
    selectedOptionId String

    attempt         QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption  AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([attemptId])
}


// --- GLOBAL CONTENT ---

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?      @db.Text
  category    String       @default("General")
  tags        String?
  uploadDate  DateTime     @default(now())
  pin         String?      @db.Text
  ispublic    Boolean      @default(true)
  
  // Relations
  uploaderId  String?
  uploader    User?        @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId    String?
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderHierarchy")
  sharedWith  User[]       @relation("SharedWith")
  
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     // 'ALL', or an array of UserRole
  priority  String   @default("Normal") // Normal, Urgente
  
  // Relations
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  color               String   @default("blue")
  videoConferenceLink String?
  attachments         Json?
  audienceType        EventAudienceType @default(ALL)
  
  // Relations
  creatorId           String?
  creator             User?    @relation("EventCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  attendees           User[]   @relation("EventAttendees")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- PLATFORM & SYSTEM ---

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  
  // Theme
  primaryColor              String    @default("#6366f1")
  secondaryColor            String    @default("#a5b4fc")
  accentColor               String    @default("#ec4899")
  backgroundColorLight      String    @default("#f8fafc")
  primaryColorDark          String    @default("#a5b4fc")
  backgroundColorDark       String    @default("#020617")
  fontHeadline              String    @default("Space Grotesk")
  fontBody                  String    @default("Inter")

  // Registration & Access
  allowPublicRegistration   Boolean   @default(true)
  
  // Security
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Content
  resourceCategories        String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  
  // Notifications
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  
  @@index([userId])
  @@index([event])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model UserNote {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}

// --- TEMPLATES & GAMIFICATION ---

model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TemplateType @default(USER)
  
  // Relations
  creatorId   String?
  creator     User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  // Relations
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

model Achievement {
  id          String @id @default(cuid())
  slug        String @unique // e.g., 'first-course-completed'
  name        String
  description String
  icon        String?
  points      Int    @default(50)
  
  // Relations
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  earnedAt      DateTime    @default(now())

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}
