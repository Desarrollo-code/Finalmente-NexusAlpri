// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTHENTICATION ---
model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  role                 UserRole          @default(STUDENT)
  avatar               String?
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime          @default(now())
  
  courses            Course[]          @relation("CreatedCourses")
  enrollments        Enrollment[]
  progress           CourseProgress[]
  announcements      Announcement[]
  resources          Resource[]
  notifications      Notification[]
  events             CalendarEvent[]
  createdTemplates   LessonTemplate[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE STRUCTURE ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String         @default("General")
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  instructorId String
  instructor   User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@index([instructorId])
  @@index([status])
  @@index([category])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- QUIZZES ---
model Quiz {
  id             String     @id @default(cuid())
  title          String
  description    String?
  contentBlockId String     @unique
  
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String       @db.Text
  type    QuestionType
  order   Int
  quizId  String
  
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text
  questionId String
  
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress CourseProgress?

  @@id([userId, courseId])
}

model CourseProgress {
  id                 String                  @id @default(cuid())
  progressPercentage Float                   @default(0)
  enrollmentId       String                  @unique
  
  enrollment       Enrollment              @relation(fields: [enrollmentId], references: [userId, courseId], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  // Keep these for potential direct lookups, but relation is through enrollment
  userId           String
  courseId         String
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id         String @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float?
  
  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

// --- PLATFORM CONTENT & SETTINGS ---
model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         ResourceType
  url          String?
  category     String
  tags         String?
  uploadDate   DateTime @default(now())
  uploaderId   String
  pin          String?  @db.Text
  
  uploader User @relation(fields: [uploaderId], references: [id])
  
  parentId String?
  parent   Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children Resource[]   @relation("FolderHierarchy")

  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     // Can be 'ALL', or an array of UserRole
  priority  String   @default("Normal")
  
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                 String      @id @default(cuid())
  title              String
  description        String?     @db.Text
  location           String?
  videoConferenceLink String?
  start              DateTime
  end                DateTime
  allDay             Boolean
  audienceType       String      // 'ALL', a UserRole, or 'SPECIFIC'
  color              String      @default("blue")
  attachments        Json?       // Array of {name: string, url: string}
  createdAt          DateTime    @default(now())
  
  creatorId          String
  creator            User        @relation(fields: [creatorId], references: [id])
  attendees          User[]
}

model LessonTemplate {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  type         TemplateType @default(SYSTEM) // SYSTEM or USER
  createdAt    DateTime @default(now())
  
  creatorId    String? // Null for system templates
  creator      User?     @relation(fields: [creatorId], references: [id])

  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  
  template LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum TemplateType {
  SYSTEM
  USER
}


model PlatformSettings {
  id                        String  @id @default(cuid())
  platformName              String  @default("NexusAlpri")
  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String? @db.Text
  require2faForAdmins       Boolean @default(false)
  enableIdleTimeout         Boolean @default(true)
  idleTimeoutMinutes        Int     @default(20)
  
  // Password Policy
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  // Content Categories
  resourceCategories        String  @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text

  updatedAt                 DateTime @updatedAt
}


model SecurityLog {
  id            String   @id @default(cuid())
  event         String
  ipAddress     String
  userId        String?
  emailAttempt  String?
  details       String?  @db.Text
  createdAt     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([event])
}
