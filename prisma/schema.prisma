// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  email                 String        @unique
  password              String?
  avatar                String?
  role                  UserRole      @default(STUDENT)
  registeredDate        DateTime?     @default(now())
  theme                 String?
  xp                    Int?          @default(0)
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  courses               Course[]
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  userNotes             UserNote[]
  notifications         Notification[]
  uploadedResources     EnterpriseResource[]
  createdEvents         CalendarEvent[]
  attendeeInEvents      CalendarEvent[] @relation("EventAttendees")
  quizAttempts          QuizAttempt[]
  createdTemplates      LessonTemplate[]
  createdAnnouncements  Announcement[]
  achievements          UserAchievement[]
  createdForms          Form[] @relation("FormCreator")
  formResponses         FormResponse[]
  sharedForms           Form[] @relation("FormSharedWith")
}

// --- CURSOS Y CONTENIDO ---

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  instructorId    String?
  instructor      User?         @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@orderBy([order])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]

  @@orderBy([order])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@orderBy([order])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String      @unique
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]
}

// --- INSCRIPCIONES Y PROGRESO ---

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float?                   @default(0)
  completedLessons    LessonCompletionRecord[]
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // "view" o "quiz"
  score       Float?
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime        @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

// --- RECURSOS ---

model EnterpriseResource {
  id           String               @id @default(cuid())
  title        String
  description  String?              @db.Text
  type         ResourceType
  category     String
  url          String?
  uploadDate   DateTime             @default(now())
  uploaderId   String?
  uploader     User?                @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[] @relation("FolderHierarchy")
  tags         String?
  pin          String?
  ispublic     Boolean              @default(true)
  sharedWith   User[]               @relation("ResourceSharedWith")
}

// --- COMUNICACIÓN Y EVENTOS ---

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  color               String?      @default("blue")
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  creator             User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]       @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json?        @default("[]")
}

// --- PLANTILLAS Y GAMIFICACIÓN ---

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(cuid())
  slug             String            @unique // e.g., "first-course-completed"
  name             String
  description      String
  icon             String?
  points           Int               @default(0)
  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}


// --- FORMULARIOS ---

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isPublic    Boolean        @default(false)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")
}

model FormField {
  id            String       @id @default(cuid())
  formId        String
  form          Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  order         Int
  label         String
  type          FormFieldType
  options       Json? // For 'SELECT', 'RADIO', 'CHECKBOX'
  isRequired    Boolean      @default(false)
  answers       FormAnswer[]
}

model FormResponse {
  id        String       @id @default(cuid())
  formId    String
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  submittedAt DateTime     @default(now())
  answers   FormAnswer[]
}

model FormAnswer {
  id           String       @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId      String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value        String       @db.Text
}

// --- SISTEMA Y SEGURIDAD ---

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  
  // Theme
  primaryColor               String?  @default("#6366f1") // indigo-500
  secondaryColor             String?  @default("#a5b4fc") // indigo-300
  accentColor                String?  @default("#ec4899") // pink-500
  backgroundColorLight       String?  @default("#f8fafc") // slate-50
  primaryColorDark           String?  @default("#a5b4fc") // indigo-300
  backgroundColorDark        String?  @default("#020617") // slate-950
  fontHeadline               String?  @default("Space Grotesk")
  fontBody                   String?  @default("Inter")
  
  // Registration & Access
  allowPublicRegistration    Boolean  @default(true)
  
  // Security
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  // Content
  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  
  // Notifications
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text

  updatedAt                  DateTime @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    emailAttempt String?  // To log email used in failed attempts
    ipAddress    String?
    userAgent    String?  @db.Text
    country      String?
    city         String?
    details      String?  @db.Text
    createdAt    DateTime @default(now())
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum FormFieldType {
    TEXT
    TEXTAREA
    SELECT
    RADIO
    CHECKBOX
    DATE
    RATING
}
