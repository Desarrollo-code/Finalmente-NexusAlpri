// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = postgresql://postgres:Amkj2025*..@db.gxpndcgiyrhcrrmuhhku.supabase.co:5432/postgres
  shadowDatabaseUrl = postgresql://postgres.gxpndcgiyrhcrrmuhhku:Amkj2025*..@aws-1-us-east-2.pooler.supabase.com:6543/postgres
  relationMode      = "prisma"
}

// --------------------------------------
// --- ENUMS ---
// --------------------------------------
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --------------------------------------
// --- AUTH & USER MODELS ---
// --------------------------------------
model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  name                String
  password            String
  avatar              String?
  role                UserRole               @default(STUDENT)
  isActive            Boolean                @default(true)
  registeredDate      DateTime               @default(now())
  lastLogin           DateTime?
  xp                  Int?                   @default(0)
  theme               String?
  updatedAt           DateTime               @updatedAt @default(now())
  isTwoFactorEnabled  Boolean                @default(false)
  twoFactorSecret     String?
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  securityLogs        SecurityLog[]
  createdEvents       CalendarEvent[]        @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]        @relation("AttendingEvents")
  userNotes           UserNote[]
  uploadedResources   EnterpriseResource[]
  sharedResources     EnterpriseResource[]   @relation("SharedResources")
  quizAttempts        QuizAttempt[]
  formResponses       FormResponse[]
  sharedForms         Form[]                 @relation("SharedForms")
  createdForms        Form[]
  notifications       Notification[]
  achievements        UserAchievement[]
  createdTemplates    LessonTemplate[]
}

// --- PLATFORM MODELS ---

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  instructorId    String
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt @default(now())
  publicationDate DateTime?
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt @default(now())
  templateId    String?
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id             String      @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  points     Int?            @default(0)
  feedback   String?
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  isCorrect        Boolean
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  completedAt DateTime?
  progress    CourseProgress?
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type         String // 'view', 'quiz', 'video'
  score        Float? // Score for quiz type
  completedAt  DateTime       @default(now())
  @@unique([progressId, lessonId])
}

// --- FORM MODELS ---
model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt @default(now())
  isQuiz       Boolean        @default(false)
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json[]
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     Answer[]
  score       Float?
}

model Answer {
  id         String     @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String
}


// --- GLOBAL CONTENT MODELS ---
model EnterpriseResource {
  id           String               @id @default(cuid())
  title        String
  type         ResourceType
  description  String?
  url          String?
  uploadDate   DateTime             @default(now())
  uploaderId   String
  uploader     User                 @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  category     String?
  tags         String?
  pin          String?
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id])
  children     EnterpriseResource[] @relation("FolderChildren")
  ispublic     Boolean              @default(true)
  sharedWith   User[]
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@unique([userId, lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', or a JSON array of roles
  priority  String   @default("Normal")
  updatedAt DateTime @updatedAt @default(now())
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean     @default(false)
  location            String?
  color               String?
  creatorId           String
  creator             User        @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]      @relation("AttendingEvents")
  audienceType        String // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  updatedAt           DateTime    @updatedAt @default(now())
  videoConferenceLink String?
  attachments         Json[]
}


// --- SYSTEM & SECURITY MODELS ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
}

model PlatformSettings {
  id                        String   @id @default("cl-nexus-settings-default")
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String? // Comma-separated domains
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @default(now())
  lessons        Lesson[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       String
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String?
  points      Int               @default(0)
  unlockedBy  UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@id([userId, achievementId])
}
