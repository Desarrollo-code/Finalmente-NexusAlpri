
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  registeredDate      DateTime         @default(now())
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  createdCourses      Course[]         @relation("InstructorCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  createdTemplates    LessonTemplate[] @relation("UserTemplates")
  uploadedResources   Resource[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]
  createdNotifications Notification[]
  securityLogs        SecurityLog[]
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  type          String?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  description  String?
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String    @unique
  questions    Question[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id       String       @id @default(cuid())
  text     String
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?   @db.Text
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@id([userId, courseId])
}

model CourseProgress {
  userId               String
  courseId             String
  enrollment           Enrollment @relation(fields: [userId, courseId], references: [userId, courseId], onDelete: Cascade)
  completedLessonIds   Json       @default("[]")
  progressPercentage   Float      @default(0)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@id([userId, courseId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String[]
  url          String?
  pin          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]   @relation("FolderChildren")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  date       DateTime
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json       @default("'ALL'")
  priority   String?
}

model CalendarEvent {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  start        DateTime
  end          DateTime
  allDay       Boolean  @default(false)
  location     String?
  color        String?
  creatorId    String
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  audienceType String   @default("ALL") // Can be 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees    User[]   @relation("EventAttendees")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String
  ipAddress    String
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?  @db.Text
  createdAt    DateTime @default(now())
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                          String   @id @default(cuid())
  platformName                String
  allowPublicRegistration     Boolean  @default(true)
  enableEmailNotifications    Boolean  @default(true)
  emailWhitelist              String?  @db.Text
  resourceCategories          Json     @default("[]")
  passwordMinLength           Int      @default(8)
  passwordRequireUppercase    Boolean  @default(true)
  passwordRequireLowercase    Boolean  @default(true)
  passwordRequireNumber       Boolean  @default(true)
  passwordRequireSpecialChar  Boolean  @default(true)
  enableIdleTimeout           Boolean  @default(true)
  idleTimeoutMinutes          Int      @default(20)
  require2faForAdmins         Boolean  @default(false)
  updatedAt                   DateTime @updatedAt
}
