// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  password             String
  avatar               String?
  role                 UserRole              @default(STUDENT)
  isTwoFactorEnabled   Boolean               @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime              @default(now())
  theme                String?
  xp                   Int?                  @default(0)
  isActive             Boolean               @default(true)
  createdCourses       Course[]
  enrollments          Enrollment[]
  notifications        Notification[]
  createdAnnouncements Announcement[]        @relation("CreatedAnnouncements")
  createdEvents        CalendarEvent[]
  uploadedResources    Resource[]
  notes                UserNote[]
  courseProgresses     CourseProgress[]
  createdTemplates     LessonTemplate[]
  createdForms         Form[]                @relation("FormCreator")
  sharedForms          Form[]                @relation("SharedForms")
  formResponses        FormResponse[]
  quizAttempts         QuizAttempt[]
  achievements         UserAchievement[]
  sharedResources      Resource[]            @relation("SharedResources")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@orderBy([order])
}

model Lesson {
  id            String                @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]

  @@orderBy([order])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@orderBy([order])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@orderBy([order])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean  @default(false)
  feedback  String?
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float?
  lastActivity        DateTime?                @updatedAt
  completedAt         DateTime?
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progressId  String
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // 'view' or 'quiz'
  completedAt DateTime        @default(now())
  score       Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId String
    quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    attemptNumber Int
    score Float
    submittedAt DateTime @default(now())
    answers AnswerAttempt[]
}

model AnswerAttempt {
    id String @id @default(cuid())
    attemptId String
    attempt QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId String
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime    @default(now())
  uploaderId   String?
  uploader     User?       @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?   @relation("FolderChildren", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[]  @relation("FolderChildren")
  ispublic     Boolean     @default(true)
  pin          String?
  sharedWith   User[]      @relation("SharedResources")
}

model Form {
    id              String          @id @default(cuid())
    title           String
    description     String?         @db.Text
    status          FormStatus      @default(DRAFT)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    creatorId       String
    creator         User            @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]          @relation("SharedForms")
    isQuiz          Boolean         @default(false)
}

model FormField {
    id           String           @id @default(cuid())
    label        String
    type         FormFieldType
    options      Json             @default("[]")
    required     Boolean          @default(false)
    placeholder  String?
    order        Int
    formId       String
    form         Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers      FormResponseAnswer[]

    @@orderBy([order])
}

model FormResponse {
    id           String           @id @default(cuid())
    formId       String
    form         Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId       String
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt  DateTime         @default(now())
    answers      FormResponseAnswer[]
    score        Float?
}

model FormResponseAnswer {
    id           String       @id @default(cuid())
    responseId   String
    response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId      String
    field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value        String       @db.Text
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Announcement {
  id       String       @id @default(cuid())
  title    String
  content  String       @db.Text
  date     DateTime
  authorId String
  priority String       @default("Normal")
  audience Json
  author   User         @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    title String
    description String?
    link String?
    read Boolean @default(false)
    createdAt DateTime @default(now())
}

model CalendarEvent {
    id String @id @default(cuid())
    title String
    description String? @db.Text
    start DateTime
    end DateTime
    allDay Boolean @default(false)
    location String?
    color String @default("blue")
    creatorId String
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    audienceType EventAudienceType @default(ALL)
    attendees User[]
    videoConferenceLink String?
    attachments Json @default("[]")
}

model SecurityLog {
    id String @id @default(cuid())
    event SecurityLogEvent
    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
    ipAddress String?
    userAgent String?
    createdAt DateTime @default(now())
    details String?
    emailAttempt String?
    country String?
    city String?
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lessonId])
}

model Achievement {
    id String @id @default(cuid())
    name String
    description String
    slug String @unique
    icon String
    points Int @default(0)
    users UserAchievement[]
}

model UserAchievement {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt DateTime @default(now())
    
    @@unique([userId, achievementId])
}

model PlatformSettings {
    id                          String    @id @default(cuid())
    platformName                String    @default("NexusAlpri")
    allowPublicRegistration     Boolean   @default(true)
    enableEmailNotifications    Boolean   @default(true)
    emailWhitelist              String?   @db.Text
    require2faForAdmins         Boolean   @default(false)
    idleTimeoutMinutes          Int       @default(20)
    enableIdleTimeout           Boolean   @default(true)
    passwordMinLength           Int       @default(8)
    passwordRequireUppercase    Boolean   @default(true)
    passwordRequireLowercase    Boolean   @default(true)
    passwordRequireNumber       Boolean   @default(true)
    passwordRequireSpecialChar  Boolean   @default(true)
    resourceCategories          String    @db.Text
    primaryColor                String?
    secondaryColor              String?
    accentColor                 String?
    backgroundColorLight        String?
    primaryColorDark            String?
    backgroundColorDark         String?
    fontHeadline                String?
    fontBody                    String?
    logoUrl                     String?
    watermarkUrl                String?
    landingImageUrl             String?
    authImageUrl                String?
    aboutImageUrl               String?
    benefitsImageUrl            String?
    updatedAt                   DateTime  @updatedAt
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
    SINGLE_CHOICE
    MULTIPLE_CHOICE
    TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
    SYSTEM
    USER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

