
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTHENTICATION MODELS ---
model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  role                UserRole         @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?        @default(now())
  
  // Relations
  courses             Course[]         @relation("AuthoredCourses") // Courses taught by this user
  enrollments         Enrollment[]
  progress            CourseProgress[]
  announcements       Announcement[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  
  createdEvents       CalendarEvent[]  @relation("CreatedEvents")
  attendedEvents      CalendarEvent[]  @relation("AttendedEvents")
  
  uploadedResources   Resource[]       @relation("UploadedResources")
  lessonTemplates     LessonTemplate[] @relation("UserTemplates")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE & CONTENT MODELS ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?          @relation("AuthoredCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]
  
  @@unique([courseId, order])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  
  @@unique([moduleId, order])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?
  
  @@unique([lessonId, order])
}


// --- QUIZ MODELS ---
model Quiz {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  
  // Relations
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions     Question[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id      String       @id @default(cuid())
  text    String       @db.Text
  type    QuestionType
  order   Int
  
  // Relations
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options AnswerOption[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String  @db.Text
  isCorrect  Boolean
  feedback   String? @db.Text
  
  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}


// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float     @default(0)
  completedLessonIds Json      @default("[]") // Stores array of { lessonId, type, score? }
  updatedAt          DateTime  @updatedAt
  
  // Relations
  enrollmentId String     @unique
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}


// --- PLATFORM RESOURCES ---
model Resource {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text
  type         ResourceType
  category     String
  tags         Json
  url          String?
  pin          String?
  uploadDate   DateTime      @default(now())
  
  // Relations
  uploaderId   String?
  uploader     User?         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parentId     String?
  parent       Resource?     @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]    @relation("FolderChildren")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}


// --- COMMUNICATION MODELS ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json     // Can store 'ALL' or an array like ['STUDENT', 'INSTRUCTOR']
  priority  String?  @default("Normal")
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  attachments         Json     @default("[]") // Store array of { name: string, url: string }
  audienceType        String   // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  creatorId           String
  creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees           User[]   @relation("AttendedEvents")
}

// --- PLATFORM SETTINGS & LOGGING ---
model PlatformSettings {
  id                        Int      @id @default(1)
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text // Comma-separated
  require2faForAdmins       Boolean  @default(false)
  idleTimeoutMinutes        Int      @default(20)
  enableIdleTimeout         Boolean  @default(true)
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  resourceCategories        Json     @default("[\"General\"]")
  updatedAt                 DateTime @updatedAt
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  
  // Relations
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- TEMPLATES ---
model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?   @db.Text
  type           TemplateType
  
  // Relations
  creatorId      String?
  creator        User?     @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id                String     @id @default(cuid())
  type              LessonType
  order             Int
  
  // Relations
  lessonTemplateId  String
  lessonTemplate    LessonTemplate @relation(fields: [lessonTemplateId], references: [id], onDelete: Cascade)
}
