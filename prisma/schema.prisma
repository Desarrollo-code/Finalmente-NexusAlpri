// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER AND AUTH MODELS ---
model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  theme                 String?   @default("dark") // Tema del usuario

  // Relations
  courses         Course[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  resources       Resource[]       @relation("UploadedBy")
  announcements   Announcement[]
  notifications   Notification[]
  createdEvents   CalendarEvent[]  @relation("CreatedBy")
  attendedEvents  CalendarEvent[]  @relation("Attendees")
  sharedResources Resource[]       @relation("SharedWith")
  securityLogs    SecurityLog[]
  createdTemplates LessonTemplate[] @relation("CreatedBy")

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE MODELS ---
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  instructorId String?
  instructor   User?    @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}


model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}


model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  moduleId       String
  module         Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  
  @@index([moduleId])
}


enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  
  @@index([lessonId])
}


// --- QUIZ MODELS ---
model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  
  // Relations
  contentBlockId String       @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id      String       @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  
  // Relations
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text
  
  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

// --- USER PROGRESS MODELS ---
model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  CourseProgress?

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  
  // Relations
  enrollmentId      String @unique
  enrollment        Enrollment @relation(fields: [enrollmentId], references: [userId, courseId], onDelete: Cascade)
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // "view" or "quiz"
    score       Float? // Score for quizzes
    completedAt DateTime @default(now())

    @@unique([progressId, lessonId])
    @@index([progressId])
    @@index([lessonId])
}

// --- GLOBAL CONTENT MODELS ---
model Resource {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  type          ResourceType
  url           String?
  category      String
  tags          String?
  uploadDate    DateTime @default(now())
  pin           String?
  
  ispublic    Boolean @default(true)
  
  // Relations
  uploaderId    String?
  uploader      User?     @relation("UploadedBy", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]@relation("FolderChildren")
  sharedWith    User[]    @relation("SharedWith")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime
  audience  Json     // Can be "ALL" or an array of UserRole strings
  priority  String?  @default("Normal")
  
  // Relations
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  color               String   @default("blue")
  audienceType        String   // "ALL", a UserRole, or "SPECIFIC"
  attachments         Json?
  
  // Relations
  creatorId String?
  creator   User?    @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: SetNull)
  attendees User[]   @relation("Attendees")

  @@index([creatorId])
}


// --- SYSTEM AND CONFIGURATION MODELS ---
model PlatformSettings {
    id                         String  @id @default(cuid())
    platformName               String  @default("NexusAlpri")
    allowPublicRegistration    Boolean @default(true)
    enableEmailNotifications   Boolean @default(true)
    emailWhitelist             String? @db.Text // Comma-separated list of emails
    resourceCategories         String  @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
    passwordMinLength          Int     @default(8)
    passwordRequireUppercase   Boolean @default(true)
    passwordRequireLowercase   Boolean @default(true)
    passwordRequireNumber      Boolean @default(true)
    passwordRequireSpecialChar Boolean @default(true)
    enableIdleTimeout          Boolean @default(true)
    idleTimeoutMinutes         Int     @default(20)
    require2faForAdmins        Boolean @default(false)
    updatedAt                  DateTime @updatedAt
}

model SecurityLog {
    id              String @id @default(cuid())
    event           String
    ipAddress       String
    details         String? @db.Text
    createdAt       DateTime @default(now())
    
    userId          String?
    user            User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    emailAttempt    String?
    
    @@index([userId])
    @@index([event])
}

model LessonTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // "SYSTEM" or "USER"
  createdAt       DateTime @default(now())
  
  // Relations
  creatorId       String?
  creator         User?             @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  
  @@index([creatorId])
}

model TemplateBlock {
  id            String   @id @default(cuid())
  type          LessonType
  order         Int
  
  // Relations
  templateId    String
  template      LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}
