// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime? @default(now())
  isActive              Boolean   @default(true)
  theme                 String?
  xp                    Int?      @default(0)

  // Relations
  coursesOwned          Course[]                 @relation("CourseInstructor")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  announcements         Announcement[]
  calendarEventsCreated CalendarEvent[]          @relation("EventCreator")
  calendarEvents        CalendarEvent[]          @relation("EventAttendees")
  resourcesUploaded     Resource[]               @relation("ResourceUploader")
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  notes                 UserNote[]
  lessonTemplates       LessonTemplate[]
  formResponses         FormResponse[]
  createdForms          Form[]                   @relation("FormCreator")
  sharedForms           Form[]                   @relation("FormSharedWith")
  achievements          UserAchievement[]
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId String?
  instructor   User?        @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: SetNull)
  modules      Module[]
  enrollments  Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  progressRecords LessonCompletionRecord[]
  notes         UserNote[]
  templates     LessonTemplate[] @relation("TemplateFromLesson")
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id            String        @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?
  contentBlockId String        @unique
  contentBlock  ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id       String       @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean        @default(false)
  feedback    String?
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String      @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  enrollmentId       String?                  @unique
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id           String   @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime @default(now())
  type         String   // e.g., 'view', 'quiz', 'video'
  score        Float?   // Score if it's a quiz

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  submittedAt   DateTime      @default(now())
  attemptNumber Int
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  url         String?
  category    String?
  tags        String?  // Comma-separated
  uploadDate  DateTime @default(now())
  uploaderId  String?
  uploader    User?    @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin      Boolean  @default(false)
  pin         String?

  // For folder structure
  parentId String?
  parent   Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Resource[] @relation("FolderContent")
  
  // For sharing
  ispublic Boolean @default(true)
  sharedWith User[] @relation("ResourceSharedWith")
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  audienceType        EventAudienceType @default(ALL)
  color               String?
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  details      String?
  city         String?
  country      String?
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String // "ALL" or comma-separated roles like "STUDENT,INSTRUCTOR"
  priority  String   @default("Normal") // Normal, Urgente
}

model LessonTemplate {
  id             String   @id @default(cuid())
  name           String
  description    String?
  type           TemplateType @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessonOriginId String?   @unique
  lessonOrigin   Lesson?   @relation("TemplateFromLesson", fields: [lessonOriginId], references: [id], onDelete: SetNull)
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated domains
  resourceCategories        String    @default("General,Recursos Humanos,TI,Marketing")
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Theming
  primaryColor        String?   @default("#6366f1") // Indigo 500
  secondaryColor      String?   @default("#a5b4fc") // Indigo 300
  accentColor         String?   @default("#ec4899") // Pink 500
  backgroundColorLight String?  @default("#f8fafc") // Slate 50
  primaryColorDark    String?   @default("#a5b4fc") // Indigo 300
  backgroundColorDark String?   @default("#020617") // Slate 950
  fontHeadline        String?   @default("Space Grotesk")
  fontBody            String?   @default("Inter")
  
  // Images
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Form {
    id              String @id @default(cuid())
    title           String
    description     String? @db.Text
    status          FormStatus @default(DRAFT)
    isQuiz          Boolean @default(false)
    creatorId       String
    creator         User   @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields          FormField[]
    responses       FormResponse[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    sharedWith      User[] @relation("FormSharedWith")
}

model FormField {
    id              String @id @default(cuid())
    formId          String
    form            Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    label           String
    type            FormFieldType
    placeholder     String?
    required        Boolean @default(false)
    options         Json @default("[]")
    order           Int
}

model FormResponse {
    id              String @id @default(cuid())
    formId          String
    form            Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers         Json
    score           Float?
    submittedAt     DateTime @default(now())
}

model Achievement {
    id          String @id @default(cuid())
    slug        AchievementSlug @unique
    name        String
    description String
    points      Int
    icon        String
    users       UserAchievement[]
}

model UserAchievement {
    id            String @id @default(cuid())
    userId        String
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    unlockedAt    DateTime @default(now())

    @@unique([userId, achievementId])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}
