generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum EventAudienceType {
  PUBLIC
  PRIVATE
  CUSTOM
}

enum FormType {
  SURVEY
  QUIZ
  REGISTRATION
}

// --- MODELOS PRINCIPALES ---

model User {
  id                    String               @id @default(cuid())
  name                  String
  email                 String               @unique
  password              String
  role                  UserRole             @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean              @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime             @default(now())
  lastLogin             DateTime?
  isActive              Boolean              @default(true)
  xp                    Int                  @default(0)

  enrollments           Enrollment[]         @relation("UserEnrollments")
  coursesTaught         Course[]             @relation("InstructorCourses")
  announcements         Announcement[]       @relation("Author")
  createdEvents         CalendarEvent[]      @relation("EventCreators")
  attendedEvents        CalendarEvent[]      @relation("EventAttendees")
  uploadedResources     Resource[]           @relation("Uploader")
  securityLogs          SecurityLog[]
  userAchievements      UserAchievement[]
  createdTemplates      LessonTemplate[]
  notes                 UserNote[]
  formResponses         FormResponse[]
  sharedForms           Form[]               @relation("FormSharedWith")
  createdForms          Form[]               @relation("FormCreator")
  sharedResources       Resource[]           @relation("ResourceSharedWith")
  progress              CourseProgress[]     @relation("UserProgress", references: [id])
  quizAttempts          QuizAttempt[]
  notifications         Notification[]       @relation("UserNotifications")
}

model Course {
  id                String           @id @default(cuid())
  title             String
  description       String           @db.Text
  imageUrl          String?
  category          String?
  status            CourseStatus     @default(DRAFT)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  publicationDate   DateTime?
  instructorId      String?
  instructor        User?            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]
}

model Module {
  id       String  @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id             String                  @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  notes          UserNote[]
}

model ContentBlock {
  id        String       @id @default(cuid())
  type      LessonType
  content   String?      @db.Text
  order     Int
  lessonId  String
  lesson    Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id            String       @id @default(cuid())
  title         String
  description   String?
  maxAttempts   Int?
  contentBlockId String      @unique
  contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id             String         @id @default(cuid())
  text           String
  order          Int
  quizId         String
  quiz           Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options        AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id             String         @id @default(cuid())
  text           String
  isCorrect      Boolean        @default(false)
  feedback       String?
  questionId     String
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerAttempts AnswerAttempt[]
}

// --- PROGRESO E INSCRIPCIÓN ---

model Enrollment {
  id         String      @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime    @default(now())
  user       User        @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String      @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float       @default(0)
  completedAt        DateTime?
  enrollmentId       String?     @unique
  user               User        @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course             Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id         String           @id @default(cuid())
  progressId String
  lessonId   String
  type       String
  score      Float?
  completedAt DateTime        @default(now())

  progress   CourseProgress   @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson     Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id           String       @id @default(cuid())
  userId       String
  quizId       String
  attemptNumber Int
  score        Float
  submittedAt  DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      AnswerAttempt[]
}

model AnswerAttempt {
  id               String        @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String  @id @default(cuid())
  userId    String
  lessonId  String
  content   String  @db.Text
  color     String  @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// --- Recursos ---

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  type        String
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime  @default(now())
  uploaderId  String?
  pin         String?
  parentId    String?
  ispublic    Boolean   @default(true)

  uploader    User?     @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parent      Resource? @relation("FolderChildren", fields: [parentId], references: [id])
  children    Resource[] @relation("FolderChildren")
  sharedWith  User[]    @relation("ResourceSharedWith")
}

// --- Notificaciones ---

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

// --- Eventos ---

model CalendarEvent {
  id          String           @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  audienceType EventAudienceType
  creatorId   String
  creator     User             @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees   User[]           @relation("EventAttendees")
}

// --- Formularios ---

model Form {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        FormType
  creatorId   String
  creator     User         @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  sharedWith  User[]       @relation("FormSharedWith")
  responses   FormResponse[]
}

model FormResponse {
  id        String   @id @default(cuid())
  userId    String
  formId    String
  answers   String   @db.Text
  submittedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
}

// --- Logs y Gamificación ---

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAchievement {
  id          String   @id @default(cuid())
  userId      String
  achievement String
  earnedAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonTemplate {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}
