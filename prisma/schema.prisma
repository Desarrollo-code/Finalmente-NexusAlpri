// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}


// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum NotificationType {
  NEW_COURSE
  ANNOUNCEMENT
  COURSE_COMPLETED
  ACHIEVEMENT_UNLOCKED
  MENTION
  SYSTEM
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// --- MODELS ---

model User {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  password            String
  avatar              String?
  role                UserRole          @default(STUDENT)
  isTwoFactorEnabled  Boolean           @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime          @default(now())
  lastLogin           DateTime?
  xp                  Int               @default(0)
  isActive            Boolean           @default(true)
  // Relations
  enrollments         Enrollment[]
  createdCourses      Course[]          @relation("CreatedCourses")
  uploadedResources   Resource[]        @relation("UploadedResources")
  announcements       Announcement[]
  securityLogs        SecurityLog[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]   @relation("CreatedEvents")
  attendedEvents      CalendarEvent[]   @relation("EventAttendees")
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  userAchievements    UserAchievement[]
  createdForms        Form[]            @relation("CreatedForms")
  formResponses       FormResponse[]
  sharedResources     Resource[]        @relation("SharedResources")
  sharedForms         Form[]            @relation("SharedForms") // ðŸ”¥ agregado
  createdLessonTemplates LessonTemplate[] @relation("UserLessonTemplates") // ðŸ”¥ agregado
  quizAttempts        QuizAttempt[] // ðŸ”¥ agregado
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String?       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publicationDate DateTime?
  // Relations
  instructorId    String?
  instructor      User?         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]   // ðŸ”¥ agregado

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String          @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  answers   AnswerAttempt[]
}

model AnswerOption {
  id            String          @id @default(cuid())
  text          String
  isCorrect     Boolean         @default(false)
  feedback      String?
  questionId    String
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime        @default(now())
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String                  @id @default(cuid())
  userId              String
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progressPercentage  Float                   @default(0)
  completedAt         DateTime?
  enrollmentId        String                  @unique
  enrollment          Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String        @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime      @default(now())
  type        String        @default("view") // 'view' or 'quiz' or 'video'
  score       Float?

  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  createdAt   DateTime     @default(now())
  uploaderId  String?
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  hasPin      Boolean      @default(false)
  pin         String?
  parentId    String?      @map("parent_id")
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderChildren")
  ispublic    Boolean      @default(true)
  sharedWith  User[]       @relation("SharedResources")

  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  String   @default("ALL") // Can be 'ALL', or a UserRole
  priority  String   @default("Normal") // Normal, Urgente
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  audienceType        EventAudienceType  @default(ALL)
  attendees           User[]             @relation("EventAttendees")
  color               String             @default("blue")
  creatorId           String
  creator             User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  videoConferenceLink String?
  attachments         Json[]             @default([])
}

model SecurityLog {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event        String
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  details      String?
  country      String?
  city         String?
  emailAttempt String?

  @@index([userId])
  @@index([createdAt])
}

model PlatformSettings {
  id                        String  @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String?

  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(false)

  enableIdleTimeout         Boolean @default(true)
  idleTimeoutMinutes        Int     @default(20)
  require2faForAdmins       Boolean @default(false)

  resourceCategories        String

  primaryColor        String?
  secondaryColor      String?
  accentColor         String?
  backgroundColorLight String?
  fontHeadline        String?
  fontBody            String?
  primaryColorDark    String?
  backgroundColorDark String?
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?

  updatedAt           DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]
}

model UserAchievement {
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId   String
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt      DateTime    @default(now())

  @@id([userId, achievementId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("USER")
  creatorId      String?
  creator        User?           @relation("UserLessonTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
}

model TemplateBlock {
  id               String         @id @default(cuid())
  type             LessonType
  order            Int
  lessonTemplateId String
  lessonTemplate   LessonTemplate @relation(fields: [lessonTemplateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  isQuiz       Boolean        @default(false)
  sharedWith   User[]         @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id           String         @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json?
  required     Boolean        @default(false)
  placeholder  String?
  order        Int
  formId       String
  form         Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id           String       @id @default(cuid())
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime     @default(now())
  answers      FormAnswer[]
  score        Float?

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id           String       @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId      String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value        String       @db.Text

  @@index([responseId])
  @@index([fieldId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}
