// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  avatar               String?
  role                 UserRole          @default(STUDENT)
  isTwoFactorEnabled   Boolean           @default(false)
  twoFactorSecret      String?
  registeredDate       DateTime?         @default(now())
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  theme                String?           @default("dark")
  xp                   Int?              @default(0)

  // Relationships
  createdCourses      Course[]           @relation("InstructorCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  createdAnnouncements Announcement[]    @relation("AnnouncementAuthor")
  createdEvents       CalendarEvent[]    @relation("EventAttendees")
  createdResources    EnterpriseResource[] @relation("ResourceUploader")
  sharedResources     EnterpriseResource[] @relation("SharedWithUsers")
  notes               UserNote[]
  achievements        UserAchievement[]
  createdForms        Form[]             @relation("FormCreator")
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]
  quizAttempts        QuizAttempt[]

  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model SecurityLog {
  id            String   @id @default(cuid())
  event         SecurityLogEvent
  userId        String?
  emailAttempt  String?
  ipAddress     String?
  userAgent     String?
  country       String?
  city          String?
  details       String?
  createdAt     DateTime @default(now())
  
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- COURSE MODELS ---
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  instructorId    String
  instructor      User        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  notes          UserNote[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  contentBlockId String @unique

  contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  type    QuestionType
  order   Int
  quizId  String

  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id        String   @id @default(cuid())
  text      String   @db.Text
  isCorrect Boolean
  feedback  String?  @db.Text
  questionId String

  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// --- USER PROGRESS MODELS ---
model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  enrollmentId    String   @unique
  progressPercentage Float?

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id         String  @id @default(cuid())
    progressId String
    lessonId   String
    type       String // 'view' or 'quiz'
    score      Float?

    progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson     Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model UserNote {
  id          String      @id @default(cuid())
  userId      String
  lessonId    String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model QuizAttempt {
  id          String      @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  submittedAt DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String      @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String

  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


// --- GENERAL PLATFORM MODELS ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?  @default("Normal")
  
  authorId  String
  author    User     @relation("AnnouncementAuthor", fields: [authorId], references: [id])

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  location    String?
  start       DateTime
  end         DateTime
  allDay      Boolean  @default(false)
  audienceType EventAudienceType @default(ALL)
  color       String?  @default("blue")
  videoConferenceLink String?
  attachments Json[]

  creatorId   String
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees   User[]   @relation("EventAttendees")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


model EnterpriseResource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  type        ResourceType
  url         String?     @db.Text
  category    String?
  tags        String?
  uploadDate  DateTime    @default(now())
  hasPin      Boolean     @default(false)
  pin         String?
  ispublic    Boolean     @default(true)
  
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    EnterpriseResource[] @relation("FolderHierarchy")

  uploaderId  String
  uploader    User @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: Cascade)

  sharedWith  User[] @relation("SharedWithUsers")
  
  @@index([parentId])
  @@index([uploaderId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

// --- PLATFORM SETTINGS ---
model PlatformSettings {
  id                  String   @id @default(cuid())
  platformName        String   @default("NexusAlpri")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  allowPublicRegistration Boolean  @default(true)
  enableEmailNotifications Boolean @default(true)
  emailWhitelist      String?
  resourceCategories  String   @db.Text
  passwordMinLength   Int      @default(8)
  passwordRequireUppercase Boolean @default(true)
  passwordRequireLowercase Boolean @default(true)
  passwordRequireNumber    Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout   Boolean  @default(true)
  idleTimeoutMinutes  Int      @default(20)
  require2faForAdmins Boolean  @default(false)
  updatedAt           DateTime @updatedAt
  
  primaryColor        String   @default("#6366f1") // Indigo 500
  secondaryColor      String   @default("#a5b4fc") // Indigo 300
  accentColor         String   @default("#ec4899") // Pink 500
  backgroundColorLight String  @default("#f8fafc") // Slate 50
  
  primaryColorDark    String   @default("#a5b4fc") // Indigo 300
  backgroundColorDark String   @default("#020617") // Slate 950

  fontHeadline        String   @default("Space Grotesk")
  fontBody            String   @default("Inter")
}

// --- TEMPLATES ---
model LessonTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String?     @db.Text
  type            TemplateType
  
  creatorId       String?
  creator         User?       @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String

  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

enum TemplateType {
  SYSTEM
  USER
}

// --- GAMIFICATION ---
model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  icon        String?
  points      Int      @default(50)

  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}


// --- FORMS ---
model Form {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId   String
  creator     User     @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  fields      FormField[]
  responses   FormResponse[]
  sharedWith  Json? // Could store user or role IDs
  
  @@index([creatorId])
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean  @default(false)
  options     Json     @default("[]")
  order       Int
  
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?   // Score for quizzes
  
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text

  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
    