// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
// Se añaden los enums que faltaban para resolver el error de validación.
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  password            String
  avatar              String?
  role                UserRole          @default(STUDENT)
  xp                  Int               @default(0)
  registeredDate      DateTime          @default(now())
  isActive            Boolean           @default(true)
  isTwoFactorEnabled  Boolean           @default(false)
  twoFactorSecret     String?
  lastLogin           DateTime?
  lastActivity        DateTime?
  coursesAsInstructor Course[]          @relation("InstructorCourses")
  enrollments         Enrollment[]
  notes               UserNote[]
  resourcesUploaded   Resource[]
  createdEvents       CalendarEvent[]   @relation("EventCreator")
  attendedEvents      CalendarEvent[]   @relation("EventAttendees")
  notifications       Notification[]
  securityLogs        SecurityLog[]
  achievements        UserAchievement[]
  formResponses       FormResponse[]
  createdForms        Form[]            @relation("FormCreator")
  sharedForms         Form[]            @relation("SharedWithUsers")
  quizAttempts        QuizAttempt[]
  sharedResources     Resource[]        @relation("SharedResources")
  announcements       Announcement[]
  createdTemplates    LessonTemplate[]  @relation("LessonTemplateCreator")

  @@map("User")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String
  instructor      User           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]

  @@map("Course")
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
  @@map("Module")
}

model Lesson {
  id              String                   @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completions     LessonCompletionRecord[]
  notes           UserNote[]

  @@index([moduleId])
  @@map("Lesson")
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
  @@map("ContentBlock")
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@map("Quiz")
}

model Question {
  id         String          @id @default(cuid())
  text       String
  order      Int
  quizId     String
  quiz       Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options    AnswerOption[]
  answers    AnswerAttempt[]

  @@index([quizId])
  @@map("Question")
}

model AnswerOption {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false)
  feedback   String?
  points     Int             @default(0)
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts   AnswerAttempt[]

  @@index([questionId])
  @@map("AnswerOption")
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage  Float                    @default(0)
  completedAt         DateTime?
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("CourseProgress")
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String         @default("view")
  score       Float?

  @@unique([progressId, lessonId])
  @@map("LessonCompletionRecord")
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
  @@map("QuizAttempt")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@map("AnswerAttempt")
}

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  uploadDate  DateTime      @default(now())
  category    String?
  tags        String?
  pin         String?
  ispublic    Boolean       @default(true)
  uploaderId  String
  uploader    User          @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    Resource[]    @relation("FolderHierarchy")
  sharedWith  User[]        @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
  @@map("Resource")
}


model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String
  date     DateTime @default(now())
  audience String
  priority String   @default("Normal")
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@map("Announcement")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType
  color               String?           @default("blue")
  attachments         Json[]            @default([])
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
  @@map("CalendarEvent")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([event])
  @@map("SecurityLog")
}

model PlatformSettings {
  id                        String   @id @default("cl-nexus-settings-default")
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Achievement {
  id          String            @id @default(cuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]

  @@map("Achievement")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@map("UserAchievement")
}

model LessonTemplate {
  id              String            @id @default(cuid())
  name            String
  description     String?
  type            String            @default("USER") // SYSTEM or USER
  creatorId       String?
  creator         User?             @relation("LessonTemplateCreator", fields: [creatorId], references: [id])
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  sharedWith  User[]         @relation("SharedWithUsers")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]

  @@index([creatorId])
  @@map("Form")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json[]        @default([]) // [{ "id": "...", "text": "...", "isCorrect": false, "points": 0 }]
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@map("FormField")
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime     @default(now())
  score       Float?
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
  @@map("FormResponse")
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String

  @@index([responseId])
  @@map("FormAnswer")
}