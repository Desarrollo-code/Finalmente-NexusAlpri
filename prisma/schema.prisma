// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  name                String
  password            String
  role                UserRole     @default(STUDENT)
  avatar              String?
  isActive            Boolean      @default(true)
  registeredDate      DateTime     @default(now())
  lastLogin           DateTime?
  xp                  Int          @default(0)

  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?

  createdCourses      Course[]     @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  uploadedResources   Resource[]
  sharedResources     Resource[]    @relation("SharedWithUsers")

  notifications       Notification[]
  announcements       Announcement[]
  createdEvents       CalendarEvent[] @relation("EventCreator")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")

  securityLogs        SecurityLog[]
  userAchievements    UserAchievement[]
  
  createdForms        Form[]
  formResponses       FormResponse[]
  sharedForms         Form[]         @relation("SharedFormsWithUsers")
  createdTemplates    LessonTemplate[]

  quizAttempts        QuizAttempt[]

  @@index([email])
}

model Course {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  imageUrl            String?
  category            String?
  status              CourseStatus @default(DRAFT)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  publicationDate     DateTime?

  instructorId        String
  instructor          User         @relation("InstructorCourses", fields: [instructorId], references: [id])

  modules             Module[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
}

model Module {
  id                  String       @id @default(cuid())
  title               String
  order               Int

  courseId            String
  course              Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons             Lesson[]
}

model Lesson {
  id                  String       @id @default(cuid())
  title               String
  order               Int

  moduleId            String
  module              Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks       ContentBlock[]
  completionRecords   LessonCompletionRecord[]
  notes               UserNote[]
}

model ContentBlock {
  id                  String       @id @default(cuid())
  type                LessonType
  content             String?      @db.Text
  order               Int
  
  lessonId            String
  lesson              Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz                Quiz?
}


// --- QUIZ MODELS ---

model Quiz {
  id                  String       @id @default(cuid())
  title               String
  description         String?
  contentBlockId      String       @unique
  contentBlock        ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  maxAttempts         Int?
  
  questions           Question[]
  attempts            QuizAttempt[]
}

model Question {
  id                  String       @id @default(cuid())
  text                String
  order               Int
  
  quizId              String
  quiz                Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options             AnswerOption[]
  answerAttempts      AnswerAttempt[]
}

model AnswerOption {
  id                  String       @id @default(cuid())
  text                String
  isCorrect           Boolean      @default(false)
  feedback            String?
  
  questionId          String
  question            Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt       AnswerAttempt[]
}

model QuizAttempt {
  id                  String       @id @default(cuid())
  userId              String
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId              String
  quiz                Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber       Int
  score               Float
  submittedAt         DateTime     @default(now())

  answers             AnswerAttempt[]
}

model AnswerAttempt {
    id                  String        @id @default(cuid())
    attemptId           String
    attempt             QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId          String
    question            Question      @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    selectedOptionId    String
    selectedOption      AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


// --- PROGRESS & ENROLLMENT ---

model Enrollment {
  id                  String       @id @default(cuid())
  userId              String
  courseId            String
  enrolledAt          DateTime     @default(now())
  
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  progress            CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String       @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float        @default(0)
  completedAt         DateTime?
  
  enrollmentId        String       @unique
  enrollment          Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  completedLessons    LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id                  String       @id @default(cuid())
  progressId          String
  progress            CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId            String
  lesson              Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type                String       // 'view', 'quiz', 'video', etc.
  score               Float?       // Score for quizzes
  completedAt         DateTime     @default(now())

  @@unique([progressId, lessonId])
}


// --- GLOBAL CONTENT ---

model Resource {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  type                String       // FOLDER, DOCUMENT, VIDEO, LINK, etc.
  url                 String?
  category            String?
  tags                String?      // Comma-separated
  uploadDate          DateTime     @default(now())
  hasPin              Boolean      @default(false)
  pin                 String?
  ispublic            Boolean      @default(true)

  parentId            String?
  parent              Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children            Resource[]   @relation("FolderHierarchy")

  uploaderId          String?
  uploader            User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  sharedWith          User[]       @relation("SharedWithUsers")
}

model Announcement {
  id                  String       @id @default(cuid())
  title               String
  content             String       @db.Text
  date                DateTime     @default(now())
  audience            String       // 'ALL' or JSON array of roles like '["STUDENT", "INSTRUCTOR"]'
  
  authorId            String
  author              User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String        @id @default(cuid())
  title               String
  description         String?       @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean       @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  audienceType        String        // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  attachments         Json?

  creatorId           String
  creator             User          @relation("EventCreator", fields: [creatorId], references: [id])
  
  attendees           User[]        @relation("EventAttendees")
}

model Notification {
  id                  String       @id @default(cuid())
  userId              String
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title               String
  description         String?
  link                String?
  read                Boolean      @default(false)
  createdAt           DateTime     @default(now())
}

model UserNote {
    id                  String      @id @default(cuid())
    userId              String
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId            String
    lesson              Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content             String      @db.Text
    color               String      @default("yellow")
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    @@unique([userId, lessonId])
}


// --- SYSTEM & CONFIGURATION ---

model PlatformSettings {
  id                        String      @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean     @default(true)
  enableEmailNotifications  Boolean     @default(true)
  emailWhitelist            String?     // Comma-separated domains
  resourceCategories        String      // Comma-separated
  
  // Password Policy
  passwordMinLength         Int         @default(8)
  passwordRequireUppercase  Boolean     @default(true)
  passwordRequireLowercase  Boolean     @default(true)
  passwordRequireNumber     Boolean     @default(true)
  passwordRequireSpecialChar Boolean    @default(true)
  
  // Security
  enableIdleTimeout         Boolean     @default(true)
  idleTimeoutMinutes        Int         @default(20)
  require2faForAdmins       Boolean     @default(false)

  // Appearance
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?
  fontBody                  String?
  
  updatedAt                 DateTime    @updatedAt
}

model SecurityLog {
  id                  String           @id @default(cuid())
  event               SecurityLogEvent
  ipAddress           String?
  userId              String?
  user                User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt        String?
  details             String?
  userAgent           String?
  city                String?
  country             String?
  createdAt           DateTime         @default(now())

  @@index([userId])
}


// --- GAMIFICATION ---

model Achievement {
  id                  String            @id @default(cuid())
  slug                AchievementSlug   @unique
  name                String
  description         String
  icon                String?
  points              Int
  
  userAchievements    UserAchievement[]
}

model UserAchievement {
  id                  String            @id @default(cuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId       String
  achievement         Achievement       @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt          DateTime          @default(now())

  @@unique([userId, achievementId])
}


// --- LESSON TEMPLATES ---

model LessonTemplate {
  id                  String       @id @default(cuid())
  name                String
  description         String?
  type                String       // 'SYSTEM' or 'USER'
  
  creatorId           String?
  creator             User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks      TemplateBlock[]
}

model TemplateBlock {
  id                  String       @id @default(cuid())
  type                LessonType
  order               Int
  
  templateId          String
  template            LessonTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
}


// --- FORMS ---

model Form {
    id              String      @id @default(cuid())
    title           String
    description     String?     @db.Text
    status          FormStatus  @default(DRAFT)
    isQuiz          Boolean     @default(false)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    creatorId       String
    creator         User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    
    fields          FormField[]
    responses       FormResponse[]

    sharedWith      User[]      @relation("SharedFormsWithUsers")
}

model FormField {
    id              String          @id @default(cuid())
    label           String
    type            FormFieldType
    placeholder     String?
    options         Json?           // Para 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
    required        Boolean         @default(false)
    order           Int

    formId          String
    form            Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    
    answers         FormAnswer[]
}

model FormResponse {
    id              String      @id @default(cuid())
    formId          String
    form            Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt     DateTime    @default(now())
    score           Float?      // Puntuación si es un quiz

    answers         FormAnswer[]
}

model FormAnswer {
    id              String      @id @default(cuid())
    responseId      String
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    fieldId         String
    field           FormField   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    value           String      @db.Text
}
