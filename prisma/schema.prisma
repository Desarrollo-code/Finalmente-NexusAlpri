// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL") // Used for migrations
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  password                String?
  avatar                  String?
  role                    UserRole               @default(STUDENT)
  isActive                Boolean                @default(true)
  registeredDate          DateTime               @default(now())
  theme                   String?
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorSecret         String?
  xp                      Int                    @default(0)

  // Relations
  coursesCreated          Course[]               @relation("CourseInstructor")
  enrollments             Enrollment[]
  announcements           Announcement[]
  eventsCreated           CalendarEvent[]        @relation("EventCreator")
  eventsAttending         CalendarEvent[]        @relation("EventAttendees")
  courseProgress          CourseProgress[]       @relation("UserProgress")
  userNotes               UserNote[]
  achievements            UserAchievement[]
  uploadedResources       Resource[]             @relation("UploadedResources")
  sharedResources         Resource[]             @relation("SharedResources")
  securityLogs            SecurityLog[]
  createdForms            Form[]                 @relation("CreatedForms")
  formResponses           FormResponse[]
  formsSharedWith         Form[]                 @relation("FormSharedWith")
  quizAttempts            QuizAttempt[]

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?

  // Relations
  instructorId    String
  instructor      User           @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
  @@index([category])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String         @db.Text
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[] // Relation inverse

  @@index([quizId])
}

model AnswerOption {
  id               String          @id @default(cuid())
  text             String
  isCorrect        Boolean         @default(false)
  feedback         String?         @db.Text
  questionId       String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt    AnswerAttempt[]
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float?
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollmentId       String?                  @unique
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  lessonId     String
  type         String // "view", "quiz", "video"
  score        Float?
  completedAt  DateTime       @default(now())
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id             String          @id @default(cuid())
  userId         String
  quizId         String
  attemptNumber  Int
  score          Float
  submittedAt    DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  uploadDate   DateTime     @default(now())
  category     String?
  tags         String?
  ispublic     Boolean      @default(true)
  pin          String?
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderContent")
  sharedWith   User[]       @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  color               String?           @default("blue")
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   String   // 'ALL' o UserRole[] en formato JSON
  priority   String?  @default("Normal") // "Normal", "Urgente"

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  city         String?
  country      String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model UserNote {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  content    String   @db.Text
  color      String   @default("yellow") // 'yellow', 'blue', 'green', etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


model Achievement {
  id            String            @id @default(cuid())
  slug          AchievementSlug   @unique
  name          String
  description   String
  points        Int
  icon          String
  users         UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus @default(DRAFT)
  isQuiz        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  creatorId   String
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]   @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  required     Boolean       @default(false)
  placeholder  String?
  options      Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE
  order        Int
  
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id           String          @id @default(cuid())
  submittedAt  DateTime        @default(now())
  score        Float?          // Puntuación si es un quiz
  
  formId       String
  form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  answers      AnswerAttempt[]
  
  @@index([formId])
  @@index([userId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  resourceCategories        String    @db.Text @default("General")
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  
  // Security
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Appearance
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
}

// Modelos para Plantillas de Lecciones
model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         // "SYSTEM" o "USER"
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
