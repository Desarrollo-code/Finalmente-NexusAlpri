// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  avatar                String?
  role                  UserRole                 @default(STUDENT)
  isTwoFactorEnabled    Boolean                  @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?                @default(now())
  theme                 String?
  xp                    Int?                     @default(0)
  courses               Course[] // Courses created by this user
  enrollments           Enrollment[]
  createdAnnouncements  Announcement[]           @relation("CreatedAnnouncements")
  notifications         Notification[]
  createdEvents         CalendarEvent[]          @relation("CreatedEvents")
  attendingEvents       CalendarEvent[]          @relation("AttendingEvents")
  createdLessonTemplates LessonTemplate[]        @relation("CreatedTemplates")
  createdResources      EnterpriseResource[]     @relation("UploadedResources")
  sharedResources       EnterpriseResource[]     @relation("SharedResources")
  securityLogs          SecurityLog[]
  notes                 UserNote[]
  achievements          UserAchievement[]
  formResponses         FormResponse[]
  createdForms          Form[]                   @relation("CreatedForms")
  sharedForms           Form[]                   @relation("SharedForms")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id              String                   @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]
  notes           UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float?                   @default(0)
  completedLessons   LessonCompletionRecord[]
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progressId  String
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // "view" or "quiz"
    score       Float? // Only for quizzes

    @@unique([progressId, lessonId])
}


model QuizAttempt {
    id          String @id @default(cuid())
    userId      String
    quizId      String
    score       Float
    submittedAt DateTime @default(now())
    quiz        Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers     AnswerAttempt[]
}

model AnswerAttempt {
    id                String @id @default(cuid())
    attemptId         String
    attempt           QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId        String
    question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}


model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  resourceCategories         String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
  primaryColor               String   @default("#6366f1")
  secondaryColor             String   @default("#a5b4fc")
  accentColor                String   @default("#ec4899")
  backgroundColorLight       String   @default("#f8fafc")
  primaryColorDark           String   @default("#a5b4fc")
  backgroundColorDark        String   @default("#020617")
  fontHeadline               String   @default("Space Grotesk")
  fontBody                   String   @default("Inter")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
}

model CalendarEvent {
  id                   String            @id @default(cuid())
  title                String
  description          String?           @db.Text
  location             String?
  start                DateTime
  end                  DateTime
  allDay               Boolean           @default(false)
  color                String?           @default("blue")
  audienceType         EventAudienceType @default(ALL)
  videoConferenceLink  String?
  attachments          Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  creatorId            String
  creator              User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees            User[]            @relation("AttendingEvents")
}

model Announcement {
  id        String          @id @default(cuid())
  title     String
  content   String          @db.Text
  date      DateTime        @default(now())
  audience  Json            @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR
  priority  String          @default("Normal")
  authorId  String
  author    User            @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model EnterpriseResource {
  id           String    @id @default(cuid())
  title        String
  description  String?
  type         String // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO, EXTERNAL_LINK, OTHER
  category     String?
  tags         String? // Comma-separated
  url          String?
  uploadDate   DateTime  @default(now())
  uploaderId   String
  uploader     User      @relation("UploadedResources", fields: [uploaderId], references: [id])
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderChildren")
  pin          String?
  ispublic     Boolean   @default(true)
  sharedWith   User[]    @relation("SharedResources")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?          @db.Text
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Form {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  status       FormStatus @default(DRAFT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creatorId    String
  creator      User      @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]    @relation("SharedForms")
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  CHECKBOX
  DATE
  NUMBER
  EMAIL
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  type        FormFieldType
  required    Boolean  @default(false)
  placeholder String?
  options     Json?    // For select, radio, checkbox types
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  responses   FormAnswer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String?  @db.Text
  values     Json?
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          // SYSTEM or USER
  creatorId      String?         // Null for system templates
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String @id @default(cuid())
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       String // Corresponds to LessonType
  order      Int
}

model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  icon        String?
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  users       UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}
