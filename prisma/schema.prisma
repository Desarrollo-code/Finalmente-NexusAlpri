// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  name                 String
  email                String           @unique
  password             String
  avatar               String?
  role                 UserRole         @default(STUDENT)
  colorTheme           String?          @default("corporate-blue")
  registeredDate       DateTime         @default(now())
  isTwoFactorEnabled   Boolean          @default(false)
  twoFactorSecret      String?
  createdCourses       Course[]         @relation("InstructorCourses")
  enrollments          Enrollment[]
  createdTemplates     LessonTemplate[] @relation("UserTemplates")
  uploadedResources    Resource[]
  createdAnnouncements Announcement[]
  createdEvents        CalendarEvent[]
  createdNotifications Notification[]
  securityLogs         SecurityLog[]
  attendedEvents       CalendarEvent[]  @relation("EventAttendees")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id             String     @id @default(cuid())
  title          String
  description    String?
  contentBlockId String     @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType   @default(MULTIPLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@id([userId, courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String    @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: "userId_courseId", onDelete: Cascade, map: "CourseProgress_enrollmentId_fkey")
  completedLessonIds Json      @default("[]")
  progressPercentage Float     @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([userId, courseId], name: "userId_courseId_unique_constraint")
}

model Resource {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  type         ResourceType
  category     String
  tags         Json           @default("[]")
  url          String?
  pin          String?
  uploadDate   DateTime       @default(now())
  uploaderId   String
  uploader     User           @relation(fields: [uploaderId], references: [id])
  parentId     String?
  parent       Resource?      @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]     @relation("FolderHierarchy")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json     @default("\"ALL\"")
  priority  String?
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?          @db.Text
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean
  audienceType EventAudienceType @default(ALL)
  color        String?
  creatorId    String
  creator      User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]           @relation("EventAttendees")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())
  details      String?          @db.Text
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  require2faForAdmins         Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          Json      @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")
  updatedAt                   DateTime  @updatedAt
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String
  creator        User            @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: Cascade)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
