// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:nexus-alpri-db-pass@aws-1-us-east-2.pooler.supabase.com:5432/postgres?pgbouncer=true&connection_limit=1"
  shadowDatabaseUrl = "postgresql://postgres:nexus-alpri-db-pass@aws-1-us-east-2.pooler.supabase.com:6543/postgres"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}

// --- MODELS ---
model User {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  password            String
  role                UserRole          @default(STUDENT)
  avatar              String?
  xp                  Int?              @default(0)
  isTwoFactorEnabled  Boolean           @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime          @default(now())
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relations
  taughtCourses       Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  quizAttempts        QuizAttempt[]
  uploadedResources   Resource[]        @relation("UploadedResources")
  sharedResources     Resource[]        @relation("SharedResources")
  createdTemplates    LessonTemplate[]
  createdForms        Form[]
  formResponses       FormResponse[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  createdEvents       CalendarEvent[]   @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]   @relation("AttendingEvents")
  sharedForms         Form[]            @relation("SharedForms")
  notes               UserNote[]
  achievements        UserAchievement[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
  templateId    String?
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Question {
  id        String          @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean         @default(false)
  points       Int             @default(0)
  feedback     String?
  questionId   String
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?
  
  @@unique([userId, courseId])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String   // 'view', 'quiz', 'video'
  score       Float?
  completedAt DateTime @default(now())
  
  @@unique([progressId, lessonId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?
  type         String
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  ispublic     Boolean      @default(true)
  pin          String?
  
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parentId     String?
  parent       Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderChildren")
  
  sharedWith   User[]       @relation("SharedResources")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String
  points       Int
  users        UserAchievement[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())
  
  @@unique([userId, achievementId])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Form {
    id           String         @id @default(cuid())
    title        String
    description  String?
    status       FormStatus     @default(DRAFT)
    isQuiz       Boolean        @default(false)
    creatorId    String
    creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields       FormField[]
    responses    FormResponse[]
    sharedWith   User[]         @relation("SharedForms")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
}

model FormField {
    id           String        @id @default(cuid())
    label        String
    type         FormFieldType
    placeholder  String?
    required     Boolean       @default(false)
    options      Json          @default("[]")
    order        Int
    formId       String
    form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers      Answer[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model FormResponse {
    id           String     @id @default(cuid())
    formId       String
    form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    submittedAt  DateTime   @default(now())
    score        Float?
    answers      Answer[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Answer {
    id           String       @id @default(cuid())
    fieldId      String
    field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    responseId   String
    response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    value        String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json[]   @default([])
  color               String   @default("blue")
  audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  
  creatorId String
  creator   User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[]   @relation("AttendingEvents")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  audience  String   // ALL, o UserRole
  priority  String   @default("Normal")
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, lessonId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?
  country      String?
  city         String?
  createdAt    DateTime         @default(now())
}

model PlatformSettings {
    id                          String    @id @default(cuid())
    platformName                String    @default("NexusAlpri")
    allowPublicRegistration     Boolean   @default(true)
    enableEmailNotifications    Boolean   @default(true)
    emailWhitelist              String?
    require2faForAdmins         Boolean   @default(false)
    idleTimeoutMinutes          Int       @default(20)
    enableIdleTimeout           Boolean   @default(true)
    passwordMinLength           Int       @default(8)
    passwordRequireUppercase    Boolean   @default(true)
    passwordRequireLowercase    Boolean   @default(true)
    passwordRequireNumber       Boolean   @default(true)
    passwordRequireSpecialChar  Boolean   @default(true)
    resourceCategories          String
    primaryColor                String?
    secondaryColor              String?
    accentColor                 String?
    backgroundColorLight        String?
    primaryColorDark            String?
    backgroundColorDark         String?
    fontHeadline                String?
    fontBody                    String?
    logoUrl                     String?
    watermarkUrl                String?
    landingImageUrl             String?
    authImageUrl                String?
    aboutImageUrl               String?
    benefitsImageUrl            String?
    createdAt                   DateTime  @default(now())
    updatedAt                   DateTime  @updatedAt
}
