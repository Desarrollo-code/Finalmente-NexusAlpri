// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  TEXT_SHORT
  TEXT_LONG
  RATING
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT 
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

// --- MODELS ---

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  name                String
  password            String
  role                UserRole @default(STUDENT)
  avatar              String?
  theme               String?
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  xp                  Int @default(0) // Experience Points

  // Relations
  courses             Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  progress            CourseProgress[]
  announcements       Announcement[] @relation(name: "AnnouncementAuthor")
  createdResources    EnterpriseResource[] @relation(name: "ResourceUploader")
  sharedResources     EnterpriseResource[] @relation(name: "SharedWithUsers")
  createdEvents       CalendarEvent[] @relation(name: "EventCreator")
  attendedEvents      CalendarEvent[] @relation(name: "EventAttendees")
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]
  
  createdForms        Form[] @relation("FormCreator")
  formResponses       FormResponse[] @relation("FormRespondent")
  sharedForms         Form[] @relation("FormSharedWith")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?        @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentBlocks      ContentBlock[]
  completionRecords  LessonCompletionRecord[]
  notes              UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Relation for Quiz (optional, only if type is QUIZ)
  quiz      Quiz?
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  contentBlockId String  @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  // Relations
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id     String       @id @default(cuid())
  text   String
  type   QuestionType
  order  Int
  quizId String
  quiz   Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Relations
  options AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Relations
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id      String @id @default(cuid())
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId  String
    quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    score   Float
    submittedAt DateTime @default(now())

    answers AnswerAttempt[]
}

model AnswerAttempt {
    id      String @id @default(cuid())
    attempt   QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId String
    questionId String
    question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
    id              String @id @default(cuid())
    userId          String
    courseId        String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    enrollmentId    String @unique
    enrollment      Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    progressPercentage Float @default(0)
    
    completedLessons LessonCompletionRecord[]

    @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String @id @default(cuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type        String // 'view' or 'quiz'
    score       Float? // Only for 'quiz' type
    completedAt DateTime @default(now())
    
    @@unique([progressId, lessonId])
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([userId, lessonId])
}

model EnterpriseResource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  category    String
  tags        String?
  url         String?
  uploadDate  DateTime @default(now())
  uploaderId  String?
  hasPin      Boolean  @default(false)
  pin         String?
  
  parentId    String?
  parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    EnterpriseResource[] @relation("FolderHierarchy")

  uploader    User?     @relation(name: "ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  ispublic    Boolean   @default(true)
  sharedWith  User[]    @relation(name: "SharedWithUsers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Announcement {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text
    date      DateTime
    authorId  String?
    author    User?    @relation(name: "AnnouncementAuthor", fields: [authorId], references: [id], onDelete: SetNull)
    audience  Json     // 'ALL' o un array de UserRole
    priority  String   @default("Normal")
}

model Notification {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    link        String?
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())
}

model CalendarEvent {
    id          String @id @default(cuid())
    title       String
    description String? @db.Text
    location    String?
    start       DateTime
    end         DateTime
    allDay      Boolean
    audienceType EventAudienceType
    color       String
    creatorId   String?
    videoConferenceLink String?
    attachments Json?

    creator     User?      @relation(name: "EventCreator", fields: [creatorId], references: [id], onDelete: SetNull)
    attendees   User[]     @relation(name: "EventAttendees")
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    ipAddress    String?
    userAgent    String?  @db.Text
    details      String?
    createdAt    DateTime @default(now())
    emailAttempt String?
    country      String?
    city         String?
}

model PlatformSettings {
    id                      String  @id @default(cuid())
    platformName            String
    allowPublicRegistration Boolean
    enableEmailNotifications Boolean
    require2faForAdmins     Boolean
    idleTimeoutMinutes      Int
    enableIdleTimeout       Boolean
    
    // Password policies
    passwordMinLength Int
    passwordRequireUppercase Boolean
    passwordRequireLowercase Boolean
    passwordRequireNumber    Boolean
    passwordRequireSpecialChar Boolean

    resourceCategories String @db.Text
    updatedAt          DateTime @updatedAt
    
    // Theme settings
    primaryColor            String?
    secondaryColor          String?
    accentColor             String?
    backgroundColorLight    String?
    primaryColorDark        String?
    backgroundColorDark     String?
    
    // Font settings
    fontHeadline            String?
    fontBody                String?

    // Image settings
    logoUrl                 String?
    watermarkUrl            String?
    landingImageUrl         String?
    authImageUrl            String?
    aboutImageUrl           String?
    benefitsImageUrl        String?
}

model LessonTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  type          TemplateType
  creatorId     String?
  creator       User?           @relation(fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- GAMIFICATION ---
model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique // e.g., 'first-enrollment'
  name        String
  description String
  icon        String?
  points      Int      @default(50)

  users UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}


// --- FORM BUILDER ---
model Form {
  id            String     @id @default(cuid())
  title         String
  description   String?    @db.Text
  status        FormStatus @default(DRAFT)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  creatorId     String
  creator       User       @relation(name: "FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]     @relation(name: "FormSharedWith")
}

model FormField {
  id           String       @id @default(cuid())
  formId       String
  form         Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  order        Int
  label        String
  type         QuestionType
  options      Json?        // For multiple_choice, single_choice, rating, etc.
  isRequired   Boolean      @default(false)
  
  answers      FormAnswer[]
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  submittedAt   DateTime @default(now())
  
  userId        String?
  user          User?    @relation(name: "FormRespondent", fields: [userId], references: [id], onDelete: SetNull)
  
  answers       FormAnswer[]
}

model FormAnswer {
  id           String       @id @default(cuid())
  responseId   String
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId      String
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  value        String @db.Text
}
