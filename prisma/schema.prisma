
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  name                 String
  email                String           @unique
  password             String
  avatar               String?
  role                 UserRole         @default(STUDENT)
  registeredDate       DateTime         @default(now())
  isTwoFactorEnabled   Boolean          @default(false)
  twoFactorSecret      String?
  createdCourses       Course[]         @relation("InstructorCourses")
  enrollments          Enrollment[]
  createdTemplates     LessonTemplate[] @relation("UserTemplates")
  uploadedResources    Resource[]
  createdAnnouncements Announcement[]
  createdEvents        CalendarEvent[]
  notifications        Notification[]
  securityLogs         SecurityLog[]
  attendedEvents       CalendarEvent[]  @relation("EventAttendees")
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  
  @@index([courseId])
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String     @id @default(cuid())
  title          String
  description    String?    @db.Text
  contentBlockId String     @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String
  type    QuestionType @default(MULTIPLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String     @id @default(cuid())
  userId              String
  courseId            String
  enrollment          Enrollment @relation(fields: [userId, courseId], references: [userId, courseId], onDelete: Cascade)
  completedLessonIds  Json       @default("[]")
  progressPercentage  Float      @default(0)
  updatedAt           DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         Json         @default("[]") // Corrected type for MySQL
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  pin          String?
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]   @relation("FolderHierarchy")

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json     @default("\"ALL\"") // Corrected default value
  priority  String   @default("Normal") // e.g., 'Normal', 'Urgente'

  @@index([authorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([userId])
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean
  audienceType EventAudienceType @default(ALL)
  color        String?
  creatorId    String
  creator      User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]           @relation("EventAttendees")

  @@index([creatorId])
}

model SecurityLog {
  id           String          @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  userId       String?
  user         User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime        @default(now())
  details      String?         @db.Text

  @@index([userId])
}

model PlatformSettings {
  id                         Int      @id @default(1)
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories         Json     @default("[\"General\"]")
  updatedAt                  DateTime @updatedAt
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?          @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}
