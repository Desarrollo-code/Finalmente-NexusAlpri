// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================
//                MODELOS PRINCIPALES
// =================================================

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  avatar              String?
  role                UserRole              @default(STUDENT)
  isTwoFactorEnabled  Boolean               @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime              @default(now())
  lastLogin           DateTime?
  courses             Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  resourcesUploaded   Resource[]
  announcements       Announcement[]
  calendarEvents      CalendarEvent[]       @relation("CreatedEvents")
  notifications       Notification[]
  securityLogs        SecurityLog[]
  lessonTemplates     LessonTemplate[]
  eventAttendees      CalendarEvent[]       @relation("EventAttendees")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id              String                @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String         @id @default(cuid())
  title           String?
  description     String?
  contentBlockId  String         @unique
  contentBlock    ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String       @db.Text
  type    QuestionType @default(MULTIPLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String   @db.Text
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

// =================================================
//          MODELOS DE RELACIÓN Y PROGRESO
// =================================================

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id         String          @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float?
  completedAt DateTime       @default(now())
  progress   CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson     Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

// =================================================
//        MODELOS DE CONTENIDO Y PLATAFORMA
// =================================================

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  type        ResourceType
  category    String
  tags        String?       @db.Text
  url         String?
  pin         String?
  uploadDate  DateTime      @default(now())
  uploaderId  String
  uploader    User          @relation(fields: [uploaderId], references: [id])
  parentId    String?
  parent      Resource?     @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]    @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  audience  Json
  priority  String   @default("Normal") // "Normal" | "Urgente"
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  videoConferenceLink String?
  color               String       @default("blue")
  audienceType        String       // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  attachments         Json?
  creatorId           String
  creator             User         @relation("CreatedEvents", fields: [creatorId], references: [id])
  attendees           User[]       @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?   @db.Text
  require2faForAdmins         Boolean   @default(false)
  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  resourceCategories          String    @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

model LessonTemplate {
  id               String          @id @default(cuid())
  name             String
  description      String?
  type             TemplateType    @default(USER) // SYSTEM, USER
  creatorId        String?
  creator          User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks   TemplateBlock[]
  createdAt        DateTime        @default(now())
}

model TemplateBlock {
  id          String        @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int

  @@index([templateId])
}


// =================================================
//                      ENUMS
// =================================================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}
