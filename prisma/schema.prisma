// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------------------------------
// ENUMS
// ---------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonTemplateType {
  SYSTEM
  USER
}


// ---------------------------------
// MODELS
// ---------------------------------

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String
  password            String
  role                UserRole              @default(STUDENT)
  avatar              String?
  theme               String?
  isTwoFactorEnabled  Boolean               @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime              @default(now())
  xp                  Int                   @default(0)

  createdCourses      Course[]              @relation("InstructorCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  announcements       Announcement[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]       @relation("EventAttendees")
  
  uploadedResources   EnterpriseResource[]  @relation("UploadedResources")
  sharedResources     EnterpriseResource[]  @relation("SharedResources")
  
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]

  @@map("users")
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  instructorId    String?
  instructor      User?         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id             String                @id @default(cuid())
  title          String
  order          Int
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  moduleId       String
  module         Module                @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks  ContentBlock[]
  completions    LessonCompletionRecord[]
  notes          UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  
  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions       Question[]
  attempts        QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id        String        @id @default(cuid())
  text      String        @db.Text
  type      QuestionType  @default(MULTIPLE_CHOICE)
  order     Int
  
  quizId    String
  quiz      Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String                   @unique
  progressPercentage  Float                    @default(0)

  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment          Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  type        String    // 'view' or 'quiz'
  score       Float?    // Score for quizzes
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model EnterpriseResource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  pin          String?      
  ispublic     Boolean      @default(true)
  
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parentId     String?
  parent       EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     EnterpriseResource[] @relation("FolderHierarchy")

  sharedWith   User[]       @relation("SharedResources")

  @@map("enterprise_resources")
}


model Announcement {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  date       DateTime   @default(now())
  audience   Json
  priority   String?    @default("Normal")
  
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("announcements")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  color               String
  audienceType        EventAudienceType @default(ALL)
  videoConferenceLink String?
  attachments         Json?
  
  creatorId           String
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  attendees           User[]            @relation("EventAttendees")
  
  @@map("calendar_events")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model PlatformSettings {
  id                         String    @id @default(cuid())
  updatedAt                  DateTime  @updatedAt
  platformName               String    @default("NexusAlpri")
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  require2faForAdmins        Boolean   @default(false)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  resourceCategories         String    @db.Text
  
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  @@map("platform_settings")
}


model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  details      String?          @db.Text
  emailAttempt String?
  country      String?
  city         String?
  
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model LessonTemplate {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  type           LessonTemplateType @default(USER)
  creatorId      String?
  creator        User?              @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt      DateTime           @default(now())
  
  templateBlocks TemplateBlock[]
  
  @@map("lesson_templates")
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  quizAttemptId     String
  questionId        String
  selectedOptionId  String
  
  quizAttempt       QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@map("answer_attempts")
}

model Achievement {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  description  String
  icon         String?
  points       Int
  
  users        UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
  @@map("user_achievements")
}
