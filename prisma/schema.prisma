// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // ¡IMPORTANTE!
  // URL de CONEXIÓN DIRECTA (PUERTO 5432) de Supabase.
  // Es la que NO contiene la palabra "pooler".
  // Se usa para que Prisma pueda crear y modificar las tablas.
  url               = "postgresql://postgres:[TU_CONTRASEÑA]@[ID_PROYECTO].db.supabase.co:5432/postgres"

  // URL del AGRUPADOR DE CONEXIONES (PUERTO 6543) de Supabase.
  // Es la que SÍ contiene la palabra "pooler".
  // Se usa para la base de datos "sombra" de Prisma durante el desarrollo.
  shadowDatabaseUrl = "postgresql://postgres:[TU_CONTRASEÑA]@[ID_PROYECTO].pooler.supabase.co:6543/postgres?pgbouncer=true"
  relationMode      = "prisma"
}


// --- ENUMS ---

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  role                UserRole         @default(STUDENT)
  avatar              String?
  registeredDate      DateTime         @default(now())
  lastLogin           DateTime?
  xp                  Int              @default(0)
  isActive            Boolean          @default(true)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  notes               UserNote[]
  securityLogs        SecurityLog[]
  announcements       Announcement[]
  resourcesUploaded   Resource[]
  createdEvents       CalendarEvent[]  @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]  @relation("AttendingEvents")
  formsCreated        Form[]
  formResponses       FormResponse[]
  notifications       Notification[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]
  sharedResources     Resource[] @relation("SharedResources")
  sharedForms         Form[]         @relation("SharedForms")
}

model Course {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]
}

model Module {
  id       String  @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons Lesson[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  userNotes   UserNote[]
  completions LessonCompletionRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentBlock {
  id       String   @id @default(cuid())
  type     LessonType
  content  String?  @db.Text
  order    Int
  lessonId String
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id           String  @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String  @unique
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  points     Int     @default(0)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]
}

// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String  @id @default(cuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String  @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  progressPercentage Float   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime? @updatedAt
  
  completedLessons LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())
  
  type String @default("view") // "view", "quiz", "video"
  score Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score       Float
  submittedAt DateTime @default(now())
  
  answers AnswerAttempt[]
}

model AnswerAttempt {
  id               String   @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- USER GENERATED CONTENT ---
model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


// --- GLOBAL CONTENT & SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  resourceCategories        String?
  
  // Theme
  primaryColor        String?
  secondaryColor      String?
  accentColor         String?
  backgroundColorLight String?
  primaryColorDark    String?
  backgroundColorDark String?
  fontHeadline        String?
  fontBody            String?

  // Images
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?

  updatedAt DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  uploaderId String?
  uploader   User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  pin String?

  parentId String?
  parent   Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Resource[] @relation("FolderChildren")

  ispublic   Boolean    @default(true)
  sharedWith User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // JSON string de UserRole[] o 'ALL'
  priority  String   @default("Normal") // Normal, Urgente

  updatedAt DateTime @updatedAt
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        EventAudienceType @default(ALL)
  color               String?          @default("blue")
  attachments         Json?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  creatorId String
  creator   User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[]     @relation("AttendingEvents")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?
  createdAt    DateTime         @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}


model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json? // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  required     Boolean       @default(false)
  placeholder  String?
  order        Int
  
  formId String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers AnswerAttempt[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  score       Float?   // Para quizzes
  
  answers FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  // field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade) // Relación a un campo de formulario
  value      String   // La respuesta del usuario
}

// --- GAMIFICATION ---
model Achievement {
  id          String @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String?
  points      Int

  unlockedBy  UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime  @default(now())

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String         @default("USER") // SYSTEM o USER
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
