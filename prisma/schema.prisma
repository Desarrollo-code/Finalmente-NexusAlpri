// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  role               UserRole  @default(STUDENT)
  avatar             String?
  theme              String?
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  registeredDate     DateTime  @default(now())

  createdCourses     Course[]          @relation("CreatedCourses")
  enrollments        Enrollment[]
  progress           CourseProgress[]  @relation("UserProgress")
  uploadedResources  Resource[]        @relation("UploadedResources")
  sharedResources    Resource[]        @relation("SharedWithUsers")
  createdTemplates   LessonTemplate[]  @relation("CreatedTemplates")
  createdEvents      CalendarEvent[]   @relation("CreatedEvents")
  attendedEvents     CalendarEvent[]   @relation("EventAttendees")
  authoredAnnouncements Announcement[] @relation("AuthoredAnnouncements")
  notifications      Notification[]
  securityLogs       SecurityLog[]

  @@index([email])
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?

  instructorId    String
  instructor      User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[] @relation("CourseProgressRecords")

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([instructorId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  questions   Question[]
  contentBlockId String  @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String  @id @default(cuid())
  userId              String
  user                User    @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  courseId            String
  course              Course  @relation("CourseProgressRecords", fields: [courseId], references: [id], onDelete: Cascade)
  progressPercentage  Float   @default(0)
  enrollmentId        String  @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons    LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
}


model LessonCompletionRecord {
  id          String      @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String      // 'view' or 'quiz'
  score       Float?      // Score for quiz type

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}


model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  pin          String?      
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedWithUsers")

  parentId     String?
  parent       Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderChildren")

  @@index([uploaderId])
  @@index([parentId])
}


model Announcement {
    id String @id @default(cuid())
    title String
    content String @db.Text
    date DateTime
    priority String? @default("Normal") // e.g., Normal, Urgente
    audience Json // ALL, ['STUDENT'], ['INSTRUCTOR']
    authorId String
    author User @relation("AuthoredAnnouncements", fields: [authorId], references: [id])

    @@index([authorId])
}

model CalendarEvent {
    id String @id @default(cuid())
    title String
    description String? @db.Text
    start DateTime
    end DateTime
    allDay Boolean @default(false)
    location String?
    color String @default("blue")
    
    audienceType String // ALL, 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
    attendees User[] @relation("EventAttendees")

    creatorId String
    creator User @relation("CreatedEvents", fields: [creatorId], references: [id])
    
    videoConferenceLink String?
    attachments Json? // [{ "name": "Document.pdf", "url": "..." }]

    @@index([creatorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
    id        String   @id @default(cuid())
    event     String   // e.g., SUCCESSFUL_LOGIN, FAILED_LOGIN_ATTEMPT, PASSWORD_CHANGE_SUCCESS
    ipAddress String?
    userId    String?
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    details   String?  @db.Text
    createdAt DateTime @default(now())
    emailAttempt String?

    @@index([userId])
}


model PlatformSettings {
  id                  String  @id @default(cuid())
  platformName        String? @default("NexusAlpri")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  primaryColor        String? @default("#673AB7")
  secondaryColor      String? @default("#81C784")
  accentColor         String? @default("#6F42C1")
  backgroundColorLight String? @default("#F5F5F5")
  backgroundColorDark  String? @default("#303030")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")

  allowPublicRegistration   Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String? // Comma-separated list of allowed domains/emails

  // Password Policy
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)

  // Session/Security
  enableIdleTimeout        Boolean @default(true)
  idleTimeoutMinutes       Int     @default(20)
  require2faForAdmins      Boolean @default(false)

  // Content related
  resourceCategories     String // Comma-separated list
  
  updatedAt           DateTime @updatedAt
}

model LessonTemplate {
  id           String @id @default(cuid())
  name         String
  description  String?
  type         TemplateType @default(USER) // SYSTEM or USER
  creatorId    String?
  creator      User? @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id           String @id @default(cuid())
  type         LessonType
  order        Int
  templateId   String
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}


enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
    MULTIPLE_CHOICE
    SINGLE_CHOICE
    TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum TemplateType {
  SYSTEM
  USER
}
