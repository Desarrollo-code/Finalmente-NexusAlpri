
// Este es tu archivo de esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---
model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  password                String?
  role                    UserRole                 @default(STUDENT)
  avatar                  String?
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime?                @default(now())
  lastLogin               DateTime?
  isActive                Boolean                  @default(true)
  xp                      Int                      @default(0)
  theme                   String?

  coursesCreated          Course[]                 @relation("CreatedCourses")
  enrollments             Enrollment[]
  notifications           Notification[]
  resourcesUploaded       Resource[]               @relation("UploadedResources")
  resourcesSharedWith     Resource[]               @relation("SharedResources")
  eventsCreated           CalendarEvent[]          @relation("CreatedEvents")
  eventsAttending         CalendarEvent[]          @relation("EventAttendees")
  courseProgress          CourseProgress[]         @relation("UserProgress")
  userNotes               UserNote[]
  achievements            UserAchievement[]
  quizAttempts            QuizAttempt[]
  lessonTemplatesCreated  LessonTemplate[]
  formsCreated            Form[]                   @relation("CreatedForms")
  formsSharedWith         Form[]                   @relation("FormSharedWith")
  formResponses           FormResponse[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?            @relation("CreatedCourses", fields: [instructorId], references: [id])
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[] @relation("CourseProgress")

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String                 @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  maxAttempts    Int?
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[] @relation("QuestionAttempts")

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Int                      @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation("CourseProgress", fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String?                  @unique
  enrollment         Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id           String         @id @default(cuid())
  progressId   String
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt  DateTime       @default(now())
  type         String         @default("view")
  score        Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation("QuestionAttempts", fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  formField        FormField?   @relation(fields: [formFieldId], references: [id])
  formFieldId      String?
  formResponse     FormResponse?   @relation(fields: [formResponseId], references: [id])
  formResponseId   String?

  @@index([attemptId])
  @@index([questionId])
}

model Resource {
  id           String           @id @default(cuid())
  title        String
  description  String?          @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime         @default(now())
  uploaderId   String?
  uploader     User?            @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?        @relation("FolderContent", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children     Resource[]       @relation("FolderContent")
  hasPin       Boolean          @default(false)
  pin          String?
  ispublic     Boolean          @default(true)
  sharedWith   User[]           @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  audience  String   @default("ALL") // Can store a single role or 'ALL'
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  audienceType        EventAudienceType  @default(ALL)
  color               String?
  creatorId           String
  creator             User               @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]             @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json? // Stores array of {name: string, url: string}
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  details      String?
  emailAttempt String?
  country      String?
  city         String?

  @@index([userId])
  @@index([event])
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String
  creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("FormSharedWith")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // Stores array of {id, text, isCorrect, points}
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id           String          @id @default(cuid())
  formId       String
  form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime        @default(now())
  score        Float?
  answers      AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}


model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  unlockedBy        UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  lessonId  String
  color     String   @default("yellow")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model LessonTemplate {
  id               String           @id @default(cuid())
  name             String
  description      String?
  type             TemplateType
  creatorId        String?
  creator          User?            @relation(fields: [creatorId], references: [id])
  templateBlocks   TemplateBlock[]
}

model TemplateBlock {
  id          String       @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}


model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated domains
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  
  // Theme
  primaryColor        String?   @default("#6366f1") // indigo-500
  secondaryColor      String?   @default("#a5b4fc") // indigo-300
  accentColor         String?   @default("#ec4899") // pink-500
  backgroundColorLight String?  @default("#f8fafc") // slate-50
  fontHeadline        String?   @default("Space Grotesk")
  fontBody            String?   @default("Inter")
  
  // Dark Theme
  primaryColorDark     String?  @default("#a5b4fc") // indigo-300
  backgroundColorDark  String?  @default("#020617") // slate-950

  // Branding Images
  logoUrl           String?
  watermarkUrl      String?
  landingImageUrl   String?
  authImageUrl      String?
  aboutImageUrl     String?
  benefitsImageUrl  String?

  updatedAt DateTime @updatedAt
}
