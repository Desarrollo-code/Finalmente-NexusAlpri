// prisma/schema.prisma

// Este es el modelo de datos de tu aplicación.
// Define la estructura de tu base de datos y las relaciones entre las tablas.
// Más información: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql" // Cambiado de mysql a postgresql
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- MODELOS PRINCIPALES ---

model User {
  id                    String                @id @default(cuid())
  name                  String
  email                 String                @unique
  password              String
  avatar                String?
  role                  UserRole              @default(STUDENT)
  isActive              Boolean               @default(true)
  registeredDate        DateTime              @default(now())
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  theme                 String?
  xp                    Int?                  @default(0)

  // Relaciones
  createdCourses        Course[]              @relation("CreatedCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  announcements         Announcement[]
  notifications         Notification[]        @relation("UserNotifications")
  createdEvents         CalendarEvent[]       @relation("CreatedEvents")
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  uploadedResources     Resource[]            @relation("UploadedResources")
  sharedResources       Resource[]            @relation("SharedResources")
  notes                 UserNote[]
  securityLogs          SecurityLog[]
  achievements          UserAchievement[]
  createdLessonTemplate LessonTemplate[]
  formResponses         FormResponse[]
  createdForms          Form[]                @relation("CreatedForms")
  sharedForms           Form[]                @relation("SharedForms")
  quizAttempts          QuizAttempt[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  
  // Relaciones
  instructorId    String
  instructor      User           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relaciones
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relaciones
  module          Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]
  notes           UserNote[]
}

model ContentBlock {
    id        String      @id @default(cuid())
    type      LessonType
    content   String?     @db.Text
    order     Int
    lessonId  String

    // Relaciones
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz      Quiz?
}

// --- MODELOS DE QUIZ ---

model Quiz {
    id            String    @id @default(cuid())
    title         String
    description   String?
    contentBlockId String    @unique
    maxAttempts   Int?      // Nullable para intentos ilimitados

    // Relaciones
    contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    questions     Question[]
    attempts      QuizAttempt[]
}

model Question {
    id      String   @id @default(cuid())
    text    String   @db.Text
    order   Int
    quizId  String

    // Relaciones
    quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options AnswerOption[]
    answerAttempts AnswerAttempt[]
}

model AnswerOption {
    id         String   @id @default(cuid())
    text       String
    isCorrect  Boolean
    feedback   String?  @db.Text
    questionId String

    // Relaciones
    question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
    AnswerAttempt  AnswerAttempt[]
}

// --- MODELOS DE PROGRESO E INSCRIPCIÓN ---

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())

  // Relaciones
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                   String                   @id @default(cuid())
  userId               String
  courseId             String
  progressPercentage   Float                    @default(0)
  completedAt          DateTime?
  
  // Relaciones
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course               Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId         String                   @unique
  enrollment           Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons     LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id           String   @id @default(cuid())
    progressId   String
    lessonId     String
    completedAt  DateTime @default(now())
    type         String   // 'view', 'quiz', 'video'
    score        Float?

    // Relaciones
    progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String          @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())

    // Relaciones
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id               String       @id @default(cuid())
    attemptId        String
    questionId       String
    selectedOptionId String
    
    // Relaciones
    attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
    selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- MODELOS DE CONTENIDO GLOBAL ---

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  audience   String   // ALL, o lista de roles: "STUDENT,INSTRUCTOR"

  // Relaciones
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String           @id @default(cuid())
    title               String
    description         String?          @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean          @default(false)
    location            String?
    audienceType        EventAudienceType @default(ALL)
    color               String?
    creatorId           String
    videoConferenceLink String?
    attachments         Json[]

    // Relaciones
    creator             User             @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]           @relation("EventAttendees")
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?     // Comma-separated
  uploadDate   DateTime    @default(now())
  uploaderId   String?
  ispublic     Boolean     @default(true)
  pin          String?
  
  // Relaciones
  uploader     User?       @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?   @relation("FolderContent", fields: [parentId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  children     Resource[]  @relation("FolderContent")
  sharedWith   User[]      @relation("SharedResources")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  title      String
  description String?
  link       String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relaciones
  user        User    @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}


// --- MODELOS DE UTILIDAD Y CONFIGURACIÓN ---

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated domains
  resourceCategories        String?   // Comma-separated
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Campos de Tema
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?

  updatedAt           DateTime  @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        SecurityLogEvent
    ipAddress    String?
    userId       String?
    emailAttempt String?
    details      String?  @db.Text
    createdAt    DateTime @default(now())
    userAgent    String?  @db.Text
    country      String?
    city         String?

    // Relaciones
    user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}

// --- GAMIFICACIÓN ---

model Achievement {
    id              String    @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    icon            String
    points          Int

    // Relaciones
    unlockedBy      UserAchievement[]
}

model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime @default(now())

    // Relaciones
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}

// --- PLANTILLAS ---

model LessonTemplate {
    id           String   @id @default(cuid())
    name         String
    description  String?
    type         TemplateType
    creatorId    String?

    // Relaciones
    creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    templateBlocks TemplateBlock[]
}

model TemplateBlock {
    id         String   @id @default(cuid())
    type       LessonType
    order      Int
    templateId String

    // Relaciones
    template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- Formularios ---

model Form {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    status      FormStatus @default(DRAFT)
    isQuiz      Boolean  @default(false)
    creatorId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relaciones
    creator     User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]         @relation("SharedForms")
}

model FormField {
    id          String        @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json[]
    required    Boolean       @default(false)
    placeholder String?
    order       Int
    formId      String
    
    // Relaciones
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormResponse {
    id          String       @id @default(cuid())
    formId      String
    userId      String
    submittedAt DateTime     @default(now())
    score       Float?       // Stores the final score if it's a quiz

    // Relaciones
    form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     FormAnswer[]
}

model FormAnswer {
    id         String       @id @default(cuid())
    responseId String
    fieldId    String
    value      String       @db.Text

    // Relaciones
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: NoAction)
}


// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
    FIRST_ENROLLMENT
    FIRST_COURSE_COMPLETED
    PERFECT_QUIZ_SCORE
    FIVE_COURSES_COMPLETED
}

enum FormStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum FormFieldType {
    SHORT_TEXT
    LONG_TEXT
    SINGLE_CHOICE
    MULTIPLE_CHOICE
}
