// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- Models ---

model User {
  id                      String          @id @default(uuid())
  email                   String          @unique
  name                    String
  password                String
  avatar                  String?
  role                    UserRole        @default(STUDENT)
  isTwoFactorEnabled      Boolean         @default(false)
  twoFactorSecret         String?
  registeredDate          DateTime        @default(now())
  lastLogin               DateTime?
  xp                      Int             @default(0)
  theme                   String?
  isActive                Boolean         @default(true)
  coursesCreated          Course[]
  enrollments             Enrollment[]
  courseProgress          CourseProgress[]
  notes                   UserNote[]
  uploadedResources       Resource[]      @relation("UploadedResources")
  sharedResources         Resource[]      @relation("SharedResources")
  createdAnnouncements    Announcement[]
  createdEvents           CalendarEvent[] @relation("EventCreator")
  attendedEvents          CalendarEvent[] @relation("EventAttendees")
  quizAttempts            QuizAttempt[]
  formResponses           FormResponse[]
  createdForms            Form[]          @relation("FormCreator")
  securityLogs            SecurityLog[]   @relation("SecurityLogs")
  createdLessonTemplates  LessonTemplate[] @relation("CreatedTemplates")
  achievements            UserAchievement[]
  sharedForms             Form[] @relation("SharedForms")

  @@map("users")
}

model Course {
  id              String           @id @default(uuid())
  title           String
  description     String?          @db.Text
  category        String?
  instructorId    String
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  imageUrl        String?
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("courses")
}

model Module {
  id        String   @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(uuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completedBy   LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("LessonTemplates")

  @@map("lessons")
}

model ContentBlock {
  id       String     @id @default(uuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@map("content_blocks")
}

model Quiz {
  id             String        @id @default(uuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?

  @@map("quizzes")
}

model Question {
  id       String          @id @default(uuid())
  text     String
  type     QuestionType?
  order    Int
  quizId   String
  quiz     Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String          @id @default(uuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  points      Int             @default(10)
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@map("answer_options")
}

model Enrollment {
  id           String          @id @default(uuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(uuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
  id          String        @id @default(uuid())
  progressId  String
  lessonId    String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type        String // 'view', 'quiz', 'video'
  score       Float? // Only for quizzes
  completedAt DateTime      @default(now())

  @@unique([progressId, lessonId])
  @@map("lesson_completion_records")
}

model QuizAttempt {
  id            String          @id @default(uuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@map("quiz_attempts")
}

model AnswerAttempt {
  id               String       @id @default(uuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Restrict)

  @@map("answer_attempts")
}

model Resource {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String
  uploader     User         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  pin          String?
  hasPin       Boolean      @default(false)
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  children     Resource[]   @relation("FolderHierarchy")

  @@map("resources")
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("user_notes")
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, or JSON array of roles
  priority  String?  @default("Normal")
  
  @@map("announcements")
}

model CalendarEvent {
  id                  String       @id @default(uuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  location            String?
  audienceType        String       @default("ALL") // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
  creatorId           String
  creator             User         @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]       @relation("EventAttendees")
  color               String?      @default("blue")
  videoConferenceLink String?
  attachments         Json[]

  @@map("calendar_events")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

model SecurityLog {
  id           String            @id @default(uuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime          @default(now())
  details      String?
  city         String?
  country      String?
  user         User?             @relation("SecurityLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model LessonTemplate {
  id              String          @id @default(uuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]        @relation("LessonTemplates")

  @@map("lesson_templates")
}

model TemplateBlock {
  id         String         @id @default(uuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}

model Form {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")

  @@map("forms")
}

model FormField {
  id          String        @id @default(uuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  options     Json? // [{ id, text, isCorrect, points }]
  placeholder String?
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@map("form_fields")
}

model FormResponse {
  id           String               @id @default(uuid())
  formId       String
  form         Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime             @default(now())
  score        Float? // Percentage score if it's a quiz
  answers      FormResponseAnswer[]

  @@map("form_responses")
}

model FormResponseAnswer {
  id         String       @id @default(uuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String       @db.Text

  @@map("form_response_answers")
}

model Achievement {
  id          String            @id @default(uuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model PlatformSettings {
  id                        String   @id @default(uuid())
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String   @default("#6366f1") // Indigo 500
  secondaryColor            String   @default("#a5b4fc") // Indigo 300
  accentColor               String   @default("#ec4899") // Pink 500
  backgroundColorLight      String   @default("#f8fafc") // Slate 50
  primaryColorDark          String   @default("#a5b4fc") // Indigo 300
  backgroundColorDark       String   @default("#020617") // Slate 950
  fontHeadline              String   @default("Space Grotesk")
  fontBody                  String   @default("Inter")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String? // Comma-separated list of allowed domains
  resourceCategories        String   @default("General,Recursos Humanos,Ventas")
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
