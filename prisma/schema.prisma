// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- MODELS ---

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole               @default(STUDENT)
  isActive              Boolean                @default(true)
  registeredDate        DateTime               @default(now())
  lastLogin             DateTime?
  xp                    Int                    @default(0)
  theme                 String?
  // Relaciones 2FA
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  // Relaciones
  coursesAsInstructor   Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  quizAttempts          QuizAttempt[]
  progress              CourseProgress[]
  createdAnnouncements  Announcement[]
  notifications         Notification[]
  createdEvents         CalendarEvent[]        @relation("EventCreator")
  attendedEvents        CalendarEvent[]        @relation("EventAttendees")
  uploadedResources     Resource[]             @relation("UploaderResources")
  sharedResources       Resource[]             @relation("SharedResources")
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  notes                 UserNote[]
  achievements          UserAchievement[]
  createdForms          Form[]                 @relation("CreatedForms")
  formResponses         FormResponse[]
  sharedForms           Form[]                 @relation("SharedForms")
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  // Relaciones
  instructorId    String?
  instructor      User?            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  // Relaciones
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  // Relaciones
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  progress      LessonCompletionRecord[]
  templates     LessonTemplate[] @relation("TemplateFromLesson")
  notes         UserNote[]
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  // Relaciones
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  // Relaciones
  contentBlockId String      @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String         @db.Text
  order    Int
  // Relaciones
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  attempts AnswerAttempt[]
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean
  feedback     String?
  // Relaciones
  questionId   String
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id           String          @id @default(cuid())
  userId       String
  quizId       String
  score        Float
  attemptNumber Int
  submittedAt  DateTime        @default(now())
  // Relaciones
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  // Relaciones
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  // Relaciones
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id          String    @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime  @default(now())
  type        String // 'view', 'quiz', 'video'
  score       Float? // Solo para 'quiz'
  // Relaciones
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@unique([userId, lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  String
  priority  String   @default("Normal")
  // Relaciones
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?
  pin         String?      // Hashed PIN
  ispublic    Boolean      @default(true)
  // Relaciones
  uploaderId  String?
  parentId    String?
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children    Resource[]   @relation("FolderHierarchy")
  uploader    User?        @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]       @relation("SharedResources")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  color               String            @default("blue")
  audienceType        EventAudienceType @default(ALL)
  attachments         Json?
  // Relaciones
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
}

model PlatformSettings {
  id                        String  @id @default(cuid())
  platformName              String  @default("NexusAlpri")
  allowPublicRegistration   Boolean @default(true)
  emailWhitelist            String?
  enableEmailNotifications  Boolean @default(true)
  require2faForAdmins       Boolean @default(false)
  enableIdleTimeout         Boolean @default(true)
  idleTimeoutMinutes        Int     @default(20)
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  resourceCategories        String? @db.Text
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  // Relaciones
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime   @default(now())
  // Relaciones
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@unique([userId, achievementId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?          @db.Text
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
  // Relaciones
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LessonTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           String // SYSTEM or USER
  // Relaciones
  creatorId      String?
  creator        User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  fromLessonId   String?
  fromLesson     Lesson?        @relation("TemplateFromLesson", fields: [fromLessonId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  templateId String
  type       LessonType
  order      Int
  // Relaciones
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- FORMULARIOS ---
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       FormStatus @default(DRAFT)
  isQuiz       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relaciones
  creatorId    String
  creator      User     @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]   @relation("SharedForms")
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean  @default(false)
  options     Json? // Para 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  order       Int
  // Relaciones
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime     @default(now())
  score       Float? // Para quizzes
  // Relaciones
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String       @db.Text // JSON para multiple_choice
  // Relaciones
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
