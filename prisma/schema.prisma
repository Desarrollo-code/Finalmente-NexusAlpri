// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- MODELS ---

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  avatar              String?
  role                UserRole @default(STUDENT)
  xp                  Int      @default(0)
  registeredDate      DateTime @default(now())
  lastLogin           DateTime?
  isActive            Boolean  @default(true)
  isTwoFactorEnabled  Boolean  @default(false)
  twoFactorSecret     String?

  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  notifications       Notification[]
  resourcesUploaded   Resource[]
  createdEvents       CalendarEvent[] @relation("CreatedEvents")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  achievements        UserAchievement[]
  formsCreated        Form[] @relation("FormCreator")
  formResponses       FormResponse[] @relation("FormResponder")
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[] @relation("UserSecurityLogs")

  @@map("users")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publicationDate DateTime?

  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())

  moduleId String
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  notes           UserNote[]
  completions     LessonCompletionRecord[]
  templates       LessonTemplate[] @relation("LessonToTemplate")

  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  quiz      Quiz?

  @@map("content_blocks")
}

model Quiz {
  id              String      @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int?        

  contentBlockId  String      @unique
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions       Question[]
  attempts        QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int

  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]
  answers AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean @default(false)
  feedback    String?
  points      Int     @default(0)

  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  attempts    AnswerAttempt[]

  @@map("answer_options")
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Int      @default(0)
  completedAt         DateTime?
  
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  enrollmentId        String       @unique
  enrollment          Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons    LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String   // 'view', 'quiz', 'video'
    score       Int?
    completedAt DateTime @default(now())
    
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}

model QuizAttempt {
    id              String          @id @default(cuid())
    userId          String
    quizId          String
    attemptNumber   Int
    score           Float
    submittedAt     DateTime        @default(now())

    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers         AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    attemptId         String
    questionId        String
    selectedOptionId  String

    attempt           QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    content   String
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lessonId])
    @@map("user_notes")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      DateTime @default(now())
  authorId  String
  audience  String   // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR'
  priority  String   @default("Normal")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json?
  color               String            @default("blue")

  creatorId           String
  creator             User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete:Cascade)
  
  audienceType        EventAudienceType @default(ALL)
  attendees           User[]            @relation("EventAttendees")

  @@map("calendar_events")
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  category    String?
  tags        String?
  createdAt   DateTime     @default(now())
  ispublic    Boolean      @default(true)
  pin         String?

  uploaderId  String?
  uploader    User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderHierarchy")

  sharedWith  User[]
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  
  primaryColor                String    @default("#6366f1") // indigo-500
  secondaryColor              String    @default("#a5b4fc") // indigo-300
  accentColor                 String    @default("#ec4899") // pink-500
  backgroundColorLight        String    @default("#f8fafc") // slate-50
  
  primaryColorDark            String    @default("#a5b4fc") // indigo-300
  backgroundColorDark         String    @default("#020617") // slate-950

  fontHeadline                String    @default("Space Grotesk")
  fontBody                    String    @default("Inter")

  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  emailWhitelist              String?
  
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)

  enableIdleTimeout           Boolean   @default(true)
  idleTimeoutMinutes          Int       @default(20)
  
  require2faForAdmins         Boolean   @default(false)
  
  resourceCategories          String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")

  updatedAt                   DateTime  @updatedAt
}

model Achievement {
    id              String          @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    points          Int
    icon            String
    
    userAchievements UserAchievement[]

    @@map("achievements")
}

model UserAchievement {
    id            String    @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime  @default(now())

    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@unique([userId, achievementId])
    @@map("user_achievements")
}

model LessonTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // 'SYSTEM' or 'USER'
  
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  originalLessonId String?
  originalLesson   Lesson? @relation("LessonToTemplate", fields: [originalLessonId], references: [id], onDelete: SetNull)

  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type        LessonType
  order       Int
}

model Form {
    id            String        @id @default(cuid())
    title         String
    description   String?
    status        FormStatus    @default(DRAFT)
    isQuiz        Boolean       @default(false)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    
    creatorId     String
    creator       User          @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)

    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]
}

model FormField {
    id            String        @id @default(cuid())
    label         String
    type          FormFieldType
    options       Json?
    required      Boolean       @default(false)
    placeholder   String?
    order         Int
    
    formId        String
    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormResponse {
    id            String      @id @default(cuid())
    formId        String
    userId        String
    submittedAt   DateTime    @default(now())
    score         Float?
    
    form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    user          User        @relation("FormResponder", fields: [userId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]
}

model FormAnswer {
    id            String      @id @default(cuid())
    responseId    String
    fieldId       String
    value         String
    
    response      FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field         FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model SecurityLog {
  id            String            @id @default(cuid())
  userId        String?
  user          User?             @relation("UserSecurityLogs", fields: [userId], references: [id], onDelete: SetNull)
  event         SecurityLogEvent
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime          @default(now())
  details       String?
  emailAttempt  String?
  country       String?
  city          String?
}
