// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  avatar                String?
  role                  UserRole  @default(STUDENT)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  theme                 String?   @default("dark")

  createdCourses      Course[]           @relation("CreatedCourses")
  enrollments         Enrollment[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  uploadedResources   Resource[]         @relation("UploadedResources")
  sharedResources     Resource[]         @relation("SharedResources")
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]    @relation("EventAttendees")
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  quizAttempts        QuizAttempt[]      @relation("UserAttempts")


  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  instructorId    String
  instructor      User          @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
  
  @@index([moduleId])
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz      Quiz?
  
  @@index([lessonId])
}


model Quiz {
    id              String @id @default(cuid())
    title           String
    description     String? @db.Text
    
    contentBlockId  String      @unique
    contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions       Question[]
    attempts        QuizAttempt[]

    @@index([contentBlockId])
}

model Question {
    id      String        @id @default(cuid())
    text    String        @db.Text
    type    QuestionType  @default(MULTIPLE_CHOICE)
    order   Int
    
    quizId  String
    quiz    Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options AnswerOption[]
    answerAttempts AnswerAttempt[]

    @@index([quizId])
}

model AnswerOption {
    id          String @id @default(cuid())
    text        String @db.Text
    isCorrect   Boolean
    feedback    String? @db.Text
    
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answerAttempts AnswerAttempt[]

    @@index([questionId])
}

model QuizAttempt {
    id              String    @id @default(cuid())
    userId          String
    quizId          String
    submittedAt     DateTime  @default(now())
    score           Float // Score percentage for this attempt
    
    user            User      @relation("UserAttempts", fields: [userId], references: [id], onDelete: Cascade)
    quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers         AnswerAttempt[]
    
    @@index([userId])
    @@index([quizId])
}

model AnswerAttempt {
    id                  String        @id @default(cuid())
    attemptId           String
    questionId          String
    selectedOptionId    String
    
    attempt             QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    question            Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption      AnswerOption   @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    
    @@index([attemptId])
}


model Enrollment {
  id              String    @id @default(cuid()) // Clave primaria simple
  userId          String
  courseId        String
  enrolledAt      DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress        CourseProgress?

  @@unique([userId, courseId]) // Asegura que un usuario solo pueda inscribirse una vez por curso
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  enrollmentId  String    @unique // Relación uno a uno con la inscripción
  progressPercentage Float @default(0)
  completedAt   DateTime?
  
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String   // "view" or "quiz"
    score       Float?   // Score if type is "quiz"
    completedAt DateTime @default(now())

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
    @@index([progressId])
}

model UserNote {
    id        String @id @default(cuid())
    userId    String
    lessonId  String
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lessonId])
    @@index([userId])
}

model Resource {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  type          ResourceType
  url           String?
  category      String
  tags          String?
  uploadDate    DateTime      @default(now())
  pin           String?
  
  ispublic      Boolean @default(true)

  uploaderId    String?
  uploader      User?          @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  sharedWith    User[]        @relation("SharedResources")

  parentId      String?
  parent        Resource?     @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction)
  children      Resource[]    @relation("FolderChildren")

  @@index([parentId])
  @@index([uploaderId])
}


model Announcement {
    id          String @id @default(cuid())
    title       String
    content     String @db.Text
    date        DateTime
    authorId    String
    audience    Json // Can be "ALL" or an array of UserRole
    priority    String @default("Normal")
    
    author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@index([authorId])
}

model Notification {
    id          String      @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean     @default(false)
    createdAt   DateTime    @default(now())
    
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model CalendarEvent {
    id                  String      @id @default(cuid())
    title               String
    description         String?     @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean
    color               String      @default("blue")
    audienceType        String      // ALL, STUDENT, INSTRUCTOR, ADMINISTRATOR, SPECIFIC
    videoConferenceLink String?
    attachments         Json?       // Array de { name: string, url: string }
    
    creatorId           String
    creator             User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]      @relation("EventAttendees")

    @@index([creatorId])
}

model PlatformSettings {
    id                        String    @id @default(cuid())
    platformName              String    @default("NexusAlpri")
    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    primaryColor              String    @default("#6366F1") // Indigo-500
    secondaryColor            String    @default("#A5B4FC") // Indigo-300
    accentColor               String    @default("#818CF8") // Indigo-400
    backgroundColorLight      String    @default("#F8FAFC") // Slate-50
    primaryColorDark          String    @default("#818CF8") // Indigo-400
    backgroundColorDark       String    @default("#0F172A") // Slate-900
    fontHeadline              String    @default("Space Grotesk")
    fontBody                  String    @default("Inter")
    allowPublicRegistration   Boolean   @default(true)
    enableEmailNotifications  Boolean   @default(true)
    emailWhitelist            String?   @db.Text
    require2faForAdmins       Boolean   @default(false)
    idleTimeoutMinutes        Int       @default(20)
    enableIdleTimeout         Boolean   @default(true)
    passwordMinLength         Int       @default(8)
    passwordRequireUppercase  Boolean   @default(true)
    passwordRequireLowercase  Boolean   @default(true)
    passwordRequireNumber     Boolean   @default(true)
    passwordRequireSpecialChar Boolean  @default(true)
    resourceCategories        String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General") @db.Text
    updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
    id              String            @id @default(cuid())
    event           SecurityLogEvent
    ipAddress       String
    details         String?           @db.Text
    createdAt       DateTime          @default(now())
    
    userId          String?
    emailAttempt    String?
    user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model LessonTemplate {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String?
  type          String          @default("USER") // 'SYSTEM' or 'USER'
  
  creatorId     String?
  creator       User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id              String      @id @default(cuid())
  type            LessonType
  order           Int

  templateId      String
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}
