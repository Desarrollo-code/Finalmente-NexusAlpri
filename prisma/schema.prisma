// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  role               UserRole  @default(STUDENT)
  avatar             String?
  theme              String?
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  registeredDate     DateTime  @default(now())

  createdCourses     Course[]      @relation("CreatedCourses")
  enrollments        Enrollment[]
  progress           CourseProgress[]
  uploadedResources  Resource[]    @relation("UploadedResources")
  sharedResources    Resource[]    @relation("SharedWithUsers")
  createdTemplates   LessonTemplate[] @relation("CreatedTemplates")
  createdEvents      CalendarEvent[] @relation("CreatedEvents")
  attendedEvents     CalendarEvent[] @relation("EventAttendees")
  authoredAnnouncements Announcement[] @relation("AuthoredAnnouncements")
  notifications      Notification[]
  securityLogs       SecurityLog[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  
  instructorId    String
  instructor      User         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id             String        @id @default(cuid())
  title          String
  order          Int
  
  moduleId       String
  module         Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks  ContentBlock[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  order     Int
  content   String?    @db.Text

  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  quiz      Quiz?      // One-to-one relation with Quiz

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  
  contentBlockId String    @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions      Question[]
}

model Question {
  id       String       @id @default(cuid())
  text     String       @db.Text
  type     QuestionType
  order    Int
  
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options  AnswerOption[]

  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  progress    CourseProgress?
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float     @default(0)

  enrollmentId       String    @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  completedLessons   LessonCompletionRecord[]
  
  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String   // 'view' or 'quiz'
    score       Float?   // Only for 'quiz' type

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model Resource {
    id           String @id @default(cuid())
    title        String
    description  String? @db.Text
    type         ResourceType
    category     String
    tags         String?
    url          String? @db.Text
    uploadDate   DateTime @default(now())
    pin          String?
    ispublic     Boolean @default(true)
    
    uploaderId   String
    uploader     User   @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
    
    parentId     String?
    parent       Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
    children     Resource[] @relation("FolderChildren")

    sharedWith   User[] @relation("SharedWithUsers")

    @@index([uploaderId])
    @@index([parentId])
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

model Announcement {
    id        String @id @default(cuid())
    title     String
    content   String @db.Text
    date      DateTime
    audience  Json // Could be 'ALL' or an array of UserRole
    priority  String @default("Normal")
    authorId  String
    author    User   @relation("AuthoredAnnouncements", fields: [authorId], references: [id])
}

model Notification {
    id          String @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean @default(false)
    createdAt   DateTime @default(now())

    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}


model CalendarEvent {
    id                  String   @id @default(cuid())
    title               String
    description         String?  @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean  @default(false)
    audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
    color               String   @default("blue")
    videoConferenceLink String?
    attachments         Json?     // Array of {name: string, url: string}

    creatorId           String
    creator             User     @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]   @relation("EventAttendees")

    @@index([creatorId])
}


model SecurityLog {
    id            String   @id @default(cuid())
    event         SecurityLogEvent
    ipAddress     String?
    userId        String?
    emailAttempt  String?  // To log email used in failed attempts
    details       String?  @db.Text
    createdAt     DateTime @default(now())
    
    user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([event])
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model LessonTemplate {
  id           String @id @default(cuid())
  name         String @unique
  description  String?
  type         TemplateType // SYSTEM or USER
  creatorId    String?      // Null for SYSTEM templates
  creator      User?        @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]

  @@index([creatorId])
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id            String @id @default(cuid())
  type          LessonType
  order         Int
  
  templateId    String
  template      LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}


model PlatformSettings {
    id                        String    @id @default(cuid())
    platformName              String    @default("NexusAlpri")
    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    fontBody                  String?   @default("Inter")
    fontHeadline              String?   @default("Space Grotesk")
    primaryColor              String?
    secondaryColor            String?
    accentColor               String?
    backgroundColorLight      String?
    primaryColorDark          String?
    backgroundColorDark       String?
    allowPublicRegistration   Boolean   @default(true)
    enableEmailNotifications  Boolean   @default(true)
    emailWhitelist            String?   @db.Text
    resourceCategories        String    @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
    passwordMinLength         Int       @default(8)
    passwordRequireUppercase  Boolean   @default(true)
    passwordRequireLowercase  Boolean   @default(true)
    passwordRequireNumber     Boolean   @default(true)
    passwordRequireSpecialChar Boolean  @default(true)
    enableIdleTimeout         Boolean   @default(true)
    idleTimeoutMinutes        Int       @default(20)
    require2faForAdmins       Boolean   @default(false)
    updatedAt                 DateTime  @updatedAt
}

    