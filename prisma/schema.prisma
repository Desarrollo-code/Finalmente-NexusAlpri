// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?   @db.VarChar(255)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime? @default(now())
  theme                 String?   @default("dark")
  xp                    Int       @default(0)
  
  // Relations
  courses             Course[]          @relation("CreatedCourses")
  enrollments         Enrollment[]
  announcements       Announcement[]
  notifications       Notification[]
  events              CalendarEvent[]
  uploadedResources   EnterpriseResource[] @relation("UploadedResources")
  sharedResources     EnterpriseResource[] @relation("SharedResources")
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  securityLogs        SecurityLog[]
  quizAttempts        QuizAttempt[]
}

// --- COURSE MODELS ---
model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?      @db.VarChar(255)
  category        String?
  status          CourseStatus @default(DRAFT)
  instructorId    String?
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructor  User?         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module            Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes             UserNote[]
}

model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int
    lessonId  String

    // Relations
    lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    quiz   Quiz?
}

// --- QUIZ MODELS ---
model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?   @db.Text
  contentBlockId String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(MULTIPLE_CHOICE)
  order     Int
  quizId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String? @db.Text
  questionId String

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
    id          String @id @default(cuid())
    userId      String
    quizId      String
    score       Float
    attemptedAt DateTime @default(now())

    // Relations
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers AnswerAttempt[]
}

model AnswerAttempt {
    id                String @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String

    // Relations
    quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- PROGRESS & ENROLLMENT ---
model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  progress   CourseProgress?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id         String      @id @default(cuid())
  progressId String
  lessonId   String
  type       String // 'view' or 'quiz'
  score      Float?
  completedAt DateTime @default(now())
  
  // Relations
  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

// --- USER CONTENT & COMMUNICATION ---
model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model EnterpriseResource {
    id           String       @id @default(cuid())
    title        String
    description  String?      @db.Text
    type         ResourceType
    category     String
    tags         String?
    url          String?      @db.VarChar(2048)
    uploadDate   DateTime     @default(now())
    uploaderId   String?
    hasPin       Boolean      @default(false)
    pin          String?
    parentId     String?
    ispublic     Boolean      @default(true)

    // Relations
    uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
    parent       EnterpriseResource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
    children     EnterpriseResource[] @relation("FolderChildren")
    sharedWith   User[]       @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  Json
  priority  String?  @default("Normal") // e.g., 'Normal', 'Urgente'

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
    id                  String      @id @default(cuid())
    title               String
    description         String?     @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean     @default(false)
    location            String?
    videoConferenceLink String?
    audienceType        String // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
    color               String?     @default("blue")
    attachments         Json?       // Stores an array of { name: string, url: string }
    creatorId           String
    
    // Relations
    creator             User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees           User[]
}

// --- LESSON TEMPLATES ---
model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?
  type           String // 'SYSTEM' or 'USER'
  creatorId      String?
  createdAt      DateTime  @default(now())
  
  // Relations
  creator         User?             @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  // Relations
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- GAMIFICATION ---
model Achievement {
    id              String @id @default(cuid())
    slug            String @unique
    name            String
    description     String
    icon            String
    points          Int
    
    // Relations
    userAchievements UserAchievement[]
}

model UserAchievement {
    userId          String
    achievementId   String
    earnedAt        DateTime @default(now())

    // Relations
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    
    @@id([userId, achievementId])
}


// --- SETTINGS & SECURITY ---
model PlatformSettings {
    id                         String    @id @default(cuid())
    platformName               String    @default("NexusAlpri")
    logoUrl                    String?
    watermarkUrl               String?
    landingImageUrl            String?
    authImageUrl               String?
    aboutImageUrl              String?
    benefitsImageUrl           String?
    allowPublicRegistration    Boolean   @default(true)
    enableEmailNotifications   Boolean   @default(true)
    resourceCategories         String    @db.Text
    
    passwordMinLength          Int       @default(8)
    passwordRequireUppercase   Boolean   @default(true)
    passwordRequireLowercase   Boolean   @default(true)
    passwordRequireNumber      Boolean   @default(true)
    passwordRequireSpecialChar Boolean   @default(true)

    enableIdleTimeout          Boolean   @default(true)
    idleTimeoutMinutes         Int       @default(20)
    require2faForAdmins        Boolean   @default(false)
    
    // Theme Settings
    primaryColor               String?
    secondaryColor             String?
    accentColor                String?
    backgroundColorLight       String?
    primaryColorDark           String?
    backgroundColorDark        String?
    fontHeadline               String?
    fontBody                   String?

    updatedAt                  DateTime  @updatedAt
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String   // e.g., 'SUCCESSFUL_LOGIN', 'FAILED_LOGIN_ATTEMPT'
  ipAddress    String?
  userId       String?
  details      String?  @db.Text
  createdAt    DateTime @default(now())
  
  // New fields for data enrichment
  userAgent    String?  @db.Text
  country      String?
  city         String?

  // Relations
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}
