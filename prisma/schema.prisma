// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  pgbouncer    = true
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  xp                  Int       @default(0)
  isActive            Boolean   @default(true)
  registeredDate      DateTime? @default(now())
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  theme               String?

  createdCourses      Course[]           @relation("CreatedCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  achievements        UserAchievement[]
  uploadedResources   Resource[]
  createdEvents       CalendarEvent[]    @relation("CreatedEvents")
  attendedEvents      CalendarEvent[]    @relation("EventAttendees")
  announcements       Announcement[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  createdLessonNotes  UserNote[]
  quizAttempts        QuizAttempt[]
  createdTemplates    LessonTemplate[]
  createdForms        Form[]             @relation("CreatedForms")
  sharedForms         Form[]             @relation("SharedForms")
  formResponses       FormResponse[]

  @@map("User")
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("Course")
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("Module")
}

model Lesson {
  id            String             @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]
  templates     LessonTemplate[]   @relation("LessonTemplates")

  @@map("Lesson")
}

model ContentBlock {
  id       String     @id @default(cuid*())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@map("ContentBlock")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlockId String      @unique
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
  maxAttempts  Int?

  @@map("Quiz")
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]

  @@map("Question")
}

model AnswerOption {
  id           String          @id @default(cuid())
  text         String
  isCorrect    Boolean
  feedback     String?
  questionId   String
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  points       Int?            @default(10)

  @@map("AnswerOption")
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progressPercentage Float?                   @default(0)
  completedAt        DateTime?
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@map("CourseProgress")
}

model LessonCompletionRecord {
  id          String          @id @default(cuid())
  progressId  String
  progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime        @default(now())
  type        String // "view", "quiz", "video"
  score       Float?

  @@unique([progressId, lessonId])
  @@map("LessonCompletionRecord")
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean      @default(false)
  pin          String?
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  children     Resource[]   @relation("FolderHierarchy")

  @@map("Resource")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  String // 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR' as JSON array
  priority  String?  @default("Normal")

  @@map("Announcement")
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        EventAudienceType
  attendees           User[]            @relation("EventAttendees")
  color               String?
  creatorId           String
  creator             User              @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attachments         Json?

  @@map("CalendarEvent")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("Notification")
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("UserNote")
}

model PlatformSettings {
  id                        String  @id @default(cuid())
  platformName              String  @default("NexusAlpri")
  allowPublicRegistration     Boolean @default(true)
  enableEmailNotifications  Boolean @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean @default(false)
  idleTimeoutMinutes        Int     @default(20)
  enableIdleTimeout         Boolean @default(true)
  passwordMinLength         Int     @default(8)
  passwordRequireUppercase  Boolean @default(true)
  passwordRequireLowercase  Boolean @default(true)
  passwordRequireNumber     Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(false)
  resourceCategories        String? // Comma-separated
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String? @default("Space Grotesk")
  fontBody                  String? @default("Inter")
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  updatedAt                 DateTime @updatedAt

  @@map("PlatformSettings")
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  emailAttempt String?
  userAgent    String?
  details      String?
  country      String?
  city         String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())

  @@map("SecurityLog")
}

model Achievement {
  id                 String            @id @default(cuid())
  slug               AchievementSlug   @unique
  name               String
  description        String
  icon               String
  points             Int
  unlockedBy         UserAchievement[]

  @@map("Achievement")
}

model UserAchievement {
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
  @@map("UserAchievement")
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]

  @@map("QuizAttempt")
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

  @@map("AnswerAttempt")
}

model LessonTemplate {
  id             String           @id @default(cuid())
  name           String
  description    String?
  type           String // SYSTEM, USER
  creatorId      String?
  creator        User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  lessonId       String?
  lesson         Lesson?          @relation("LessonTemplates", fields: [lessonId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String @id @default(cuid())
  type       String
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- Forms System ---
model Form {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  isQuiz       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creatorId    String
  creator      User     @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]   @relation("SharedForms")
}

model FormField {
  id           String   @id @default(cuid())
  label        String
  type         String   // SHORT_TEXT, LONG_TEXT, SINGLE_CHOICE, MULTIPLE_CHOICE
  required     Boolean  @default(false)
  options      Json?    // [{id, text, isCorrect, points}]
  placeholder  String?
  order        Int
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]
}

model FormResponse {
  id           String   @id @default(cuid())
  formId       String
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt  DateTime @default(now())
  answers      FormAnswer[]
  score        Float?   // Only if isQuiz is true
}

model FormAnswer {
  id          String   @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value       String   @db.Text // Stored as string, JSON for multiple choice
}
