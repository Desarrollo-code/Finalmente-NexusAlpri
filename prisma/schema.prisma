// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ===================
//  MODELS
// ===================

// --- User and Auth ---
model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  name                String
  password            String
  role                UserRole     @default(STUDENT)
  avatar              String?
  registeredDate      DateTime?    @default(now())
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  
  // Relations
  courses             Course[]     @relation("InstructorCourses")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[] @relation("EventCreator")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  uploadedResources   Resource[]
  notifications       Notification[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- Course Structure ---
model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  instructorId    String?
  instructor      User?        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      String     // TEXT, VIDEO, FILE, QUIZ
  content   String?    @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?      // One-to-one with Quiz if type is 'QUIZ'
  
  @@index([lessonId])
}


enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// --- Quizzes ---
model Quiz {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  contentBlockId String @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  type      String       // e.g., MULTIPLE_CHOICE
  order     Int
  
  // Relations
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  
  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String  @db.Text
  isCorrect  Boolean
  feedback   String? @db.Text

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
}


// --- User Interactions ---
model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  completedLessonIds  Json     // Array of { lessonId: string, type: 'view' | 'quiz', score?: number }
  progressPercentage  Float    @default(0)
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}


// --- Platform Content ---
model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  category    String
  tags        Json     // Array of strings
  url         String?  @db.Text
  pin         String?  // Hashed PIN
  
  uploadDate  DateTime @default(now())
  
  // Relations
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Resource? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderHierarchy")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id         String    @id @default(cuid())
  title      String
  content    String    @db.Text
  date       DateTime  @default(now())
  audience   Json      // 'ALL' or array of UserRole
  
  // Relations
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
}


// --- Notifications and Calendar ---
model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id           String   @id @default(cuid())
  title        String
  description  String?
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean  @default(false)
  audienceType String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color        String?  // e.g., 'blue', 'green'
  
  createdAt    DateTime @default(now())
  
  // Relations
  creatorId    String
  creator      User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]   @relation("EventAttendees")

  @@index([creatorId])
}


// --- System Settings ---
model PlatformSettings {
  id                         String    @id @default(cuid())
  platformName               String
  allowPublicRegistration    Boolean   @default(true)
  enableEmailNotifications   Boolean   @default(true)
  resourceCategories         Json      // Array of strings
  passwordMinLength          Int       @default(8)
  passwordRequireUppercase   Boolean   @default(true)
  passwordRequireLowercase   Boolean   @default(true)
  passwordRequireNumber      Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(true)
  enableIdleTimeout          Boolean   @default(true)
  idleTimeoutMinutes         Int       @default(20)
  require2faForAdmins        Boolean   @default(false)
  updatedAt                  DateTime  @updatedAt
}
