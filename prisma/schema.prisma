// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
<<<<<<< HEAD
  relationMode = "prisma"
=======
  relationMode = "prisma" // Usamos la emulación de Prisma para evitar restricciones de FK
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
<<<<<<< HEAD
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
=======
}

enum TemplateType {
  SYSTEM
  USER
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

<<<<<<< HEAD
enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  theme                 String?
  registeredDate        DateTime      @default(now())
  lastLogin             DateTime?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  isActive              Boolean       @default(true)
  xp                    Int           @default(0)
  
  createdCourses        Course[]      @relation("CreatedCourses")
  enrollments           Enrollment[]
  notes                 UserNote[]
  uploadedResources     Resource[]    @relation("UploadedResources")
  sharedResources       Resource[]    @relation("SharedResources")
  announcements         Announcement[]
  notifications         Notification[]
  calendarEventsCreated CalendarEvent[]
  attendedEvents        CalendarEvent[] @relation("EventAttendees")

  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  achievements          UserAchievement[]

  createdForms          Form[]       @relation("CreatedForms")
  sharedForms           Form[]       @relation("SharedForms")
  formResponses         FormResponse[]
  
  @@index([email])
=======

// --- MODELS ---

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  password            String
  avatar              String?
  role                UserRole        @default(STUDENT)
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime        @default(now())
  theme               String?
  xp                  Int?            @default(0)
  isActive            Boolean         @default(true) // Para inactivación de usuarios

  coursesAuthored     Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  userNotes           UserNote[]
  uploadedResources   Resource[]      @relation("UploadedResources")
  sharedResources     Resource[]      @relation("SharedResources")
  createdForms        Form[]          @relation("FormCreator")
  formResponses       FormResponse[]
  sharedForms         Form[]          @relation("SharedForms")
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  quizAttempts        QuizAttempt[]
  courseProgresses    CourseProgress[]
  createdTemplates    LessonTemplate[]
  securityLogs        SecurityLog[]
  achievements        UserAchievement[]
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}

model Course {
  id              String      @id @default(cuid())
  title           String
<<<<<<< HEAD
  description     String?     @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  instructorId    String
  instructor      User        @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
=======
  description     String      @db.Text
  imageUrl        String?
  category        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?

  instructorId    String
  instructor      User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
}

model Module {
  id        String   @id @default(cuid())
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
<<<<<<< HEAD
  id           String         @id @default(cuid())
  title        String
  order        Int
  moduleId     String
  module       Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes    UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id          String      @id @default(cuid())
  type        LessonType
  content     String?     @db.Text
  order       Int
  lessonId    String
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz        Quiz?
=======
  id            String          @id @default(cuid())
  title         String
  order         Int

  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  lessonCompletions LessonCompletionRecord[]
}

model ContentBlock {
    id        String     @id @default(cuid())
    type      LessonType
    content   String?    @db.Text
    order     Int

    lessonId  String
    lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33

  @@index([lessonId])
}

model Quiz {
<<<<<<< HEAD
  id             String      @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?        // Null significa ilimitado
  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean  @default(false)
  feedback    String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score         Float
  attemptNumber Int
  submittedAt   DateTime  @default(now())
  
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

   @@index([attemptId])
}


model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String    @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String    @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float?    @default(0)
  completedAt        DateTime?
  
  completedLessons   LessonCompletionRecord[]
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id              String    @id @default(cuid())
    progressId      String
    progress        CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId        String
    lesson          Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    type            String    // 'view' or 'quiz'
    score           Float?    // Only for quizzes
    completedAt     DateTime  @default(now())

    @@unique([progressId, lessonId])
    @@index([progressId])
}

model UserNote {
    id        String @id @default(cuid())
    userId    String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lessonId  String
    lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([userId, lessonId])
}


model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime @default(now())
  uploaderId   String?
  uploader     User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  
  parentId     String?
  parent       Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[] @relation("FolderChildren")
  
  ispublic     Boolean  @default(true)
  sharedWith   User[]   @relation("SharedResources")
  
  pin          String?  // Almacena el hash del PIN

  @@index([parentId])
  @@index([uploaderId])
=======
    id           String      @id @default(cuid())
    title        String
    description  String?
    maxAttempts  Int?        // Null for unlimited attempts

    contentBlockId String      @unique
    contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
    
    questions    Question[]
    attempts     QuizAttempt[]
}

model Question {
    id      String       @id @default(cuid())
    text    String
    type    QuestionType @default(SINGLE_CHOICE)
    order   Int
    
    quizId  String
    quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    
    options AnswerOption[]
    answerAttempts AnswerAttempt[]
}

model AnswerOption {
    id         String   @id @default(cuid())
    text       String
    isCorrect  Boolean  @default(false)
    feedback   String?
    points     Int      @default(0) // For quiz scoring

    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
    id                  String    @id @default(cuid())
    userId              String
    courseId            String
    enrollmentId        String    @unique
    progressPercentage  Float?
    lastActivity        DateTime? @updatedAt
    completedAt         DateTime? // Date of 100% completion

    enrollment          Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    completedLessons    LessonCompletionRecord[]

    @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    type        String   // "view" or "quiz"
    score       Float?   // Score for quiz types
    completedAt DateTime @default(now())

    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
}

model QuizAttempt {
    id            String    @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime  @default(now())

    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]
}

model AnswerAttempt {
    id                String @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String

    quizAttempt       QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}


model Announcement {
<<<<<<< HEAD
    id          String @id @default(cuid())
    title       String
    content     String @db.Text
    date        DateTime @default(now())
    authorId    String
    author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    audience    Json     // 'ALL', ['STUDENT'], ['INSTRUCTOR', 'ADMINISTRATOR'], etc.
    priority    String?  @default("Normal")

    @@index([authorId])
=======
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String?  @default("Normal")
  
  authorId  String
  audience  Json
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}

model CalendarEvent {
    id                  String    @id @default(cuid())
    title               String
<<<<<<< HEAD
    description         String?  @db.Text
    location            String?
    start               DateTime
    end                 DateTime
    allDay              Boolean  @default(false)
    
    audienceType        EventAudienceType @default(ALL)
    attendees           User[]   @relation("EventAttendees")
    
    color               String?  @default("blue")
    videoConferenceLink String?
    attachments         Json?     // Array de { name: string, url: string }
=======
    description         String?   @db.Text
    start               DateTime
    end                 DateTime
    allDay              Boolean
    color               String    @default("blue")
    location            String?
    videoConferenceLink String?
    attachments         Json?
    
    audienceType        EventAudienceType @default(ALL)
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
    
    creatorId           String
    creator             User      @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
    
<<<<<<< HEAD
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
  id           String            @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?           // Para intentos de login con email no existente
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?
  createdAt    DateTime          @default(now())

  @@index([userId])
  @@index([event])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  
  // General
  platformName              String    @default("NexusAlpri")
  enableEmailNotifications  Boolean   @default(true)
  resourceCategories        String    @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")

  // Security
  allowPublicRegistration   Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  
  // Appearance
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model LessonTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  creator         User?          @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String  @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String?
  points      Int     @default(0)
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime  @default(now())

  @@unique([userId, achievementId])
}


// --- FORMS ---
model Form {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  status        FormStatus  @default(DRAFT)
  isQuiz        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  creatorId     String
  creator       User        @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]      @relation("SharedForms")
  
  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json?         // Para SINGLE_CHOICE y MULTIPLE_CHOICE: { id: string, text: string, isCorrect?: boolean, points?: number }[]
  order       Int
  
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String       @id @default(cuid())
  formId        String
  form          Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt   DateTime     @default(now())
  score         Float?       // Solo para quizzes
  
  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id          String       @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value       String       @db.Text

  @@index([responseId])
  @@index([fieldId])
=======
    attendees           User[]    @relation("EventAttendees")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?
  hasPin      Boolean      @default(false)
  pin         String?

  uploaderId  String?
  uploader    User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Resource[]   @relation("FolderChildren")
  
  sharedWith  User[]       @relation("SharedResources")
  ispublic    Boolean      @default(true)
}

model Notification {
    id          String    @id @default(cuid())
    userId      String
    title       String
    description String?
    link        String?
    read        Boolean   @default(false)
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
    id                        String    @id @default(cuid())
    platformName              String    @default("NexusAlpri")
    allowPublicRegistration   Boolean   @default(true)
    enableEmailNotifications  Boolean   @default(true)
    emailWhitelist            String?   @db.Text
    resourceCategories        String?   @db.Text

    passwordMinLength         Int       @default(8)
    passwordRequireUppercase  Boolean   @default(true)
    passwordRequireLowercase  Boolean   @default(true)
    passwordRequireNumber     Boolean   @default(true)
    passwordRequireSpecialChar Boolean  @default(true)

    enableIdleTimeout         Boolean   @default(true)
    idleTimeoutMinutes        Int       @default(20)
    require2faForAdmins       Boolean   @default(false)
    
    primaryColor              String?
    secondaryColor            String?
    accentColor               String?
    backgroundColorLight      String?
    primaryColorDark          String?
    backgroundColorDark       String?
    fontHeadline              String?
    fontBody                  String?
    logoUrl                   String?
    watermarkUrl              String?
    landingImageUrl           String?
    authImageUrl              String?
    aboutImageUrl             String?
    benefitsImageUrl          String?

    updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
    id           String           @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
    details      String?          @db.Text
    ipAddress    String?
    userAgent    String?          @db.Text
    city         String?
    country      String?
    createdAt    DateTime         @default(now())
    emailAttempt String?
}

model LessonTemplate {
    id             String @id @default(cuid())
    name           String
    description    String?
    type           TemplateType
    creatorId      String?
    creator        User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)

    templateBlocks TemplateBlock[]
}

model TemplateBlock {
    id         String     @id @default(cuid())
    type       LessonType
    order      Int

    templateId String
    template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
    id              String      @id @default(cuid())
    title           String
    description     String?
    status          FormStatus  @default(DRAFT)
    isQuiz          Boolean     @default(false)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    creatorId       String
    creator         User        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)

    fields          FormField[]
    responses       FormResponse[]
    sharedWith      User[]      @relation("SharedForms")
}

model FormField {
    id          String        @id @default(cuid())
    label       String
    type        FormFieldType
    options     Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE
    required    Boolean       @default(false)
    placeholder String?
    order       Int

    formId      String
    form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)

    answers     FormAnswer[]
}

model FormResponse {
    id          String    @id @default(cuid())
    formId      String
    form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    submittedAt DateTime  @default(now())
    score       Float?    // Puntuación si el formulario es un quiz

    answers     FormAnswer[]
}

model FormAnswer {
    id          String @id @default(cuid())
    responseId  String
    response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

    fieldId     String
    field       FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    
    value       String    @db.Text
}

model Achievement {
    id          String    @id @default(cuid())
    slug        String    @unique // e.g., "first-course-completed"
    name        String
    description String
    icon        String?
    points      Int       @default(10)

    users       UserAchievement[]
}

model UserAchievement {
    id            String      @id @default(cuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt      DateTime    @default(now())

    @@unique([userId, achievementId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
>>>>>>> b43b7e40bf23f220d0ff68bc67bb615011948a33
}
