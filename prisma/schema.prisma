// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "client-js"
}

// ----------------------------------
// --- ENUMS
// ----------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// ----------------------------------
// --- MODELS
// ----------------------------------

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?            @default(now())
  xp                  Int                  @default(0)
  theme               String?
  isActive            Boolean              @default(true)

  // Relations
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  createdResources    Resource[]           @relation("UploadedResources")
  sharedResources     Resource[]           @relation("SharedResources")
  announcements       Announcement[]
  createdEvents       CalendarEvent[]      @relation("CreatedEvents")
  attendedEvents      CalendarEvent[]      @relation("EventAttendees")
  notifications       Notification[]
  quizAttempts        QuizAttempt[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  createdForms        Form[]               @relation("CreatedForms")
  sharedForms         Form[]               @relation("SharedForms")
  formResponses       FormResponse[]
  achievements        UserAchievement[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String
  imageUrl        String?        @db.VarChar(1023)
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?

  // Relations
  instructor    User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId  String
  modules       Module[]
  enrollments   Enrollment[]
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?

  // Relations
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String        @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int

  // Relations
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean         @default(false)
  feedback    String?

  // Relations
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  attempts    AnswerAttempt[]
}

model QuizAttempt {
    id            String          @id @default(cuid())
    attemptNumber Int
    score         Float
    submittedAt   DateTime        @default(now())

    // Relations
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId   String
    answers  AnswerAttempt[]

    @@index([quizId])
}

model AnswerAttempt {
    id        String      @id @default(cuid())

    // Relations
    attempt          QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId        String
    question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId       String
    selectedOption   AnswerOption   @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId String
}

model Enrollment {
  id          String         @id @default(cuid())
  enrolledAt  DateTime       @default(now())

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
    id                 String                   @id @default(cuid())
    progressPercentage Float                    @default(0)
    completedAt        DateTime?
    
    // Relations
    user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    courseId           String
    enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
    enrollmentId       String                   @unique
    completedLessons   LessonCompletionRecord[]

    @@unique([userId, courseId])
}

model LessonCompletionRecord {
    id           String   @id @default(cuid())
    type         String   // "view" or "quiz"
    score        Float?
    completedAt  DateTime @default(now())

    // Relations
    progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    progressId String
    lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId   String

    @@unique([progressId, lessonId])
}

model Resource {
  id           String    @id @default(cuid())
  title        String
  description  String?
  type         String // FOLDER, DOCUMENT, VIDEO, LINK etc.
  url          String?   @db.VarChar(1023)
  uploadDate   DateTime  @default(now())
  category     String?
  tags         String?
  ispublic     Boolean   @default(true)
  pin          String?
  
  // Relations
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?
  parent     Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId   String?
  children   Resource[] @relation("FolderChildren")
  sharedWith User[]     @relation("SharedResources")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      DateTime @default(now())
  audience  Json     @default("\"ALL\"")
  priority  String   @default("Normal")

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  location            String?
  videoConferenceLink String?
  color               String             @default("blue")
  attachments         Json               @default("[]")
  audienceType        String             // "ALL", "ADMINISTRATOR", "INSTRUCTOR", "STUDENT", "SPECIFIC"
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  creator              User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  attendees            User[]     @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  // Comma-separated list
  
  // Password Policy
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)

  // Security
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)

  // Customization
  resourceCategories       String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  primaryColor             String?
  secondaryColor           String?
  accentColor              String?
  backgroundColorLight     String?
  primaryColorDark         String?
  backgroundColorDark      String?
  logoUrl                  String?  @db.VarChar(1023)
  watermarkUrl             String?  @db.VarChar(1023)
  landingImageUrl          String?  @db.VarChar(1023)
  authImageUrl             String?  @db.VarChar(1023)
  aboutImageUrl            String?  @db.VarChar(1023)
  benefitsImageUrl         String?  @db.VarChar(1023)
}

model LessonTemplate {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        TemplateType   @default(USER)
  createdAt   DateTime       @default(now())
  
  // Relations
  creator        User?            @relation(fields: [creatorId], references: [id])
  creatorId      String?
  templateBlocks TemplateBlock[]
  sourceLesson   Lesson?          @relation(fields: [sourceLessonId], references: [id], onDelete: SetNull)
  sourceLessonId String?          @unique
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  // Relations
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
}

model UserNote {
    id        String   @id @default(cuid())
    content   String
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String

    @@unique([userId, lessonId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?
  createdAt    DateTime         @default(now())

  // Relations
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  emailAttempt String?          // For failed logins where user might not exist
}

model Achievement {
    id          String            @id @default(cuid())
    slug        AchievementSlug   @unique
    name        String
    description String
    icon        String
    points      Int

    UserAchievement UserAchievement[]
}

model UserAchievement {
    id            String    @id @default(cuid())
    unlockedAt    DateTime  @default(now())
    
    // Relations
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    achievementId String

    @@unique([userId, achievementId])
}


// --- MODELS FOR FORMS/SURVEYS FEATURE ---

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  creatorId    String
  creator      User           @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json          @default("[]")
  order       Int

  // Relations
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now())
  score       Float?   // For quizzes

  // Relations
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  value       String
  
  // Relations
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId     String
  field       FormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
