// Este es el esquema de Prisma adaptado para Render (PostgreSQL).
// Utiliza variables de entorno y est√° optimizado para despliegue.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  password             String
  avatar               String?
  role                 UserRole               @default(STUDENT)
  isActive             Boolean                @default(true)
  isTwoFactorEnabled   Boolean                @default(false)
  twoFactorSecret      String?
  xp                   Int                    @default(0)
  registeredDate       DateTime               @default(now())
  lastLogin            DateTime?
  coursesCreated       Course[]
  enrollments          Enrollment[]
  courseProgress       CourseProgress[]
  notes                UserNote[]
  resourcesUploaded    Resource[]
  announcements        Announcement[]
  notifications        Notification[]
  achievements         UserAchievement[]
  securityLogs         SecurityLog[]
  createdTemplates     LessonTemplate[]
  createdEvents        CalendarEvent[]        @relation("EventCreator")
  attendedEvents       CalendarEvent[]        @relation("EventAttendees")
  createdForms         Form[]
  formResponses        FormResponse[]
  sharedResources      Resource[]             @relation("SharedResourceWithUsers")
  sharedForms          Form[]                 @relation("SharedFormWithUsers")
  sentMessages         ChatMessage[]          @relation("SentMessages")
  quizAttempts         QuizAttempt[]
  courseReviews        CourseReview[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?
  category        String?
  instructorId    String
  instructor      User             @relation(fields: [instructorId], references: [id])
  status          CourseStatus     @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publicationDate DateTime?
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
  reviews         CourseReview[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
}

model AnswerOption {
  id          String        @id @default(cuid())
  text        String
  isCorrect   Boolean       @default(false)
  feedback    String?
  questionId  String
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime                 @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String        @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime      @default(now())
  type        String        // "view", "quiz", "video", etc.
  score       Float?        // Only for quizzes

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?    // Comma-separated
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[] @relation("FolderHierarchy")
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResourceWithUsers")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String   // 'ALL' o un array JSON de roles ['STUDENT', 'INSTRUCTOR']
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  videoConferenceLink String?
  audienceType        EventAudienceType @default(ALL)
  color               String?
  creatorId           String
  creator             User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")
  attachments         Json?
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  country      String?
  city         String?
}

model Achievement {
  id               String            @id @default(cuid())
  slug             AchievementSlug   @unique
  name             String
  description      String
  icon             String?
  points           Int
  unlockedBy       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model CourseReview {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, courseId])
}

model ChatMessage {
  id          String   @id @default(cuid())
  content     String
  timestamp   DateTime @default(now())
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId String
  // No hay un recipient directo, se maneja en la l√≥gica de la app
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?         // Null para plantillas del sistema
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sharedWith  User[]         @relation("SharedFormWithUsers")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  placeholder String?
  required    Boolean       @default(false)
  options     Json?         // Para 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  answers     Answer[]
  score       Float?
}

model Answer {
  id      String    @id @default(cuid())
  fieldId String
  field   FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  value   String    @db.Text
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String   @default("#6366f1") // indigo-500
  secondaryColor            String   @default("#a5b4fc") // indigo-300
  accentColor               String   @default("#ec4899") // pink-500
  backgroundColorLight      String   @default("#f8fafc") // slate-50
  primaryColorDark          String   @default("#a5b4fc") // indigo-300
  backgroundColorDark       String   @default("#020617") // slate-950
  fontHeadline              String   @default("Space Grotesk")
  fontBody                  String   @default("Inter")
  allowPublicRegistration   Boolean  @default(true)
  emailWhitelist            String?  // Comma-separated domains
  enableEmailNotifications  Boolean  @default(true)
  require2faForAdmins       Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formaci√≥n Interna,Documentaci√≥n de Producto,General")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
