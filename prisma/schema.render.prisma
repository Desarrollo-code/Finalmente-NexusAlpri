// prisma/schema.render.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS (Tipos de datos personalizados) ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum TemplateType {
  SYSTEM
  USER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELOS DE DATOS ---

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  name               String
  password           String
  avatar             String?
  role               UserRole        @default(STUDENT)
  isTwoFactorEnabled Boolean         @default(false)
  twoFactorSecret    String?
  registeredDate     DateTime?       @default(now())
  xp                 Int             @default(0)
  isActive           Boolean         @default(true)

  // Relaciones
  createdCourses    Course[]
  enrollments       Enrollment[]
  quizAttempts      QuizAttempt[]
  courseProgress    CourseProgress[]
  notes             UserNote[]
  announcements     Announcement[]  @relation("AnnouncementAuthor")
  createdEvents     CalendarEvent[] @relation("EventCreators")
  attendedEvents    CalendarEvent[] @relation("EventAttendees")
  uploadedResources Resource[]      @relation("UploaderResources")
  sharedResources   Resource[]      @relation("SharedResources")
  createdTemplates  LessonTemplate[]
  createdForms      Form[]          @relation("FormCreator")
  formResponses     FormResponse[]
  sharedForms       Form[]          @relation("SharedForms")
  notifications     Notification[]
  achievements      UserAchievement[]
  securityLogs      SecurityLog[]
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?

  // Relaciones
  instructor   User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules      Module[]
  enrollments  Enrollment[]
  progress     CourseProgress[]

  @@index([instructorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String

  // Relaciones
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String

  // Relaciones
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String

  // Relaciones
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz   Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String        @unique
  
  // Relaciones
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id     String   @id @default(cuid())
  text   String
  order  Int
  quizId String

  // Relaciones
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  questionId String

  // Relaciones
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())

  // Relaciones
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz     Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers  AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String

  // Relaciones
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}


model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // Relaciones
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String                   @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float?                   @default(0)
  completedAt         DateTime?
  enrollmentId        String                   @unique
  
  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view' or 'quiz' or 'video'
  score       Float?
  completedAt DateTime @default(now())

  // Relaciones
  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  audience  String   @default("ALL") // JSON string for multiple roles
  priority  String   @default("Normal")
  date      DateTime @default(now())
  authorId  String

  // Relaciones
  author User @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String?
  tags        String?
  url         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  hasPin      Boolean      @default(false)
  pin         String?
  ispublic    Boolean      @default(true)

  // Relación jerárquica para carpetas
  parentId String?
  parent   Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children Resource[] @relation("FolderHierarchy")

  // Relaciones
  uploader   User?    @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith User[]   @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  color               String            @default("blue")
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  videoConferenceLink String?
  attachments         Json?

  // Relaciones
  creator  User   @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees User[] @relation("EventAttendees")

  @@index([creatorId])
}

// Log de seguridad
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime         @default(now())
  emailAttempt String?
  country      String?
  city         String?

  // Relaciones
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Logros
model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  // Relaciones
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

// Configuración de la plataforma
model PlatformSettings {
  id                         String  @id @default(cuid())
  platformName               String  @default("NexusAlpri")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?
  primaryColor               String? @default("#6366f1")
  secondaryColor             String? @default("#a5b4fc")
  accentColor                String? @default("#ec4899")
  backgroundColorLight       String? @default("#f8fafc")
  primaryColorDark           String? @default("#a5b4fc")
  backgroundColorDark        String? @default("#020617")
  fontHeadline               String? @default("Space Grotesk")
  fontBody                   String? @default("Inter")
  allowPublicRegistration    Boolean @default(true)
  enableEmailNotifications   Boolean @default(true)
  emailWhitelist             String?
  require2faForAdmins        Boolean @default(false)
  enableIdleTimeout          Boolean @default(true)
  idleTimeoutMinutes         Int     @default(20)
  passwordMinLength          Int     @default(8)
  passwordRequireUppercase   Boolean @default(true)
  passwordRequireLowercase   Boolean @default(true)
  passwordRequireNumber      Boolean @default(true)
  passwordRequireSpecialChar Boolean @default(true)
  resourceCategories         String?
  updatedAt                  DateTime @updatedAt
}

// --- MODELOS PARA PLANTILLAS DE LECCIONES ---
model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?
  
  // Relaciones
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String

  // Relaciones
  template  LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
}

// --- MODELOS PARA FORMULARIOS ---
model Form {
    id           String         @id @default(cuid())
    title        String
    description  String?        @db.Text
    status       FormStatus     @default(DRAFT)
    isQuiz       Boolean        @default(false)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    creatorId    String
    
    // Relaciones
    creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields       FormField[]
    responses    FormResponse[]
    sharedWith   User[]         @relation("SharedForms")
    
    @@index([creatorId])
}

model FormField {
    id           String        @id @default(cuid())
    label        String
    type         FormFieldType
    required     Boolean       @default(false)
    placeholder  String?
    options      Json? // Para tipos como select, radio, checkbox
    order        Int
    formId       String

    // Relaciones
    form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers      Answer[]
    
    @@index([formId])
}

model FormResponse {
    id          String    @id @default(cuid())
    formId      String
    userId      String
    submittedAt DateTime  @default(now())
    score       Float? // Puntuación si es un quiz
    
    // Relaciones
    form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers     Answer[]
    
    @@index([formId])
    @@index([userId])
}

model Answer {
    id         String   @id @default(cuid())
    responseId String
    fieldId    String
    value      String   @db.Text

    // Relaciones
    response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    
    @@index([responseId])
    @@index([fieldId])
}
