// prisma/schema.render.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

// --- MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime  @default(now())
  lastLogin             DateTime?
  xp                    Int       @default(0)
  isActive              Boolean   @default(true)
  createdCourses        Course[]      @relation("InstructorCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  notes                 UserNote[]
  resourcesUploaded     Resource[]
  announcements         Announcement[]
  notifications         Notification[]
  eventsCreated         CalendarEvent[] @relation("EventCreator")
  eventsAttending       CalendarEvent[] @relation("EventAttendees")
  securityLogs          SecurityLog[]
  achievements          UserAchievement[]
  formsCreated          Form[] @relation("FormCreator")
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  instructorId    String
  instructor      User        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id             String         @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  completedBy    LessonCompletionRecord[]
  notes          UserNote[]
  templates      LessonTemplate[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ContentBlock {
  id        String      @id @default(cuid())
  type      LessonType
  content   String?     @db.Text
  order     Int
  lessonId  String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?
  contentBlockId String          @unique
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id        String         @id @default(cuid())
  text      String
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id          String        @id @default(cuid())
  text        String
  isCorrect   Boolean       @default(false)
  feedback    String?
  questionId  String
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model QuizAttempt {
  id             String          @id @default(cuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId         String
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score          Float
  attemptNumber  Int
  submittedAt    DateTime        @default(now())
  answers        AnswerAttempt[]
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)
}


model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime                 @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references