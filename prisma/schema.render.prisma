// Este es el esquema de Prisma que se usará específicamente para la base de datos de Render.
// Está optimizado para MySQL en un entorno de producción.

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Requerido para PlanetScale y otros proveedores de MySQL
}

generator client {
  provider = "prisma-client-js"
  // Especifica la ruta al esquema de Render para el comando postinstall
  schema   = "./prisma/schema.render.prisma"
}


// ------------------------------------
// MODELOS DE AUTENTICACIÓN Y USUARIOS
// ------------------------------------
model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  avatar              String?
  role                UserRole         @default(STUDENT)
  isActive            Boolean          @default(true)
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  xp                  Int              @default(0)
  registeredDate      DateTime         @default(now())
  
  // Relaciones
  courses             Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  achievements        UserAchievement[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]  @relation("EventCreators")
  attendedEvents      CalendarEvent[]  @relation("EventAttendees")
  notifications       Notification[]
  uploadedResources   Resource[]       @relation("Uploader")
  sharedResources     Resource[]       @relation("SharedWith")
  createdForms        Form[]
  formResponses       FormResponse[]
  createdTemplates    LessonTemplate[]
  securityLogs        SecurityLog[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model SecurityLog {
  id           String             @id @default(cuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  details      String?
  createdAt    DateTime           @default(now())
  country      String?
  city         String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// ------------------------------------
// MODELOS DE CURSOS Y CONTENIDO
// ------------------------------------
model Course {
  id               String          @id @default(cuid())
  title            String          @db.VarChar(255)
  description      String          @db.Text
  imageUrl         String?         @db.VarChar(1024)
  category         String?
  status           CourseStatus    @default(DRAFT)
  publicationDate  DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relaciones
  instructorId     String?
  instructor       User?           @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules          Module[]
  enrollments      Enrollment[]
  progress         CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  moduleId      String         @unique
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completedBy   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  
  // Relaciones
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}


// ------------------------------------
// MODELOS DE QUIZZES Y EVALUACIONES
// ------------------------------------
model Quiz {
  id              String   @id @default(cuid())
  title           String
  description     String?
  contentBlockId  String   @unique
  maxAttempts     Int?     
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  order   Int
  
  // Relaciones
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[] // Relación inversa

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  
  // Relaciones
  questionId     String
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt  AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())

  // Relaciones
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String   @id @default(cuid())
  quizAttemptId    String
  questionId       String
  selectedOptionId String

  // Relaciones
  quizAttempt    QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@index([quizAttemptId])
}


// ------------------------------------
// MODELOS DE PROGRESO Y GAMIFICACIÓN
// ------------------------------------
model Enrollment {
  id           String         @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime       @default(now())
  
  // Relaciones
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime                 @updatedAt

  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
  id           String    @id @default(cuid())
  progressId   String
  lessonId     String
  type         String    // 'view', 'quiz', 'video'
  score        Float?
  completedAt  DateTime  @default(now())

  // Relaciones
  progress     CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson       Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String
  points          Int
  
  // Relaciones
  unlockedBy      UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  // Relaciones
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@id([userId, achievementId])
}

// ------------------------------------
// MODELOS DE CONTENIDO GLOBAL
// ------------------------------------
model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         ResourceType
  category     String?
  tags         String?     // Comma-separated
  url          String?
  pin          String?     // Hashed PIN
  uploadDate   DateTime    @default(now())
  ispublic     Boolean     @default(true)
  
  // Relaciones
  uploaderId   String?
  uploader     User?       @relation("Uploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?   @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]  @relation("FolderChildren")
  sharedWith   User[]      @relation("SharedWith")

  @@index([parentId])
  @@index([uploaderId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  priority  String   @default("Normal")
  
  // Relaciones
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json      @default("\"ALL\"") // ALL, o un array de UserRole
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  videoConferenceLink String?
  attachments         Json?
  color               String           @default("blue")
  audienceType        EventAudienceType @default(ALL)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relaciones
  creatorId           String
  creator             User             @relation("EventCreators", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
  SPECIFIC
}


// ------------------------------------
// MODELOS DE CONFIGURACIÓN
// ------------------------------------
model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  emailWhitelist              String?   @db.Text // Comma-separated list of allowed domains
  enableEmailNotifications    Boolean   @default(true)
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(false)
  resourceCategories          String?   @db.Text
  
  // Theme & Appearance
  primaryColor        String? @default("#6366f1")
  secondaryColor      String? @default("#a5b4fc")
  accentColor         String? @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  primaryColorDark    String? @default("#a5b4fc")
  backgroundColorDark String? @default("#020617")
  fontHeadline        String? @default("Space Grotesk")
  fontBody            String? @default("Inter")
  logoUrl             String?
  watermarkUrl        String?
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  updatedAt                   DateTime  @updatedAt
}

// ------------------------------------
// MODELOS DE PLANTILLAS
// ------------------------------------
model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            TemplateType    @default(USER)
  creatorId       String?
  createdAt       DateTime        @default(now())

  // Relaciones
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  // Relaciones
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// ------------------------------------
// MODELOS DE FORMULARIOS Y ENCUESTAS
// ------------------------------------
model Form {
    id          String   @id @default(cuid())
    title       String
    description String?        @db.Text
    status      FormStatus     @default(DRAFT)
    isQuiz      Boolean        @default(false)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    
    // Relaciones
    creatorId   String
    creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]
    
    @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String   @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?          // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  required    Boolean        @default(false)
  placeholder String?
  order       Int
  
  // Relaciones
  formId      String
  form        Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?   // Puntuación si el formulario es un quiz
  
  // Relaciones
  form        Form                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormResponseAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormResponseAnswer {
  id           String   @id @default(cuid())
  responseId   String
  fieldId      String
  value        String   @db.Text // JSON string para MULTIPLE_CHOICE

  // Relaciones
  response     FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field        FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}
