// prisma/schema.render.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS (Tipos Personalizados) ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum TemplateType {
  SYSTEM
  USER
}


// --- MODELOS DE DATOS ---

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  avatar                String?
  role                  UserRole               @default(STUDENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime               @default(now())
  lastLogin             DateTime?
  isActive              Boolean                @default(true)
  xp                    Int                    @default(0)
  theme                 String?

  // Relaciones Inversas (añadidas para corregir errores de validación)
  coursesAsInstructor   Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  quizAttempts          QuizAttempt[]
  progress              CourseProgress[]
  notes                 UserNote[]
  notifications         Notification[]
  announcements         Announcement[]         @relation("AuthorAnnouncements")
  uploadedResources     Resource[]             @relation("UploaderResources")
  sharedResources       Resource[]             @relation("SharedResources")
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]        @relation("EventAttendees")
  securityLogs          SecurityLog[]
  unlockedAchievements  UserAchievement[]
  createdTemplates      LessonTemplate[]
  createdForms          Form[]
  formResponses         FormResponse[]

  @@index([email])
}

model Course {
  id                String            @id @default(cuid())
  title             String            @db.VarChar(255)
  description       String?           @db.Text
  category          String?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  status            CourseStatus      @default(DRAFT)
  publicationDate   DateTime?
  instructorId      String?

  // Relaciones
  instructor        User?             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String

  // Relaciones
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  moduleId    String

  // Relaciones
  module        Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  // Relaciones
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?
  contentBlockId String          @unique
  maxAttempts    Int?

  // Relaciones
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]

  @@index([contentBlockId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())

  // Relaciones
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String

  // Relaciones
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?
  questionId String

  // Relaciones
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String

  // Relaciones
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionId], references: [id], onDelete: NoAction)
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)

  @@index([attemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // Relaciones
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  enrollmentId        String    @unique

  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String   @default("view")
  score       Float?
  completedAt DateTime @default(now())

  // Relaciones
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId     String
  lessonId   String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String

  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  audience  String   @default("ALL") // Puede ser "ALL", un rol o un JSON string de roles
  date      DateTime @default(now())
  authorId  String

  // Relaciones
  author    User     @relation("AuthorAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String?
  url         String?
  pin         String?
  tags        String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  ispublic    Boolean      @default(true)
  parentId    String?

  // Relaciones
  uploader   User?        @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parent     Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children   Resource[]   @relation("FolderHierarchy")
  sharedWith User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  location            String?
  color               String            @default("blue")
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  videoConferenceLink String?
  attachments         Json?

  // Relaciones
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  resourceCategories        String?   @db.Text
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  primaryColorDark          String?
  backgroundColorDark       String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}

model SecurityLog {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  details      String?
  emailAttempt String?
  userId       String?
  country      String?
  city         String?

  // Relaciones
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([userId])
}

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int

  unlockedBy UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model LessonTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?

  // Relaciones
  creator         User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@index([creatorId])
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String

  // Relaciones
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  @@index([templateId])
}

// --- Modelos para Formularios y Evaluaciones ---

model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relaciones
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id           String        @id @default(cuid())
  label        String
  type         FormFieldType
  options      Json? // Para 'SINGLE_CHOICE', 'MULTIPLE_CHOICE'
  required     Boolean       @default(false)
  placeholder  String?
  order        Int
  formId       String

  // Relaciones
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers      FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String
  userId        String
  submittedAt   DateTime @default(now())
  score         Float? // Puntuación si es un quiz

  // Relaciones
  form          Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text // JSON string para multiple choice

  // Relaciones
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

    