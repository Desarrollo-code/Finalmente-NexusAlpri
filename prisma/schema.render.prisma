
      // prisma/schema.prisma

// Este es el esquema de tu base de datos.
// Define los modelos de datos, sus campos y las relaciones entre ellos.

datasource db {
  provider     = "postgresql" // Usar postgresql para Render
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// --- AUTH & USER ---
// -------------------
model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  name                String
  password            String
  avatar              String?
  role                UserRole               @default(STUDENT)
  isTwoFactorEnabled  Boolean                @default(false)
  twoFactorSecret     String?
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  registeredDate      DateTime?
  xp                  Int                    @default(0)

  // Relaciones
  courses             Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  notes               UserNote[]
  achievements        UserAchievement[]
  announcements       Announcement[]
  uploadedResources   Resource[]             @relation("UploaderResources")
  accessibleResources Resource[]             @relation("SharedResources")
  createdEvents       CalendarEvent[]
  attendedEvents      CalendarEvent[]        @relation("EventAttendees")
  createdForms        Form[]                 @relation("FormCreator")
  sharedForms         Form[]                 @relation("SharedForms")
  formResponses       FormResponse[]
  quizAttempts        QuizAttempt[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// ----------------
// --- GAMING ---
// ----------------
model Achievement {
  id           String            @id @default(cuid())
  slug         AchievementSlug   @unique
  name         String
  description  String
  icon         String
  points       Int
  users        UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  FIVE_COURSES_COMPLETED
  PERFECT_QUIZ_SCORE
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}


// -----------------
// --- COURSE ---
// -----------------
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          String      @default("DRAFT")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?
  instructorId    String?

  // Relaciones
  instructor      User?             @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String

  // Relaciones
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String         @id @default(cuid())
  title     String
  order       Int
  moduleId    String

  // Relaciones
  module        Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String   @id @default(cuid())
  type      String
  content   String?  @db.Text
  order     Int
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id               String         @id @default(cuid())
  title            String
  description      String?
  contentBlockId   String         @unique
  maxAttempts      Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relaciones
  contentBlock     ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions        Question[]
  attempts         QuizAttempt[]

  @@index([contentBlockId])
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  order   Int
  quizId  String

  // Relaciones
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String

  // Relaciones
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())

  // Relaciones
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  attemptId         String
  questionId        String
  selectedOptionId  String

  // Relaciones
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@index([attemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // Relaciones
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  enrollmentId        String    @unique

  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId])
  @@index([courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime @default(now())
  type        String // e.g., 'view', 'quiz', 'video'
  score       Float?

  // Relaciones
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, lessonId])
  @@index([progressId])
  @@index([lessonId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId     String
  lessonId   String
  content    String   @db.Text
  color      String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}


// -----------------
// --- GENERAL ---
// -----------------
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  audience  String   @default("ALL") // JSON string for array or "ALL"
  priority  String   @default("Normal")
  date      DateTime @default(now())
  authorId  String

  // Relaciones
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}


model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        String       // 'FOLDER' or 'FILE' (document, image, video...)
  category    String?
  tags        String?      // Comma-separated
  url         String?      // Path to the file
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  ispublic    Boolean      @default(true)
  pin         String?
  parentId    String?

  // Relaciones para la jerarquía de carpetas
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children    Resource[]   @relation("FolderHierarchy")

  // Relación con el usuario que subió el recurso
  uploader    User?        @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith  User[]       @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}


model CalendarEvent {
  id                  String    @id @default(cuid())
  title               String
  description         String?   @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean   @default(false)
  location            String?
  videoConferenceLink String?
  color               String    @default("blue")
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  attachments         Json[]
  
  // Relaciones
  creator             User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String? // Comma-separated list of allowed emails/domains
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean   @default(false)
  resourceCategories        String?   @db.Text // Comma-separated
  
  // Theme settings
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
}

model SecurityLog {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  emailAttempt String?
  details      String?
  userId       String?

  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


model LessonTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            TemplateType
  creatorId       String?

  // Relaciones
  creator         User?             @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  @@index([creatorId])
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        String
  order       Int
  templateId  String

  // Relaciones
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  @@index([templateId])
}


model Form {
    id            String    @id @default(cuid())
    title         String
    description   String?   @db.Text
    status        FormStatus     @default(DRAFT)
    isQuiz        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    creatorId     String

    // Relaciones
    creator       User      @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]    @relation("SharedForms")

    @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
    id           String        @id @default(cuid())
    label        String
    type         FormFieldType
    required     Boolean       @default(false)
    placeholder  String?
    options      Json?         // Para 'select', 'radio', 'checkbox'
    order        Int
    formId       String

    // Relaciones
    form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers      FormAnswer[]

    @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
    id           String    @id @default(cuid())
    formId       String
    userId       String
    submittedAt  DateTime  @default(now())
    score        Float?    // Puntuación para quizzes

    // Relaciones
    form         Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers      FormAnswer[]
    
    @@index([formId])
    @@index([userId])
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text

  // Relaciones
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([fieldId])
}

    