// prisma/schema.render.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- MODELOS DE AUTENTICACIÓN Y USUARIOS ---
model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String
  password              String
  role                  UserRole              @default(STUDENT)
  avatar                String?
  xp                    Int                   @default(0)
  registeredDate        DateTime              @default(now())
  isActive              Boolean               @default(true)
  lastLogin             DateTime?
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  // Relaciones
  instructorCourses     Course[]              @relation("InstructorCourses")
  enrollments           Enrollment[]
  notifications         Notification[]
  securityLogs          SecurityLog[]
  createdEvents         CalendarEvent[]       @relation("EventCreator")
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  uploadedResources     Resource[]            @relation("Uploader")
  sharedResources       Resource[]            @relation("SharedWithUser")
  notes                 UserNote[]
  achievements          UserAchievement[]
  createdTemplates      LessonTemplate[]      @relation("TemplateCreator")
  createdForms          Form[]                @relation("FormCreator")
  formResponses         FormResponse[]
  sharedForms           Form[]                @relation("FormSharedWith")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model SecurityLog {
  id          String           @id @default(cuid())
  userId      String?
  event       SecurityLogEvent
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime         @default(now())
  details     String?          @db.Text
  emailAttempt String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  country     String?
  city        String?
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}


// --- MODELOS DE CURSOS Y CONTENIDO ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  // Relaciones
  instructor      User?          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id       String    @id @default(cuid())
  title    String
  order    Int
  courseId String
  // Relaciones
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  // Relaciones
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completedBy   LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  // Relaciones
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  maxAttempts    Int?
  contentBlockId String        @unique
  // Relaciones
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  // Relaciones
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id            String          @id @default(cuid())
  text          String
  isCorrect     Boolean         @default(false)
  feedback      String?         @db.Text
  questionId    String
  // Relaciones
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float           @default(0)
  submittedAt   DateTime        @default(now())
  // Relaciones
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  // Relaciones
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}


// --- MODELOS DE PROGRESO Y GAMIFICACIÓN ---
model Enrollment {
  id          String          @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime        @default(now())
  // Relaciones
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollmentId       String                   @unique
  // Relaciones
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    progressId  String
    lessonId    String
    completedAt DateTime @default(now())
    type        String   // 'view', 'quiz', etc.
    score       Float?   // Score for quizzes
    
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@index([lessonId])
}

model Achievement {
  id              String            @id @default(cuid())
  slug            AchievementSlug   @unique
  name            String
  description     String
  icon            String?
  points          Int
  // Relaciones
  unlockedBy      UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  // Relaciones
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([achievementId])
}

model UserNote {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    content   String   @db.Text
    color     String   @default("yellow")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
    @@index([lessonId])
}


// --- MODELOS DE CONTENIDO GLOBAL ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  String   // 'ALL' o un JSON array de roles: '["STUDENT", "INSTRUCTOR"]'
  priority  String?  @default("Normal")
  // Relaciones
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  location            String?
  videoConferenceLink String?
  color               String?
  audienceType        EventAudienceType @default(ALL)
  creatorId           String
  attachments         Json?            @default("[]")
  // Relaciones
  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")

  @@index([creatorId])
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Resource {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  type        ResourceType
  category    String?
  tags        String?    // Comma-separated
  url         String?
  uploadDate  DateTime   @default(now())
  uploaderId  String
  parentId    String?
  pin         String?    // Hashed PIN
  ispublic    Boolean    @default(true)
  // Relaciones
  uploader    User       @relation("Uploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  parent      Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[] @relation("FolderChildren")
  sharedWith  User[]     @relation("SharedWithUser")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}


// --- MODELOS DE PLANTILLAS Y FORMULARIOS ---
model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  type           TemplateType
  creatorId      String?
  // Relaciones
  creator        User?           @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  // Relaciones
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Form {
    id            String          @id @default(cuid())
    title         String
    description   String?         @db.Text
    creatorId     String
    status        FormStatus      @default(DRAFT)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    isQuiz        Boolean         @default(false)

    creator       User            @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]          @relation("FormSharedWith")

    @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
    id            String        @id @default(cuid())
    formId        String
    order         Int
    label         String
    type          FormFieldType
    required      Boolean       @default(false)
    placeholder   String?
    options       Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE. Formato: [{id: string, text: string, isCorrect?: boolean, points?: number}]

    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]

    @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
    id           String          @id @default(cuid())
    formId       String
    userId       String
    submittedAt  DateTime        @default(now())
    score        Float?          // Para quizzes

    form         Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers      FormAnswer[]
    
    @@index([formId, userId])
}

model FormAnswer {
    id        String        @id @default(cuid())
    responseId String
    fieldId   String
    value     String        @db.Text

    response  FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field     FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@index([responseId])
}


// --- CONFIGURACIÓN GLOBAL ---
model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  // Comma-separated domains/emails
  resourceCategories         String?  // Comma-separated list
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  // Campos de apariencia
  primaryColor               String?
  secondaryColor             String?
  accentColor                String?
  backgroundColorLight       String?
  fontHeadline               String?  @default("Space Grotesk")
  fontBody                   String?  @default("Inter")
  primaryColorDark           String?
  backgroundColorDark        String?
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
  aboutImageUrl              String?
  benefitsImageUrl           String?

  updatedAt                  DateTime @updatedAt
}
