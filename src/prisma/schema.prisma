// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  theme                 String?
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime?     @default(now())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  coursesCreated        Course[]
  enrollments           Enrollment[]
  progress              CourseProgress[]
  resourcesUploaded     Resource[]
  announcements         Announcement[]
  calendarEventsCreated CalendarEvent[]
  specificEvents        CalendarEvent[] @relation("EventAttendees")
  notes                 UserNote[]
  notifications         Notification[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  imageUrl        String?          @db.Text
  category        String           @default("General")
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id              String                   @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  module          Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completions     LessonCompletionRecord[]
  notes           UserNote[]
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(MULTIPLE_CHOICE)
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id          String         @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?        @db.Text
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Float
  submittedAt DateTime         @default(now())
  answers     AnswerAttempt[]

  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id                String       @id @default(cuid())
  quizAttemptId     String
  quizAttempt       QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId  String
  selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
}


model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id         String       @id @default(cuid())
  progressId String
  lessonId   String
  type       String // "view" or "quiz"
  score      Float?
  completedAt DateTime    @default(now())
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model Resource {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  type        ResourceType
  category    String
  tags        String?
  url         String?       @db.Text
  ispublic    Boolean       @default(true)
  pin         String?
  uploadDate  DateTime      @default(now())
  uploaderId  String
  uploader    User          @relation(fields: [uploaderId], references: [id])
  parentId    String?
  parent      Resource?     @relation("FolderChildren", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children    Resource[]    @relation("FolderChildren")
  sharedWith  User[]        @relation("SharedResources")

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  date       DateTime   @default(now())
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json // 'ALL', or a list of roles like ['STUDENT', 'INSTRUCTOR']
  priority   String     @default("Normal") // "Normal" or "Urgente"

  @@index([authorId])
}

model CalendarEvent {
  id                  String      @id @default(cuid())
  title               String
  description         String?     @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  audienceType        Json // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  color               String
  creatorId           String
  creator             User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]      @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json? // Array of { name: string, url: string }

  @@index([creatorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
  id           String             @id @default(cuid())
  userId       String?
  user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  event        SecurityLogEvent
  ipAddress    String
  details      String?
  createdAt    DateTime           @default(now())
  emailAttempt String?

  @@index([userId])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text // Comma-separated domains
  resourceCategories        String    @db.Text // Comma-separated
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  updatedAt                 DateTime  @updatedAt
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER)
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([creatorId])
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
}

// Intermediary table for many-to-many relationship
model _SharedResources {
  A String
  B String

  @@unique([A, B])
  @@index([B])
}
