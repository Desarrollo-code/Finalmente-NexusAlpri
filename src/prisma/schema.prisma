// /prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- MODELS ---

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  password                String
  avatar                  String?
  role                    String                   @default("STUDENT") // STUDENT, INSTRUCTOR, ADMINISTRATOR
  registeredDate          DateTime                 @default(now())
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorSecret         String?
  theme                   String?                  @default("dark")
  enrollments             Enrollment[]
  coursesCreated          Course[]
  announcements           Announcement[]
  resourcesUploaded       Resource[]
  createdTemplates        LessonTemplate[]
  createdEvents           CalendarEvent[]          @relation("EventCreator")
  attendedEvents          CalendarEvent[]          @relation("EventAttendees")
  courseProgress          CourseProgress[]
  notifications           Notification[]
  securityLogs            SecurityLog[]
  notes                   UserNote[]
  quizAttempts            QuizAttempt[]
  learningPathEnrollments LearningPathEnrollment[]
}

model Course {
  id                String                 @id @default(cuid())
  title             String
  description       String                 @db.Text
  imageUrl          String?
  category          String                 @default("General")
  status            String                 @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  publicationDate   DateTime?
  instructorId      String
  instructor        User                   @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]
  learningPaths     LearningPathCourse[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
}

model Lesson {
  id                String                   @id @default(cuid())
  title             String
  order             Int
  moduleId          String
  module            Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks     ContentBlock[]
  completionRecords LessonCompletionRecord[]
  notes             UserNote[]
}

model ContentBlock {
  id        String  @id @default(cuid())
  type      String // TEXT, VIDEO, QUIZ, FILE
  content   String? @db.Text
  order     Int
  lessonId  String
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
}

// --- QUIZ MODELS ---
model Quiz {
  id             String         @id @default(cuid())
  title          String
  description    String?        @db.Text
  contentBlockId String         @unique
  contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String         @db.Text
  type      String         @default("MULTIPLE_CHOICE")
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String          @db.Text
  isCorrect   Boolean         @default(false)
  feedback    String?         @db.Text
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- PROGRESS & ENROLLMENT MODELS ---
model Enrollment {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  progressPercentage Float                    @default(0)
  completedLessons   LessonCompletionRecord[]
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String // 'view' or 'quiz'
  score      Float?
  completedAt DateTime      @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Float
  attemptedAt DateTime      @default(now())
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  quizAttemptId    String
  quizAttempt      QuizAttempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

// --- GLOBAL CONTENT MODELS ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json
  priority  String   @default("Normal") // Normal, Urgente
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?     @db.Text
  type         String      // FOLDER, DOCUMENT, GUIDE, MANUAL, POLICY, VIDEO
  category     String      @default("General")
  tags         String?     @db.Text
  url          String?
  uploadDate   DateTime    @default(now())
  uploaderId   String
  uploader     User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  ispublic     Boolean     @default(true)
  sharedWith   User[]
  pin          String?
  parentId     String?
  parent       Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children     Resource[]  @relation("FolderHierarchy")
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean      @default(false)
  audienceType        String       // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String       @default("blue")
  creatorId           String
  creator             User         @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]       @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json?
}

// --- PLATFORM SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String?   @db.Text @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  ipAddress    String?
  details      String?  @db.Text
  createdAt    DateTime @default(now())
}

// --- TEMPLATES ---
model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            String          // SYSTEM, USER
  creatorId       String?
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id         String         @id @default(cuid())
  type       String         // TEXT, VIDEO, QUIZ, FILE
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- LEARNING PATHS ---
model LearningPath {
  id          String                  @id @default(cuid())
  title       String
  description String?                 @db.Text
  creatorId   String
  creator     User                    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  courses     LearningPathCourse[]
  enrollments LearningPathEnrollment[]
}

model LearningPathCourse {
  pathId   String
  courseId String
  order    Int
  path     LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([pathId, courseId])
}

model LearningPathEnrollment {
  id              String       @id @default(cuid())
  userId          String
  pathId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  path            LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  enrolledAt      DateTime     @default(now())
  completedCourses Int         @default(0)
  isCompleted     Boolean      @default(false)

  @@unique([userId, pathId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}
