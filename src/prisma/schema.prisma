// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// --- AUTH & USER MODELS ---

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  UserRole      @default(STUDENT)
  avatar                String?
  theme                 String?
  xp                    Int?          @default(0)
  registeredDate        DateTime      @default(now())
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?

  // Relations
  coursesAsInstructor   Course[]            @relation("CreatedCourses")
  enrollments           Enrollment[]
  progress              CourseProgress[]
  notes                 UserNote[]
  achievements          UserAchievement[]   @relation("UserAchievements")
  createdTemplates      LessonTemplate[]    @relation("CreatedTemplates")
  createdAnnouncements  Announcement[]      @relation("CreatedAnnouncements")
  createdEvents         CalendarEvent[]     @relation("CreatedEvents")
  uploadedResources     Resource[]          @relation("UploadedResources")
  sharedResources       Resource[]          @relation("SharedResources")
  notifications         Notification[]
  quizAttempts          QuizAttempt[]
  
  @@index([email])
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}


// --- COURSE CONTENT MODELS ---

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  instructorId    String?
  instructor      User?         @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String    @id @default(cuid())
  title       String
  order       Int
  
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]

  @@index([moduleId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  order       Int
  
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  quiz        Quiz?      

  @@index([lessonId])
}


// --- QUIZ MODELS ---

model Quiz {
  id            String    @id @default(cuid())
  title         String
  description   String?
  
  contentBlockId String    @unique
  contentBlock  ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions     Question[]
  attempts      QuizAttempt[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model Question {
  id        String       @id @default(cuid())
  text      String
  type      QuestionType
  order     Int
  
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String    @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?   @db.Text

  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}


// --- RESOURCES ---

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String?
  uploader     User?        @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children     Resource[]   @relation("FolderChildren")
  pin          String?
  ispublic     Boolean      @default(true)
  sharedWith   User[]       @relation("SharedResources")

  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}


// --- NOTIFICATIONS, EVENTS & ANNOUNCEMENTS ---

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  priority  String   @default("Normal")
  
  // Stored as JSON array or 'ALL' string
  audience  Json
  
  authorId  String?
  author    User?    @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean
  audienceType        String   // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color               String?  @default("blue")
  videoConferenceLink String?
  attachments         Json?
  
  creatorId           String?
  creator             User?    @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: SetNull)
  attendees           User[]
}

// --- USER PROGRESS & GAMIFICATION ---

model Enrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress     CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String  @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String  @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  progressPercentage Float   @default(0)
  
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String   // 'view' or 'quiz'
  score       Float?   // Only for 'quiz' type
  completedAt DateTime @default(now())
  
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  submittedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
  
  @@index([userId])
  @@index([quizId])
}

model AnswerAttempt {
  id               String   @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  
  @@index([attemptId])
}


model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  icon        String?
  points      Int

  users       UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserNote {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


// --- SYSTEM MODELS ---

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  resourceCategories        String   @db.Text
  
  // Password Policy
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  // Session/Security
  enableIdleTimeout       Boolean  @default(true)
  idleTimeoutMinutes      Int      @default(20)
  require2faForAdmins     Boolean  @default(false)

  // Themeing
  primaryColor        String?  @default("#6366f1")
  secondaryColor      String?  @default("#a5b4fc")
  accentColor         String?  @default("#ec4899")
  backgroundColorLight String? @default("#f8fafc")
  primaryColorDark    String?  @default("#a5b4fc")
  backgroundColorDark String?  @default("#020617")
  fontHeadline        String?  @default("Space Grotesk")
  fontBody            String?  @default("Inter")
  landingImageUrl     String?
  authImageUrl        String?
  aboutImageUrl       String?
  benefitsImageUrl    String?
  
  updatedAt                 DateTime @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        String
    userId       String?
    emailAttempt String?
    ipAddress    String?
    userAgent    String?
    details      String?  @db.Text
    createdAt    DateTime @default(now())
    city         String?
    country      String?

    @@index([userId])
    @@index([event])
}

model LessonTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // 'SYSTEM' or 'USER'
  
  creatorId   String?  // Null for SYSTEM templates
  creator     User?    @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)

  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String     @id @default(cuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

    