// datasource db defines the database connection details.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}


// --- MODELS ---

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  registeredDate      DateTime  @default(now())
  lastLogin           DateTime?
  isActive            Boolean   @default(true)
  theme               String?
  xp                  Int?      @default(0)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?

  coursesAsInstructor Course[]   @relation("CreatedCourses")
  enrollments         Enrollment[]
  createdResources    Resource[] @relation("UploadedResources")
  sharedResources     Resource[] @relation("SharedResources")
  announcements       Announcement[]
  notifications       Notification[]
  notes               UserNote[]
  progress            CourseProgress[]
  eventsAsCreator     CalendarEvent[]
  quizAttempts        QuizAttempt[]
  achievements        UserAchievement[]
  createdTemplates    LessonTemplate[]
  securityLogs        SecurityLog[]
  createdForms        Form[]     @relation("CreatedForms")
  sharedForms         Form[]     @relation("SharedForms")
  formResponses       FormResponse[]

  @@index([email])
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus  @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  instructorId String
  instructor   User   @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: Cascade)

  modules     Module[]
  enrollments Enrollment[]
  progress    CourseProgress[]

  @@index([instructorId])
}

model Module {
  id       String @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]
}

model Lesson {
  id       String @id @default(cuid())
  title    String
  order    Int
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  quiz Quiz?
}

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?   @db.Text
  maxAttempts    Int?
  contentBlockId String    @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  questions    Question[]
  quizAttempts QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  type    QuestionType @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String? @db.Text
  points     Int     @default(0)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answerAttempts AnswerAttempt[]
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?   @default(0)
  completedAt        DateTime?
  enrollmentId       String?  @unique

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String // 'view' or 'quiz'
  score       Float?   // Score for quizzes
  completedAt DateTime @default(now())

  progress CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}


model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}


model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  color               String   @default("blue")
  attachments         Json     @default("[]")
  
  audienceType        EventAudienceType @default(ALL)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  attendees User[]
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  url         String?
  uploadDate  DateTime     @default(now())
  category    String?
  tags        String?      // Comma-separated
  hasPin      Boolean      @default(false)
  pin         String?      @db.Text
  ispublic    Boolean      @default(true)

  uploaderId String?
  uploader   User?    @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId String?
  parent   Resource? @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children Resource[] @relation("FolderChildren")
  
  sharedWith User[] @relation("SharedResources")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  priority   String   @default("Normal")
  audience   String   @default("ALL") // Can store 'ALL' or a JSON array of roles

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String?   @default("#6366f1")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#ec4899")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   @db.Text // Comma-separated list
  resourceCategories        String?   @db.Text // Comma-separated list
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  
  // Security
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  city         String?
  country      String?
  details      String?          @db.Text
  emailAttempt String? // For failed logins where user might not exist
  createdAt    DateTime         @default(now())

  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?   @db.Text
  type           TemplateType
  
  creatorId      String?
  creator        User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String     @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int

  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model QuizAttempt {
  id            String   @id @default(cuid())
  attemptNumber Int
  score         Float
  submittedAt   DateTime @default(now())
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId  String
  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  answers AnswerAttempt[]
}

model AnswerAttempt {
  id               String      @id @default(cuid())
  quizAttemptId    String
  questionId       String
  selectedOptionId String
  
  quizAttempt    QuizAttempt    @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption AnswerOption   @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
}

model Form {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  status      FormStatus   @default(DRAFT)
  isQuiz      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creatorId   String
  creator     User         @relation("CreatedForms", fields: [creatorId], references: [id], onDelete: Cascade)
  
  sharedWith  User[]       @relation("SharedForms")

  fields      FormField[]
  responses   FormResponse[]
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json          @default("[]") // For select, radio, checkbox
  order       Int
  
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  answers     FormAnswer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now())
  score       Float?   // For quizzes
  
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  answers     FormAnswer[]
}

model FormAnswer {
  id         String       @id @default(cuid())
  value      String       @db.Text
  
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  fieldId    String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}
