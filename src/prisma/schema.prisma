// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  name                String
  email               String       @unique
  password            String
  avatar              String?      @db.VarChar(255)
  role                UserRole     @default(STUDENT)
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime     @default(now())
  
  // Relations
  courses             Course[]     @relation("CourseInstructor")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  resources           Resource[]   @relation("ResourceUploader")
  announcements       Announcement[]
  notifications       Notification[]
  createdEvents       CalendarEvent[] @relation("EventCreator")
  attendedEvents      CalendarEvent[] @relation("EventAttendees")
  createdTemplates    LessonTemplate[]
  securityLogs        SecurityLog[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String   @id @default(uuid())
  title           String
  description     String   @db.Text
  imageUrl        String?  @db.VarChar(255)
  category        String   @default("General")
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  instructorId    String
  instructor      User     @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id          String   @id @default(uuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  contentBlocks ContentBlock[]
  completionRecords LessonCompletionRecord[]
  templateOrigin  LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId      String?
}

model ContentBlock {
    id        String      @id @default(uuid())
    type      LessonType
    content   String?     @db.Text
    order     Int
    
    lessonId  String
    lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    
    quiz      Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id          String    @id @default(uuid())
  title       String
  description String?   @db.Text
  
  contentBlockId String @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  
  questions   Question[]
}

model Question {
  id      String       @id @default(uuid())
  text    String       @db.Text
  type    QuestionType
  order   Int
  
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options AnswerOption[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String  @id @default(uuid())
  text       String  @db.Text
  isCorrect  Boolean @default(false)
  feedback   String? @db.Text
  
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// --- USER PROGRESS ---

model Enrollment {
  id          String    @id @default(uuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  progress    CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String    @id @default(uuid())
  userId              String
  courseId            String
  progressPercentage  Float     @default(0)
  updatedAt           DateTime  @updatedAt
  
  enrollmentId        String    @unique
  
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment                @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  completedLessons    LessonCompletionRecord[]
}

model LessonCompletionRecord {
    id          String      @id @default(uuid())
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    
    lessonId    String
    lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    type        String      // "view" or "quiz"
    score       Float?      // Score for quizzes

    completedAt DateTime    @default(now())

    @@unique([progressId, lessonId])
}


// --- RESOURCES & LIBRARY ---

model Resource {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  type        ResourceType
  url         String?  @db.VarChar(2048)
  category    String
  tags        String?  @db.Text // Comma-separated tags
  pin         String?

  uploadDate  DateTime @default(now())
  
  uploaderId  String?
  uploader    User?    @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)

  // Self-relation for folders
  parentId String?
  parent   Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Resource[] @relation("FolderChildren")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}


// --- ANNOUNCEMENTS, NOTIFICATIONS, CALENDAR ---

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json
  priority  String   @default("Normal") // "Normal", "Urgente"
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model CalendarEvent {
    id        String   @id @default(uuid())
    title     String
    description String? @db.Text
    location  String?
    start     DateTime
    end       DateTime
    allDay    Boolean  @default(false)
    color     String   @default("blue")
    videoConferenceLink String? @db.VarChar(2048)
    attachments Json?  // Array of {name: string, url: string}

    creatorId String
    creator   User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

    audienceType EventAudienceType @default(ALL)
    attendees    User[]   @relation("EventAttendees")
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}


// --- SYSTEM & SETTINGS ---

model PlatformSettings {
  id                            String   @id @default(uuid())
  platformName                  String   @default("NexusAlpri")
  allowPublicRegistration       Boolean  @default(true)
  enableEmailNotifications      Boolean  @default(true)
  emailWhitelist                String?  @db.Text
  require2faForAdmins           Boolean  @default(false)
  idleTimeoutMinutes            Int      @default(20)
  enableIdleTimeout             Boolean  @default(true)
  passwordMinLength             Int      @default(8)
  passwordRequireUppercase      Boolean  @default(true)
  passwordRequireLowercase      Boolean  @default(true)
  passwordRequireNumber         Boolean  @default(true)
  passwordRequireSpecialChar    Boolean  @default(true)
  resourceCategories            String   @db.Text // Comma-separated list
  updatedAt                     DateTime @updatedAt
}

model SecurityLog {
    id            String @id @default(uuid())
    event         SecurityLogEvent
    ipAddress     String?
    userId        String?
    user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    emailAttempt  String?  // For failed logins where user ID is unknown
    details       String?  @db.Text
    createdAt     DateTime @default(now())
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

model LessonTemplate {
  id              String   @id @default(uuid())
  name            String
  description     String?  @db.Text
  type            TemplateType
  
  creatorId       String?
  creator         User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  
  templateBlocks  TemplateBlock[]
  lessonsCreated  Lesson[]
}

enum TemplateType {
  SYSTEM
  USER
}

model TemplateBlock {
  id          String      @id @default(uuid())
  type        LessonType
  order       Int
  
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
