// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma" // Uncomment if using PlanetScale or similar
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}


// --- MODELS ---

model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  password            String
  role                UserRole        @default(STUDENT)
  avatar              String?
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime?       @default(now())

  // Relations
  coursesAsInstructor Course[]        @relation("InstructorCourses")
  enrollments         Enrollment[]
  announcements       Announcement[]
  notifications       Notification[]
  uploadedResources   Resource[]
  calendarEvents      CalendarEvent[] @relation("EventAttendees")
  progress            CourseProgress[]
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String       @default("General")
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?

  // Relations
  instructor    User?        @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules       Module[]
  enrollments   Enrollment[]
  progress      CourseProgress[]
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id       String     @id @default(cuid())
  title    String
  content  String?    @db.Text
  type     LessonType
  order    Int
  moduleId String

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quiz   Quiz?
}

model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String?
  lessonId    String  @unique

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions Question[]
}

model Question {
  id     String       @id @default(cuid())
  text   String
  type   QuestionType
  order  Int
  quizId String

  // Relations
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  id                 String @id @default(cuid())
  userId             String
  courseId           String
  completedLessonIds Json?
  progressPercentage Float? @default(0)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  category    String       @default("General")
  tags        Json?
  url         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?
  pin         String?
  parentId    String?

  // Relations
  uploader User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parent   Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Resource[] @relation("FolderHierarchy")
}


model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  audience  Json
  priority  String?  @default("Normal") // Normal, Urgente

  // Relations
  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories         Json
  updatedAt                  DateTime @updatedAt
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?
  start        DateTime
  end          DateTime
  allDay       Boolean          @default(false)
  location     String?
  audienceType String           @default("SPECIFIC") // ALL, ADMINISTRATOR, INSTRUCTOR, STUDENT, SPECIFIC
  color        String?          @default("default")

  // Relations
  attendees User[] @relation("EventAttendees")
}
