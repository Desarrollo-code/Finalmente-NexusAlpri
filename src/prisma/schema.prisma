// prisma/schema.prisma

// 1. Define el proveedor de la base de datos y la URL de conexión.
// La URL se carga desde las variables de entorno para mayor seguridad.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// 2. Especifica el generador de cliente de Prisma.
// Esto le dice a Prisma que genere el cliente de TypeScript.
generator client {
  provider = "prisma-client-js"
}

// -----------------------------------------------------------------------------
// --- MODELOS DE AUTENTICACIÓN Y USUARIOS ---
// -----------------------------------------------------------------------------

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  role                  UserRole  @default(STUDENT)
  avatar                String?
  xp                    Int       @default(0)
  isActive              Boolean   @default(true)
  registeredDate        DateTime  @default(now())
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorSecret       String?
  lastLogin             DateTime?

  // --- Relaciones Inversas ---
  coursesCreated          Course[]
  enrollments             Enrollment[]
  courseProgress          CourseProgress[] // Relación con el progreso del curso
  notes                   UserNote[]
  announcements           Announcement[]
  resourcesUploaded       Resource[]
  quizAttempts            QuizAttempt[]
  notifications           Notification[]
  eventsCreated           CalendarEvent[]       @relation("EventCreator")
  eventsAttending         CalendarEvent[]       @relation("EventAttendees")
  achievements            UserAchievement[]
  createdLessonTemplates  LessonTemplate[]      @relation("UserTemplates")
  formResponses           FormResponse[]
  createdForms            Form[]                @relation("FormCreator")
  sharedForms             Form[]                @relation("FormSharedWith")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}

model SecurityLog {
  id          String   @id @default(cuid())
  event       SecurityLogEvent
  ipAddress   String?
  userAgent   String?
  city        String?
  country     String?
  details     String?
  userId      String?
  emailAttempt String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([userId])
  @@index([event])
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  USER_ROLE_CHANGED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
}


// -----------------------------------------------------------------------------
// --- MODELOS DE CURSOS Y CONTENIDO ---
// -----------------------------------------------------------------------------

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?

  // --- Relaciones ---
  instructorId    String
  instructor      User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@index([instructorId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relaciones ---
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relaciones ---
  module          Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  notes           UserNote[]
  completionRecords LessonCompletionRecord[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  // --- Relaciones ---
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}


// -----------------------------------------------------------------------------
// --- MODELOS DE EVALUACIONES (QUIZZES) ---
// -----------------------------------------------------------------------------

model Quiz {
  id             String    @id @default(cuid())
  title          String
  description    String?
  maxAttempts    Int?
  contentBlockId String    @unique

  // --- Relaciones ---
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String   @db.Text
  order   Int
  quizId  String

  // --- Relaciones ---
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean @default(false)
  feedback   String?
  questionId String

  // --- Relaciones ---
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}


// -----------------------------------------------------------------------------
// --- MODELOS DE PROGRESO Y GAMIFICACIÓN ---
// -----------------------------------------------------------------------------

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())

  // --- Relaciones ---
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float?   @default(0)
  completedAt        DateTime?
  enrollmentId       String?  @unique

  // --- Relaciones ---
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment       Enrollment?               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]

  @@index([userId, courseId])
}

model LessonCompletionRecord {
  id          String   @id @default(cuid())
  progressId  String
  lessonId    String
  type        String   // 'view', 'quiz', 'video'
  score       Float?   // Score for quiz type
  completedAt DateTime @default(now())

  // --- Relaciones ---
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float    // Score as a percentage (0-100)
  submittedAt   DateTime @default(now())
  
  // --- Relaciones ---
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String   @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String

  // --- Relaciones ---
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Restrict)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
}

model Achievement {
  id          String    @id @default(cuid())
  slug        AchievementSlug @unique
  name        String
  description String
  icon        String
  points      Int       @default(0)
  users       UserAchievement[]
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

// -----------------------------------------------------------------------------
// --- MODELOS DE CONTENIDO GLOBAL ---
// -----------------------------------------------------------------------------

model Resource {
  id           String      @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String?
  tags         String?     // Comma-separated tags
  url          String?
  pin          String?
  uploadDate   DateTime    @default(now())
  uploaderId   String?
  ispublic     Boolean     @default(true)
  
  // --- Relaciones ---
  uploader     User?       @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?   @relation("FolderContent", fields: [parentId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  children     Resource[]  @relation("FolderContent")
  sharedWith   User[]

  @@index([uploaderId])
  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  String   // 'ALL' o un array JSON de roles: '["STUDENT", "INSTRUCTOR"]'
  priority  String   @default("Normal") // "Normal", "Urgente"

  // --- Relaciones ---
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  @@index([authorId])
}

model CalendarEvent {
  id                  String   @id @default(cuid())
  title               String
  description         String?  @db.Text
  location            String?
  videoConferenceLink String?
  start               DateTime
  end                 DateTime
  allDay              Boolean  @default(false)
  color               String   @default("blue")
  audienceType        String   // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  attachments         Json?
  
  // --- Relaciones ---
  creatorId           String
  creator             User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]   @relation("EventAttendees")

  @@index([creatorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // --- Relaciones ---
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // --- Relaciones ---
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// -----------------------------------------------------------------------------
// --- MODELOS DE PLANTILLAS Y FORMULARIOS ---
// -----------------------------------------------------------------------------

model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?
  type           String    // 'SYSTEM' or 'USER'
  
  // --- Relaciones ---
  creatorId      String?
  creator        User?     @relation("UserTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id          String   @id @default(cuid())
  type        LessonType
  order       Int
  templateId  String
  
  // --- Relaciones ---
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  status      FormStatus @default(DRAFT)
  isQuiz      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // --- Relaciones ---
  creatorId   String
  creator     User        @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]      @relation("FormSharedWith")

  @@index([creatorId])
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json?         // Para SINGLE_CHOICE, MULTIPLE_CHOICE
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  
  // --- Relaciones ---
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
  
  @@index([formId])
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String   @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime @default(now())
  score       Float?   // Score as a percentage (0-100) for quizzes
  
  // --- Relaciones ---
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@index([formId])
  @@index([userId])
}

model Answer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text // Can store single value or JSON string for multiple choices
  
  // --- Relaciones ---
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Restrict)

  @@index([responseId])
  @@index([fieldId])
}


// -----------------------------------------------------------------------------
// --- MODELOS DE CONFIGURACIÓN DEL SISTEMA ---
// -----------------------------------------------------------------------------

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  primaryColor              String?   @default("#673AB7")
  secondaryColor            String?   @default("#a5b4fc")
  accentColor               String?   @default("#6F42C1")
  backgroundColorLight      String?   @default("#f8fafc")
  primaryColorDark          String?   @default("#a5b4fc")
  backgroundColorDark       String?   @default("#020617")
  fontHeadline              String?   @default("Space Grotesk")
  fontBody                  String?   @default("Inter")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?
  require2faForAdmins       Boolean   @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  resourceCategories        String    @db.Text @default("General,Recursos Humanos,TI y Seguridad,Marketing,Ventas,Formación Interna,Documentación de Producto")
  updatedAt                 DateTime  @updatedAt
}
