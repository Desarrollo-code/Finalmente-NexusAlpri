// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TemplateType {
  SYSTEM
  USER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                     String                    @id @default(uuid())
  name                   String
  email                  String                    @unique
  password               String?
  avatar                 String?
  role                   UserRole                  @default(STUDENT)
  isActive               Boolean                   @default(true)
  isTwoFactorEnabled     Boolean                   @default(false)
  twoFactorSecret        String?
  xp                     Int                       @default(0)
  registeredDate         DateTime                  @default(now())
  lastLogin              DateTime?
  enrollments            Enrollment[]
  coursesAsInstructor    Course[]
  userNotes              UserNote[]
  achievements           UserAchievement[]
  uploadedResources      Resource[]                @relation("UploadedResources")
  sharedResources        Resource[]                @relation("SharedResources")
  createdAnnouncements   Announcement[]
  createdEvents          CalendarEvent[]           @relation("CreatedEvents")
  attendedEvents         CalendarEvent[]           @relation("EventAttendees")
  createdLessonTemplates LessonTemplate[]          @relation("CreatedTemplates")
  createdForms           Form[]
  formResponses          FormResponse[]
  sharedForms            Form[]                    @relation("SharedForms")
  securityLogs           SecurityLog[]
  quizAttempts           QuizAttempt[]
  notifications          Notification[]
  progress               CourseProgress[]
  answerAttempts         AnswerAttempt[]
  lessonCompletion       LessonCompletionRecord[]
}

model Course {
  id              String           @id @default(uuid())
  title           String
  description     String           @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  instructorId    String?
  instructor      User?            @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String                   @id @default(uuid())
  title         String
  order         Int
  moduleId      String
  module        Module                   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  userNotes     UserNote[]
  completions   LessonCompletionRecord[] // Relaci칩n inversa a침adida
  templates     LessonTemplate[]         @relation("LessonTemplates")

  @@index([moduleId])
}

model ContentBlock {
  id       String     @id @default(uuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(uuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id         String          @id @default(uuid())
  text       String
  order      Int
  quizId     String
  quiz       Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options    AnswerOption[]
  AnswerAttempt AnswerAttempt[]
}

model AnswerOption {
  id         String          @id @default(uuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

model Enrollment {
  id           String          @id @default(uuid())
  userId       String
  courseId     String
  enrolledAt   DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     CourseProgress?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseProgress {
  id                 String                   @id @default(uuid())
  userId             String
  courseId           String
  enrollmentId       String                   @unique
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?                @updatedAt
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([enrollmentId])
}

model LessonCompletionRecord {
  id          String   @id @default(uuid())
  progressId  String
  lessonId    String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade) // Relaci칩n inversa a침adida
  type        String // e.g., 'view', 'quiz'
  score       Float?
  completedAt DateTime @default(now())

  @@unique([progressId, lessonId])
  @@index([lessonId])
}


model QuizAttempt {
  id            String          @id @default(uuid())
  userId        String
  quizId        String
  score         Float
  attemptNumber Int
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(uuid())
  attemptId        String
  questionId       String
  selectedOptionId String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Restrict)

  @@index([attemptId])
}

model Resource {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  uploaderId   String
  uploader     User         @relation("UploadedResources", fields: [uploaderId], references: [id], onDelete: Cascade)
  pin          String?
  ispublic     Boolean      @default(true)
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull) // Corrected
  children     Resource[]   @relation("FolderHierarchy")
  sharedWith   User[]       @relation("SharedResources")

  @@index([parentId])
}

model UserNote {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  String // "ALL", "STUDENT", "INSTRUCTOR", "ADMINISTRATOR", or JSON array of roles
  priority  String   @default("Normal")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String     @id @default(uuid())
  title               String
  description         String?    @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean    @default(false)
  audienceType        String     // e.g., 'ALL', 'ROLE', 'SPECIFIC'
  color               String?
  creatorId           String
  creator             User       @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]     @relation("EventAttendees")
  videoConferenceLink String?
  attachments         Json?

  @@index([creatorId])
}

model PlatformSettings {
  id                        String    @id @default(uuid())
  updatedAt                 DateTime  @updatedAt
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String? // Comma-separated list of allowed domains
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        String    @default("General,Recursos Humanos,Ventas")
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  fontHeadline              String?
  fontBody                  String?
}

model SecurityLog {
  id           String           @id @default(uuid())
  event        SecurityLogEvent
  userId       String?
  emailAttempt String?
  ipAddress    String?
  userAgent    String?
  country      String?
  city         String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

model Achievement {
  id          String            @id @default(uuid())
  slug        AchievementSlug   @unique
  name        String
  description String
  icon        String
  points      Int
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model LessonTemplate {
  id             String          @id @default(uuid())
  name           String
  description    String?
  type           TemplateType
  creatorId      String?
  creator        User?           @relation("CreatedTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]        @relation("LessonTemplates")
}

model TemplateBlock {
  id         String         @id @default(uuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Form {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("SharedForms")
}

model FormField {
  id          String        @id @default(uuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String       @id @default(uuid())
  formId      String
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime     @default(now())
  answers     FormAnswer[]
  score       Float?
}

model FormAnswer {
  id         String    @id @default(uuid())
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value      String    @db.Text
}

model _LessonTemplates {
  A String
  B String

  @@unique([A, B])
  @@index([B])

  // Custom map name is required for Postgres
  @@map("lesson_templates")
}
