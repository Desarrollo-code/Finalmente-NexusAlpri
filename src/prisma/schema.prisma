// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// --- MODELS ---

model User {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  password              String
  avatar                String?
  role                  UserRole          @default(STUDENT)
  isTwoFactorEnabled    Boolean           @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime          @default(now())
  xp                    Int               @default(0)
  isActive              Boolean           @default(true)
  coursesAsInstructor   Course[]
  enrollments           Enrollment[]
  progress              CourseProgress[]
  userNotes             UserNote[]
  achievements          UserAchievement[]
  uploadedResources     Resource[]
  createdAnnouncements  Announcement[]    @relation("AnnouncementAuthor")
  notifications         Notification[]
  createdEvents         CalendarEvent[]   @relation("EventCreator")
  attendedEvents        CalendarEvent[]   @relation("EventAttendees")
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  createdForms          Form[]
  formResponses         FormResponse[]
  sharedResources       Resource[]        @relation("SharedResources")

  @@index([email])
}

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publicationDate DateTime?
  instructorId    String?
  instructor      User?          @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]

  @@index([instructorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id               String                 @id @default(cuid())
  title            String
  order            Int
  moduleId         String
  module           Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks    ContentBlock[]
  completedBy      LessonCompletionRecord[]
  userNotes        UserNote[]
  template         LessonTemplate?        @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId       String?

  @@index([moduleId])
  @@index([templateId])
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lessonId String
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  contentBlockId String        @unique
  contentBlock   ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  maxAttempts    Int?
}

model Question {
  id       String         @id @default(cuid())
  text     String
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]

  @@index([quizId])
}

model AnswerOption {
  id             String          @id @default(cuid())
  text           String
  isCorrect      Boolean
  feedback       String?
  questionId     String
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt  AnswerAttempt[]

  @@index([questionId])
}

model Enrollment {
  id          String         @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id               String                   @id @default(cuid())
  userId           String
  courseId         String
  progressPercentage Float                  @default(0)
  completedAt      DateTime?
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment       Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId     String                   @unique
  completedLessons LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progressId  String
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime       @default(now())
  type        String         @default("view") // 'view', 'quiz', 'video'
  score       Float?

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]

  @@index([userId, quizId])
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade, map: "AnswerAttempt_questionId_fkey", name: "AnswerAttempt_questionId")
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  formFieldId      String?
  formField        FormField?   @relation(fields: [formFieldId], references: [id], onDelete: Cascade)
  formResponseId   String?
  formResponse     FormResponse?@relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  value            String       @db.Text
  
  @@index([attemptId])
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  uploader     User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  hasPin       Boolean    @default(false)
  pin          String?    @unique
  parentId     String?
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[] @relation("FolderContent")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("SharedResources")

  @@index([parentId])
  @@index([uploaderId])
}

model Announcement {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  date       DateTime   @default(now())
  priority   String     @default("Normal")
  authorId   String
  author     User       @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  audience   String     @default("ALL") // Can store 'ALL' or a JSON array of roles like '["STUDENT", "INSTRUCTOR"]'

  @@index([authorId])
}

model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?          @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String?
  creatorId           String
  creator             User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]           @relation("EventAttendees")
  location            String?
  videoConferenceLink String?
  attachments         Json?

  @@index([creatorId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String? @db.Text
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model SecurityLog {
  id           String           @id @default(cuid())
  userId       String?
  emailAttempt String?
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  details      String?
  country      String?
  city         String?

  @@index([userId])
}

model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("USER") // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
  lessons        Lesson[]
}

model TemplateBlock {
  id         String @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  icon              String
  points            Int
  unlockedBy        UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  status      FormStatus     @default(DRAFT)
  isQuiz      Boolean        @default(false)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  sharedWith  User[]         @relation("SharedForms")

  @@index([creatorId])
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  required    Boolean       @default(false)
  placeholder String?
  options     Json? // For select, radio, checkbox, etc. [{id, text, isCorrect, points}]
  order       Int
  formId      String
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     AnswerAttempt[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submittedAt DateTime        @default(now())
  score       Float?          // Score if the form is a quiz
  answers     AnswerAttempt[]

  @@index([formId])
  @@index([userId])
}
