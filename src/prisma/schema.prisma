// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// --- AUTH & USER MODELS ---

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                String               @default("STUDENT") // STUDENT, INSTRUCTOR, ADMINISTRATOR
  avatar              String?
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime             @default(now())
  theme               String?
  
  // Relations
  courses             Course[]             @relation("InstructorToCourse")
  enrollments         Enrollment[]
  notifications       Notification[]
  createdResources    Resource[]           @relation("UploaderToResource")
  sharedResources     Resource[]           @relation("SharedWithUser")
  createdEvents       CalendarEvent[]      @relation("EventCreator")
  attendingEvents     CalendarEvent[]      @relation("EventAttendees")
  createdTemplates    LessonTemplate[]
  notes               UserNote[]
  
  // Progress related
  progress            CourseProgress[]
  quizAttempts        QuizAttempt[]
  lessonCompletions   LessonCompletionRecord[]
  AnswerAttempt       AnswerAttempt[]
  
  // Security
  securityLogs        SecurityLog[]

  @@map("users")
}

model SecurityLog {
  id           String   @id @default(cuid())
  event        String
  ipAddress    String?
  details      String?
  createdAt    DateTime @default(now())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?

  @@map("security_logs")
}

// --- COURSE STRUCTURE MODELS ---

model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          String         @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED, SCHEDULED
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  instructorId    String?
  instructor      User?          @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  
  // Relations
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  notes         UserNote[]
  completions   LessonCompletionRecord[]

  @@map("lessons")
}

model ContentBlock {
  id        String  @id @default(cuid())
  type      String  // TEXT, VIDEO, FILE, QUIZ
  content   String? @db.Text
  order     Int
  
  // Relations
  lessonId  String
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@map("content_blocks")
}


// --- QUIZ MODELS ---

model Quiz {
  id             String      @id @default(cuid())
  title          String
  description    String?
  
  // Relations
  contentBlockId String      @unique
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  
  @@map("quizzes")
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      String         @default("MULTIPLE_CHOICE")
  order     Int
  
  // Relations
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean @default(false)
  feedback    String? @db.Text
  
  // Relations
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@map("answer_options")
}


// --- USER PROGRESS & ENROLLMENT ---

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  
  // Relations
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
    id          String   @id @default(cuid())
    type        String   // "view" or "quiz"
    score       Float?   // Score if type is 'quiz'
    recordedAt  DateTime @default(now())

    // Relations
    progressId  String
    progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lessonId    String
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}

model QuizAttempt {
    id        String          @id @default(cuid())
    score     Float
    submittedAt DateTime      @default(now())
    
    // Relations
    userId    String
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId    String
    quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers   AnswerAttempt[]
    
    @@map("quiz_attempts")
}

model AnswerAttempt {
    id                String       @id @default(cuid())
    
    // Relations
    attemptId         String
    attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    questionId        String
    question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    userId            String
    user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}


// --- PLATFORM CONTENT & SETTINGS ---

model Resource {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  type          String   // FOLDER, DOCUMENT, IMAGE, VIDEO, EXTERNAL_LINK etc.
  url           String?
  category      String?
  tags          String?  // Comma-separated
  uploadDate    DateTime @default(now())
  pin           String?  // Hashed PIN for sensitive resources
  ispublic      Boolean  @default(true)
  
  // Relations
  uploaderId    String?
  uploader      User?    @relation("UploaderToResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        Resource? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children      Resource[] @relation("FolderHierarchy")
  sharedWith    User[]   @relation("SharedWithUser")

  @@map("resources")
}

model CalendarEvent {
  id                  String    @id @default(cuid())
  title               String
  description         String?   @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  color               String?   @default("blue")
  videoConferenceLink String?
  audienceType        String    // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attachments         Json?
  
  // Relations
  creatorId           String
  creator             User      @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]    @relation("EventAttendees")

  @@map("calendar_events")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  priority   String   @default("Normal") // Normal, Urgente
  
  // Relations
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json       // 'ALL' or ['STUDENT', 'INSTRUCTOR']
  
  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String?
  read        Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated domains
  
  // Password Policy
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  // Security
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)

  // Content
  resourceCategories        String    @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")
  
  // Theming
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?

  updatedAt                 DateTime  @updatedAt

  @@map("platform_settings")
}

model LessonTemplate {
  id              String          @id @default(cuid())
  name            String
  description     String?
  type            String          // SYSTEM or USER
  creatorId       String?         // Null for system templates
  creator         User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  createdAt       DateTime        @default(now())
}

model TemplateBlock {
  id          String @id @default(cuid())
  type        String // TEXT, VIDEO, QUIZ, FILE
  order       Int
  templateId  String
  template    LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
