// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTH MODELS ---
model User {
  id                  String           @id @default(cuid())
  name                String
  email               String           @unique
  password            String
  role                UserRole         @default(STUDENT)
  avatar              String?
  registeredDate      DateTime?        @default(now())
  isTwoFactorEnabled  Boolean          @default(false)
  twoFactorSecret     String?
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  resources           Resource[]
  createdEvents       CalendarEvent[]  @relation("CreatedBy")
  attendedEvents      CalendarEvent[]  @relation("Attendees")
  announcements       Announcement[]
  notifications       Notification[]
  securityLogs        SecurityLog[]
  createdTemplates    LessonTemplate[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE MODELS ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  instructor      User           @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  courseProgress  CourseProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  quiz     Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id             String     @id @default(cuid())
  title          String
  description    String?    @db.Text
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String     @unique
  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String       @db.Text
  type    QuestionType @default(MULTIPLE_CHOICE)
  order   Int
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
  options AnswerOption[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?  @db.Text
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// --- ENROLLMENT & PROGRESS ---
model Enrollment {
  id             String         @id @default(cuid())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  enrolledAt     DateTime       @default(now())
  courseProgress CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String     @unique
  completedLessonIds Json       @default("[]")
  progressPercentage Float      @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@unique([userId, courseId])
}


// --- PLATFORM CONTENT MODELS ---
model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String       @default("General")
  tags        Json         @default("[]")
  url         String?
  pin         String? // Hashed PIN
  uploadDate  DateTime     @default(now())
  uploader    User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    Resource[]   @relation("FolderHierarchy")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  audience  Json
  priority  String   @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?          @db.Text
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean          @default(false)
  audienceType EventAudienceType @default(ALL)
  color        String?          @default("blue")
  creator      User             @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  attendees    User[]           @relation("Attendees")
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

model PlatformSettings {
  id                          String   @id @default(cuid())
  platformName                String   @default("NexusAlpri")
  allowPublicRegistration     Boolean  @default(true)
  enableEmailNotifications    Boolean  @default(true)
  emailWhitelist              String?  @db.Text
  resourceCategories          Json     @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")
  passwordMinLength           Int      @default(8)
  passwordRequireUppercase    Boolean  @default(true)
  passwordRequireLowercase    Boolean  @default(true)
  passwordRequireNumber       Boolean  @default(true)
  passwordRequireSpecialChar  Boolean  @default(true)
  enableIdleTimeout           Boolean  @default(true)
  idleTimeoutMinutes          Int      @default(20)
  require2faForAdmins         Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String
  emailAttempt String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())
  details      String?          @db.Text
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --- TEMPLATE MODELS ---
model LessonTemplate {
  id           String         @id @default(cuid())
  name         String
  description  String?        @db.Text
  type         TemplateType   @default(USER)
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  templateBlocks TemplateBlock[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model TemplateBlock {
  id           String     @id @default(cuid())
  type         LessonType
  order        Int
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
}

enum TemplateType {
  SYSTEM
  USER
}
