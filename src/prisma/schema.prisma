// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  avatar             String?
  role               UserRole  @default(STUDENT)
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorSecret    String?
  registeredDate     DateTime  @default(now())
  
  announcements      Announcement[]
  coursesAsInstructor Course[] @relation("InstructorCourses")
  enrollments        Enrollment[]
  resourcesUploaded  Resource[] @relation("UploaderResources")
  calendarEvents     CalendarEvent[] @relation("EventAttendees")
  notifications      Notification[]
  progress           CourseProgress[]
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String?
  instructor      User?       @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id       String    @id @default(cuid())
  title    String
  content  String?   @db.Text
  type     LessonType
  order    Int
  moduleId String
  module   Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quiz     Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?
  lessonId    String      @unique
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id       String         @id @default(cuid())
  text     String
  type     String         // Assuming QuestionType is just a string for prisma, like 'MULTIPLE_CHOICE'
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  userId             String
  courseId           String
  completedLessonIds Json     @db.Json
  progressPercentage Float    @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Resource {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  type        ResourceType
  category    String
  tags        Json        @db.Json // Storing tags as a JSON array
  url         String?
  pin         String?
  uploadDate  DateTime    @default(now())
  
  uploaderId  String?
  uploader    User?       @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  parentId    String?
  parent      Resource?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction)
  children    Resource[]  @relation("FolderHierarchy")

  @@index([parentId])
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  audience  Json     @db.Json // ALL, or array of roles
  priority  String?  // 'Normal' or 'Urgente'
}

model CalendarEvent {
  id           String   @id @default(cuid())
  title        String
  description  String?
  start        DateTime
  end          DateTime
  allDay       Boolean  @default(false)
  location     String?
  audienceType String?  // ALL, role, or SPECIFIC
  color        String?
  attendees    User[]   @relation("EventAttendees")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model PlatformSettings {
  id                          String   @id @default(cuid())
  platformName                String   @default("NexusAlpri")
  allowPublicRegistration     Boolean  @default(true)
  enableEmailNotifications    Boolean  @default(true)
  resourceCategories          Json     @db.Json
  passwordMinLength           Int      @default(8)
  passwordRequireUppercase    Boolean  @default(true)
  passwordRequireLowercase    Boolean  @default(true)
  passwordRequireNumber       Boolean  @default(true)
  passwordRequireSpecialChar  Boolean  @default(true)
  enableIdleTimeout           Boolean  @default(true)
  idleTimeoutMinutes          Int      @default(20)
  require2faForAdmins         Boolean  @default(false)
  updatedAt                   DateTime @updatedAt
}
