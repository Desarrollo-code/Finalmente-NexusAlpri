datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

// --- MODELS ---

model User {
  id                  String         @id @default(cuid())
  name                String
  email               String         @unique
  password            String
  avatar              String?
  role                UserRole       @default(STUDENT)
  isTwoFactorEnabled  Boolean        @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime       @default(now())
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  notifications       Notification[]
  announcements       Announcement[]
  resources           Resource[]
  events              CalendarEvent[] @relation("EventAttendees")
  createdEvents       CalendarEvent[] @relation("EventCreator")
  courseProgress      CourseProgress[]
  quizAttempts        QuizAttempt[]
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String?      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  instructor      User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id       String     @id @default(cuid())
  title    String
  content  String?    @db.Text
  type     LessonType
  order    Int
  moduleId String
  module   Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quiz     Quiz?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  lessonId    String      @unique
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id       String         @id @default(cuid())
  text     String         @db.Text
  type     QuestionType
  order    Int
  quizId   String
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String   @db.Text
  isCorrect  Boolean
  feedback   String?  @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  userId             String
  courseId           String
  completedLessonIds Json
  progressPercentage Float  @default(0)
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  answers     Json // Store the user's answers
  attemptedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}


model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String?
  tags        Json         @default("[]")
  url         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String
  uploader    User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  pin         String?
  parentId    String?
  parent      Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Resource[]   @relation("FolderHierarchy")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience  Json // 'ALL', or ['STUDENT', 'INSTRUCTOR']
  priority  String?  @default("Normal")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id           String            @id @default(cuid())
  title        String
  description  String?           @db.Text
  start        DateTime
  end          DateTime
  allDay       Boolean           @default(false)
  location     String?
  audienceType EventAudienceType @default(SPECIFIC)
  creatorId    String
  creator      User              @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]            @relation("EventAttendees")
  color        String?           @default("default")
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  resourceCategories         Json     @default("[]")
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  updatedAt                  DateTime @updatedAt
}
