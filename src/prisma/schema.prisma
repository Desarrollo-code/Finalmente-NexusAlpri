// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- USER & AUTHENTICATION ---
model User {
  id                  String       @id @default(cuid())
  name                String
  email               String       @unique
  password            String
  role                UserRole     @default(STUDENT)
  avatar              String?
  registeredDate      DateTime     @default(now())
  isTwoFactorEnabled  Boolean      @default(false)
  twoFactorSecret     String?
  coursesAsInstructor Course[]
  enrollments         Enrollment[]
  progress            CourseProgress[]
  resourcesUploaded   Resource[]
  notifications       Notification[]
  announcements       Announcement[]
  eventsCreated       CalendarEvent[] @relation("EventCreator")
  eventsAttending     CalendarEvent[] @relation("EventAttendees")
}

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

// --- COURSE STRUCTURE ---
model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  instructor      User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String         @id @default(cuid())
  title         String
  order         Int
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- QUIZZES ---
model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?      @db.Text
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String       @unique
  questions      Question[]
}

model Question {
  id      String       @id @default(cuid())
  text    String       @db.Text
  type    QuestionType @default(MULTIPLE_CHOICE)
  order   Int
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
  options AnswerOption[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}


// --- USER PROGRESS & ENROLLMENT ---
model Enrollment {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime @default(now())

  @@unique([userId, courseId])
}

model CourseProgress {
  id                  String   @id @default(cuid())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId            String
  completedLessonIds  Json?
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  updatedAt           DateTime @updatedAt

  @@unique([userId, courseId])
}

// --- ANNOUNCEMENTS, NOTIFICATIONS, EVENTS ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  audience  Json
  priority  String?
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean          @default(false)
  creator      User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  audienceType EventAudienceType @default(SPECIFIC)
  attendees    User[]           @relation("EventAttendees")
  color        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- RESOURCES & LIBRARY ---
model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  category     String
  tags         Json
  url          String?
  uploadDate   DateTime     @default(now())
  uploader     User         @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId   String?
  pin          String?
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[]   @relation("FolderHierarchy")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}


// --- PLATFORM SETTINGS ---
model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  require2faForAdmins       Boolean   @default(false)
  idleTimeoutMinutes        Int       @default(20)
  enableIdleTimeout         Boolean   @default(true)
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories        Json
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}
