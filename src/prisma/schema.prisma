// Este es tu archivo de esquema de Prisma,
// aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- MODELOS PRINCIPALES ---
model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  avatar                String?
  role                  UserRole               @default(STUDENT)
  isActive              Boolean                @default(true)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorSecret       String?
  xp                    Int                    @default(0)
  registeredDate        DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  coursesAsInstructor   Course[]               @relation("InstructorCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]       @relation("UserProgress")
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  announcements         Announcement[]         @relation("Author")
  createdEvents         CalendarEvent[]        @relation("Creator")
  attendedEvents        CalendarEvent[]        @relation("EventAttendees")
  uploadedResources     Resource[]             @relation("Uploader")
  sharedResources       Resource[]             @relation("ResourceSharedWith")
  notes                 UserNote[]
  notifications         Notification[]
  createdTemplates      LessonTemplate[]       @relation("TemplateCreator")
  formResponses         FormResponse[]
  createdForms          Form[]                 @relation("FormCreator")
  sharedForms           Form[]                 @relation("FormSharedWith")
}

model Course {
  id                String           @id @default(cuid())
  title             String
  description       String           @db.Text
  category          String?
  imageUrl          String?          @db.Text
  status            CourseStatus     @default(DRAFT)
  publicationDate   DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  instructor        User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  modules           Module[]
  enrollments       Enrollment[]
  courseProgress    CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
}

model Lesson {
  id            String                  @id @default(cuid())
  title         String
  order         Int
  module        Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id       String     @id @default(cuid())
  type     LessonType
  content  String?    @db.Text
  order    Int
  lesson   Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  quiz     Quiz?
}

// --- MODELOS DE EVALUACIÓN (QUIZ) ---
model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int? // Null para intentos ilimitados
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String      @unique
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id             String          @id @default(cuid())
  text           String
  order          Int
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  options        AnswerOption[]
  answerAttempts AnswerAttempt[]
}

model AnswerOption {
  id             String          @id @default(cuid())
  text           String
  isCorrect      Boolean         @default(false)
  feedback       String?
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  AnswerAttempt  AnswerAttempt[]
}

// --- MODELOS DE PROGRESO Y SEGUIMIENTO ---
model Enrollment {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  enrolledAt   DateTime       @default(now())
  progress     CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  user               User                     @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  progressPercentage Float                    @default(0)
  completedAt        DateTime?
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  completedLessons   LessonCompletionRecord[]

  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String         @id @default(cuid())
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId  String
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  type        String // "view", "quiz", "video"
  score       Float?
  completedAt DateTime       @default(now())

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  attemptNumber Int
  score         Float
  submittedAt   DateTime        @default(now())
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String
}

// --- MODELOS DE RECURSOS ---
model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  category     String?
  tags         String? // Comma-separated
  url          String?
  uploadDate   DateTime   @default(now())
  uploader     User       @relation("Uploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId   String
  pin          String?
  parent       Resource?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  children     Resource[] @relation("FolderChildren")
  ispublic     Boolean    @default(true)
  sharedWith   User[]     @relation("ResourceSharedWith")
}

// --- MODELOS DE COMUNICACIÓN Y EVENTOS ---
model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json     @default("[]") // "ALL", ["STUDENT"], ["INSTRUCTOR"], etc.
  priority   String?
}

// --- TEMPLATES ---
model LessonTemplate {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           TemplateType    @default(USER) // SYSTEM or USER
  creatorId      String?
  creator        User?           @relation("TemplateCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String       @id @default(cuid())
  type       LessonType
  order      Int
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
}

// --- GAMIFICATION ---
model Achievement {
  id                String            @id @default(cuid())
  slug              AchievementSlug   @unique
  name              String
  description       String
  points            Int
  icon              String?
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

// --- CALENDAR ---
model CalendarEvent {
  id                  String           @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean          @default(false)
  location            String?
  videoConferenceLink String?
  attachments         Json? // Array de objetos { name: string, url: string }
  creator             User             @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  audienceType        EventAudienceType @default(ALL)
  attendees           User[]           @relation("EventAttendees")
  color               String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

// --- MODELOS DE SEGURIDAD ---
model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?          @db.Text
  city         String?
  country      String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  emailAttempt String?
}

// --- MODELOS DE FORMULARIOS ---
model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("FormSharedWith")
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json? // [{ id: string, text: string, isCorrect: boolean, points: number }]
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  answers     Answer[]
}

model FormResponse {
  id          String   @id @default(cuid())
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  score       Float?
  submittedAt DateTime @default(now())
  answers     Answer[]
}

model Answer {
  id         String       @id @default(cuid())
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId    String
  value      String       @db.Text
}

// --- ENUMERACIONES ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
  DATE
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
