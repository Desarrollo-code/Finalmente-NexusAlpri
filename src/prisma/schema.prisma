// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum TemplateType {
  SYSTEM
  USER
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  DROPDOWN
  CHECKBOX
  DATE
  NUMBER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}


// --- MODELS ---

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  name                  String
  password              String
  role                  UserRole          @default(STUDENT)
  avatar                String?
  isTwoFactorEnabled    Boolean           @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime          @default(now())
  theme                 String?
  xp                    Int?              @default(0)
  coursesCreated        Course[]
  enrollments           Enrollment[]
  notifications         Notification[]
  progress              CourseProgress[]
  userNotes             UserNote[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]   @relation("EventAttendees")
  createdAnnouncements  Announcement[]
  uploadedResources     EnterpriseResource[] @relation("UploadedResources")
  sharedResources       EnterpriseResource[] @relation("SharedResources")
  createdTemplates      LessonTemplate[]
  createdForms          Form[]            @relation("FormCreator")
  sharedForms           Form[]            @relation("FormSharedWith")
  formResponses         FormResponse[]
  achievements          UserAchievement[]
}

model Course {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus     @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  instructor      User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId    String
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  order     Int
  content   String?    @db.Text
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id             String          @id @default(cuid())
  title          String
  description    String?
  contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String          @unique
  questions      Question[]
  attempts       QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  type    QuestionType   @default(SINGLE_CHOICE)
  order   Int
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String
  options AnswerOption[]
  AnswerAttempt AnswerAttempt[]
  
  @@index([quizId])
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?  @db.Text
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  AnswerAttempt AnswerAttempt[]

  @@index([questionId])
}

model QuizAttempt {
    id         String   @id @default(cuid())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId     String
    score      Float
    submittedAt DateTime @default(now())
    answers    AnswerAttempt[]

    @@index([userId])
    @@index([quizId])
}

model AnswerAttempt {
    id                String       @id @default(cuid())
    attempt           QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
    attemptId         String
    question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId        String
    selectedOption    AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
    selectedOptionId  String
    
    @@index([attemptId])
}

model Enrollment {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime       @default(now())
  progress    CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                  @id @default(cuid())
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  course             Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  progressPercentage Float?
  enrollmentId       String                  @unique
  enrollment         Enrollment              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
    id          String          @id @default(cuid())
    progress    CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    progressId  String
    lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId    String
    type        String          // "view" or "quiz"
    score       Float?          // Only for quiz type

    @@unique([progressId, lessonId])
}


model EnterpriseResource {
  id           String                 @id @default(cuid())
  title        String
  description  String?                @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime               @default(now())
  uploader     User                   @relation("UploadedResources", fields: [uploaderId], references: [id])
  uploaderId   String
  parentId     String?
  parent       EnterpriseResource?    @relation("Children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     EnterpriseResource[]   @relation("Children")
  pin          String?
  ispublic     Boolean                @default(true)
  sharedWith   User[]                 @relation("SharedResources")

  @@index([parentId])
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime @default(now())
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  audience   Json     // e.g., ["ALL"], ["STUDENT"], ["INSTRUCTOR", "ADMINISTRATOR"]
  priority   String?  @default("Normal") // Normal, Urgente
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId])
}

model CalendarEvent {
  id                  String             @id @default(cuid())
  title               String
  description         String?            @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean            @default(false)
  color               String?            @default("blue")
  videoConferenceLink String?
  attachments         Json?
  creatorId           String
  creator             User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  audienceType        EventAudienceType  @default(ALL)
  attendees           User[]             @relation("EventAttendees")
}

model PlatformSettings {
  id                          String    @id @default(cuid())
  platformName                String    @default("NexusAlpri")
  allowPublicRegistration     Boolean   @default(true)
  enableEmailNotifications    Boolean   @default(true)
  require2faForAdmins         Boolean   @default(false)
  idleTimeoutMinutes          Int       @default(20)
  enableIdleTimeout           Boolean   @default(true)
  passwordMinLength           Int       @default(8)
  passwordRequireUppercase    Boolean   @default(true)
  passwordRequireLowercase    Boolean   @default(true)
  passwordRequireNumber       Boolean   @default(true)
  passwordRequireSpecialChar  Boolean   @default(true)
  resourceCategories          String    @db.Text
  emailWhitelist              String?   @db.Text
  logoUrl                     String?
  watermarkUrl                String?
  landingImageUrl             String?
  authImageUrl                String?
  aboutImageUrl               String?
  benefitsImageUrl            String?
  primaryColor                String?   @default("#6366f1")
  secondaryColor              String?   @default("#a5b4fc")
  accentColor                 String?   @default("#ec4899")
  backgroundColorLight        String?   @default("#f8fafc")
  primaryColorDark            String?   @default("#a5b4fc")
  backgroundColorDark         String?   @default("#020617")
  fontHeadline                String?   @default("Space Grotesk")
  fontBody                    String?   @default("Inter")
  updatedAt                   DateTime  @updatedAt
}

model SecurityLog {
    id           String   @id @default(cuid())
    event        SecurityLogEvent
    userId       String?
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    emailAttempt String?
    ipAddress    String?
    userAgent    String?  @db.Text
    country      String?
    city         String?
    details      String?  @db.Text
    createdAt    DateTime @default(now())

    @@index([userId])
    @@index([event])
}

model UserNote {
    id        String @id @default(cuid())
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([userId, lessonId])
}

// --- Gamification ---
model Achievement {
    id          String   @id @default(cuid())
    slug        String   @unique
    name        String
    description String
    icon        String?
    points      Int      @default(0)
    
    userAchievements UserAchievement[]
}

model UserAchievement {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId   String
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    earnedAt        DateTime    @default(now())
    
    @@unique([userId, achievementId])
}

// --- Forms ---
model Form {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        FormStatus  @default(DRAFT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creatorId     String
  creator       User     @relation("FormCreator", fields: [creatorId], references: [id])
  fields        FormField[]
  responses     FormResponse[]
  sharedWith    User[]   @relation("FormSharedWith")
}

model FormField {
  id          String      @id @default(cuid())
  formId      String
  form        Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  type        FormFieldType
  options     Json? // For select, radio, checkbox
  required    Boolean     @default(false)
  placeholder String?
  order       Int

  @@index([formId])
}

model FormResponse {
    id          String @id @default(cuid())
    formId      String
    form        Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    userId      String?
    user        User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
    submittedAt DateTime @default(now())
    answers     Json
    
    @@index([formId])
    @@index([userId])
}


// --- Lesson Templates ---
model LessonTemplate {
  id           String          @id @default(cuid())
  name         String
  description  String?
  type         TemplateType
  creatorId    String?
  creator      User?           @relation(fields: [creatorId], references: [id])
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
    id         String      @id @default(cuid())
    template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
    templateId String
    type       LessonType
    order      Int
}
