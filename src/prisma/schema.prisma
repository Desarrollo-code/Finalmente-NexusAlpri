
// Datasource and generator settings
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// ENUMERATIONS
// --------------------------------------

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

// --------------------------------------
// MODELS
// --------------------------------------

// --- User and Auth ---
model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  role                UserRole             @default(STUDENT)
  isTwoFactorEnabled  Boolean              @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime             @default(now())
  theme               String?              @default("dark")
  coursesAsInstructor Course[]             @relation("InstructorToCourse")
  enrollments         Enrollment[]
  courseProgress      CourseProgress[]
  userNotes           UserNote[]
  notifications       Notification[]
  createdEvents       CalendarEvent[]      @relation("CreatedEvents")
  attendingEvents     CalendarEvent[]      @relation("AttendingEvents")
  uploadedResources   Resource[]           @relation("UploaderToResource")
  quizAttempts        QuizAttempt[]
  lessonCompletions   LessonCompletion[]
  securityLogs        SecurityLog[]
  AnswerAttempt       AnswerAttempt[]
  createdAnnouncements Announcement[]
  createdTemplates    LessonTemplate[]
  sharedResources     Resource[]           @relation(name: "SharedWithUser")
}

// --- Course Structure ---
model Course {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  imageUrl        String?
  category        String?
  status          CourseStatus   @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  instructorId    String?
  instructor      User?          @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id            String          @id @default(cuid())
  title         String
  order         Int
  moduleId      String
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]
  template      LessonTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


// --- Quizzes and Questions ---
model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  contentBlock ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  contentBlockId String      @unique
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id        String         @id @default(cuid())
  text      String
  type      QuestionType   @default(SINGLE_CHOICE)
  order     Int
  quizId    String
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]
  attempts  AnswerAttempt[]
}

model AnswerOption {
  id          String          @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?
  questionId  String
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- User Progress and Interaction ---
model Enrollment {
  id         String          @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress   CourseProgress?

  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String                   @id @default(cuid())
  userId             String
  courseId           String
  progressPercentage Float                    @default(0)
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId       String                   @unique
  enrollment         Enrollment               @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons   LessonCompletionRecord[]
}

model LessonCompletionRecord {
  id         String         @id @default(cuid())
  progressId String
  progress   CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lessonId   String
  lesson     Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type       String
  score      Float?
  completedAt DateTime      @default(now())
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  attemptedAt DateTime      @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   AnswerAttempt[]
}

model AnswerAttempt {
  id               String       @id @default(cuid())
  attemptId        String
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}


// --- Platform Content ---
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  audience  Json
  priority  String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String       @id @default(cuid())
  title               String
  description         String?      @db.Text
  start               DateTime
  end                 DateTime
  allDay              Boolean
  location            String?
  color               String?      @default("blue")
  audienceType        String       // e.g., 'ALL', 'STUDENT', 'INSTRUCTOR', 'ADMINISTRATOR', 'SPECIFIC'
  attendees           User[]       @relation("AttendingEvents")
  attachments         Json?
  videoConferenceLink String?
  creatorId           String
  creator             User         @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType
  url          String?
  category     String?
  tags         String?
  uploadDate   DateTime     @default(now())
  pin          String?
  ispublic     Boolean      @default(true)
  uploaderId   String?
  uploader     User?        @relation("UploaderToResource", fields: [uploaderId], references: [id], onDelete: SetNull)
  parentId     String?
  parent       Resource?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children     Resource[]   @relation("FolderHierarchy")
  sharedWith   User[]       @relation(name: "SharedWithUser")

  @@index([parentId])
}

// --- Platform Configuration ---
model PlatformSettings {
  id                         String   @id @default(cuid())
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  emailWhitelist             String?  @db.Text
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  enableIdleTimeout          Boolean  @default(true)
  idleTimeoutMinutes         Int      @default(20)
  require2faForAdmins        Boolean  @default(false)
  resourceCategories         String   @db.Text
  updatedAt                  DateTime @updatedAt
  
  primaryColor               String? @default("#6366f1")
  secondaryColor             String? @default("#a5b4fc")
  accentColor                String? @default("#ec4899")
  backgroundColorLight       String? @default("#f8fafc")
  primaryColorDark           String? @default("#a5b4fc")
  backgroundColorDark        String? @default("#020617")
  fontHeadline               String? @default("Space Grotesk")
  fontBody                   String? @default("Inter")
  logoUrl                    String?
  watermarkUrl               String?
  landingImageUrl            String?
  authImageUrl               String?
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  details      String?          @db.Text
  createdAt    DateTime         @default(now())
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAttempt String?
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            String
  creatorId       String?
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
  lessons         Lesson[]
}

model TemplateBlock {
  id           String         @id @default(cuid())
  type         LessonType
  order        Int
  templateId   String
  template     LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
