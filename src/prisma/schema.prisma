// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

// --- Models ---
model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime? @default(now())

  // Relations
  coursesAsInstructor Course[]       @relation("InstructorCourses")
  enrollments         Enrollment[]     @relation("UserEnrollments")
  progress            CourseProgress[] @relation("UserProgress")
  announcements       Announcement[]   @relation("AuthorAnnouncements")
  resources           Resource[]       @relation("UploaderResources")
  events              CalendarEvent[]  @relation("EventAttendees")
  notifications       Notification[]   @relation("UserNotifications")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String       @default("General")
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  instructorId String?
  instructor   User?    @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)

  // Relations
  modules     Module[]         @relation("CourseModules")
  enrollments Enrollment[]     @relation("CourseEnrollments")
  progress    CourseProgress[] @relation("CourseProgressEntries")
}

model Module {
  id       String @id @default(cuid())
  title    String
  order    Int
  courseId String

  course Course @relation("CourseModules", fields: [courseId], references: [id], onDelete: Cascade)

  // Relations
  lessons Lesson[] @relation("ModuleLessons")

  @@orderBy([order])
}

model Lesson {
  id       String     @id @default(cuid())
  title    String
  content  String?    @db.Text
  type     LessonType
  order    Int
  moduleId String

  module Module @relation("ModuleLessons", fields: [moduleId], references: [id], onDelete: Cascade)

  // Relations
  quiz Quiz? @relation("LessonQuiz")

  @@orderBy([order])
}

model Quiz {
  id          String  @id @default(cuid())
  title       String
  description String?
  lessonId    String  @unique

  lesson Lesson @relation("LessonQuiz", fields: [lessonId], references: [id], onDelete: Cascade)

  // Relations
  questions Question[] @relation("QuizQuestions")
}

model Question {
  id     String       @id @default(cuid())
  text   String
  type   QuestionType @default(MULTIPLE_CHOICE)
  order  Int
  quizId String

  quiz Quiz @relation("QuizQuestions", fields: [quizId], references: [id], onDelete: Cascade)

  // Relations
  options AnswerOption[] @relation("QuestionOptions")

  @@orderBy([order])
}

model AnswerOption {
  id         String  @id @default(cuid())
  text       String
  isCorrect  Boolean
  feedback   String?
  questionId String

  question Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CourseProgress {
  userId             String
  courseId           String
  completedLessonIds Json?
  progressPercentage Float?   @default(0)
  updatedAt          DateTime @updatedAt

  user   User   @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation("CourseProgressEntries", fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  type        ResourceType
  category    String
  tags        Json?
  url         String?
  pin         String?
  uploadDate  DateTime     @default(now())
  uploaderId  String?

  uploader User? @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: SetNull)

  // Self-relation for folders
  parentId String?
  parent   Resource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Resource[] @relation("FolderHierarchy")

  @@index([parentId])
}

model Announcement {
  id       String   @id @default(cuid())
  title    String
  content  String   @db.Text
  date     DateTime @default(now())
  priority String?
  authorId String?
  audience Json?

  author User? @relation("AuthorAnnouncements", fields: [authorId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarEvent {
  id           String   @id @default(cuid())
  title        String
  description  String?
  location     String?
  start        DateTime
  end          DateTime
  allDay       Boolean  @default(false)
  audienceType String?
  color        String?  @default("default")

  attendees User[] @relation("EventAttendees")
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  updatedAt                  DateTime @updatedAt
  platformName               String   @default("NexusAlpri")
  allowPublicRegistration    Boolean  @default(true)
  enableEmailNotifications   Boolean  @default(true)
  require2faForAdmins        Boolean  @default(false)
  idleTimeoutMinutes         Int      @default(20)
  enableIdleTimeout          Boolean  @default(true)
  passwordMinLength          Int      @default(8)
  passwordRequireUppercase   Boolean  @default(true)
  passwordRequireLowercase   Boolean  @default(true)
  passwordRequireNumber      Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(true)
  resourceCategories         Json     @default("[]")
}
