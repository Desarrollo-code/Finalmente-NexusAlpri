// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  avatar              String?
  role                UserRole  @default(STUDENT)
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorSecret     String?
  registeredDate      DateTime  @default(now())
  
  createdCourses      Course[]           @relation("InstructorCourses")
  enrollments         Enrollment[]
  progress            CourseProgress[]
  uploadedResources   EnterpriseResource[]
  createdAnnouncements Announcement[]
  createdEvents       CalendarEvent[]    @relation("EventCreator")
  attendedEvents      CalendarEvent[]    @relation("EventAttendees")
  notifications       Notification[]

  @@map("users")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String?
  category        String       @default("General")
  status          CourseStatus @default(DRAFT)
  publicationDate DateTime?
  instructorId    String
  
  instructor      User          @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([instructorId])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
  @@map("modules")
}

model Lesson {
  id             String         @id @default(cuid())
  title          String
  order          Int
  moduleId       String
  
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks  ContentBlock[]
  
  // Track completions for progress calculation
  completions    LessonCompletionRecord[]

  @@index([moduleId])
  @@map("lessons")
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      String     // e.g., 'TEXT', 'VIDEO', 'QUIZ', 'FILE'
  content   String?    @db.Text
  order     Int
  lessonId  String
  
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?      // One-to-one relation with Quiz

  @@index([lessonId])
  @@map("content_blocks")
}


model Quiz {
  id              String     @id @default(cuid())
  title           String
  description     String?    @db.Text
  contentBlockId  String     @unique
  
  contentBlock    ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]

  @@index([contentBlockId])
  @@map("quizzes")
}

model Question {
  id        String       @id @default(cuid())
  text      String       @db.Text
  type      String       // e.g., 'MULTIPLE_CHOICE'
  order     Int
  quizId    String
  
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   AnswerOption[]

  @@index([quizId])
  @@map("questions")
}

model AnswerOption {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  feedback    String?  @db.Text
  questionId  String
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("answer_options")
}


model Enrollment {
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@index([courseId])
  @@map("enrollments")
}

model CourseProgress {
  userId              String
  courseId            String
  progressPercentage  Float    @default(0)
  completedAt         DateTime?
  
  // Storing an array of objects to track detailed progress
  completedLessonIds  Json     @default("[]")

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@index([courseId])
  @@map("course_progress")
}

model LessonCompletionRecord {
    id        String   @id @default(cuid())
    userId    String
    lessonId  String
    type      String   // 'view' or 'quiz'
    score     Float?   // Only for 'quiz' type
    completedAt DateTime @default(now())

    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
    @@index([userId])
    @@index([lessonId])
    @@map("lesson_completions")
}

model EnterpriseResource {
    id          String       @id @default(cuid())
    title       String
    description String?      @db.Text
    type        ResourceType
    category    String
    tags        Json         @default("[]")
    url         String?      @db.Text
    pin         String?
    uploadDate  DateTime     @default(now())
    uploaderId  String
    parentId    String?
    
    uploader    User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
    parent      EnterpriseResource?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
    children    EnterpriseResource[] @relation("FolderHierarchy")

    @@index([parentId])
    @@index([uploaderId])
    @@map("resources")
}


model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  date       DateTime
  priority   String?  @default("Normal")
  authorId   String
  
  // Storing audience as a JSON array of roles or "ALL"
  audience   Json     @default("\"ALL\"")
  
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
  @@map("announcements")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  link      String?
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model CalendarEvent {
  id           String           @id @default(cuid())
  title        String
  description  String?          @db.Text
  start        DateTime
  end          DateTime
  allDay       Boolean          @default(false)
  location     String?
  color        String?          @default("blue")
  audienceType EventAudienceType @default(SPECIFIC)
  creatorId    String

  creator      User             @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees    User[]           @relation("EventAttendees")

  @@index([creatorId])
  @@map("calendar_events")
}

model PlatformSettings {
  id                        String   @id @default(cuid())
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean @default(false)
  
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)

  // JSON array for resource categories
  resourceCategories        Json     @default("[\"Recursos Humanos\", \"TI y Seguridad\", \"Marketing\", \"Ventas\", \"Legal\", \"Operaciones\", \"Finanzas\", \"Formación Interna\", \"Documentación de Producto\", \"General\"]")
  
  updatedAt                 DateTime @updatedAt
  
  @@map("platform_settings")
}


enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}
