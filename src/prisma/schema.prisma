// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// --- ENUMS ---
enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
    FOLDER
    DOCUMENT
    GUIDE
    MANUAL
    POLICY
    VIDEO
    EXTERNAL_LINK
    OTHER
}

enum EventAudienceType {
    ALL
    ADMINISTRATOR
    INSTRUCTOR
    STUDENT
    SPECIFIC
}

enum SecurityLogEvent {
    SUCCESSFUL_LOGIN
    FAILED_LOGIN_ATTEMPT
    PASSWORD_CHANGE_SUCCESS
    TWO_FACTOR_ENABLED
    TWO_FACTOR_DISABLED
    USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}


// --- MODELS ---
model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime      @default(now())
  lastLogin             DateTime?
  isActive              Boolean       @default(true)
  theme                 String?
  xp                    Int?          @default(0)

  // RELATIONS
  coursesAsInstructor   Course[]      @relation("InstructorCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  userNotes             UserNote[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[]
  createdResources      Resource[]      @relation("UploaderResources")
  quizAttempts          QuizAttempt[]
  notifications         Notification[]
  securityLogs          SecurityLog[]
  createdTemplates      LessonTemplate[]
  formResponses         FormResponse[]
  createdForms          Form[]
  achievements          UserAchievement[]
  sharedResources       Resource[]       @relation("SharedResource")

  @@map("users")
}

model Course {
  id                String          @id @default(cuid())
  title             String
  description       String          @db.Text
  imageUrl          String?
  category          String?
  instructorId      String
  status            CourseStatus    @default(DRAFT)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  publicationDate   DateTime?

  // RELATIONS
  instructor        User            @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules           Module[]
  enrollments       Enrollment[]
  progress          CourseProgress[]

  @@map("courses")
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // RELATIONS
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id              String      @id @default(cuid())
  title           String
  order           Int
  moduleId        String
  
  // RELATIONS
  module          Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks   ContentBlock[]
  completedBy     LessonCompletionRecord[]
  notes           UserNote[]

  @@map("lessons")
}

model ContentBlock {
  id          String      @id @default(cuid())
  type        LessonType
  content     String?     @db.Text
  order       Int
  lessonId    String
  
  // RELATIONS
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?       // A content block can have one quiz

  @@map("content_blocks")
}


model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime  @default(now())
  
  // RELATIONS
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress      CourseProgress?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model CourseProgress {
  id                  String      @id @default(cuid())
  userId              String
  courseId            String
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course              Course                    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollmentId        String      @unique
  enrollment          Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  progressPercentage  Int?        @default(0)
  completedAt         DateTime?
  lastActivity        DateTime?   @updatedAt

  // RELATIONS
  completedLessons    LessonCompletionRecord[]

  @@map("course_progress")
}

model LessonCompletionRecord {
    id            String    @id @default(cuid())
    progressId    String
    lessonId      String
    type          String    // e.g., 'view', 'quiz'
    score         Int?      // Score obtained if type is 'quiz'
    completedAt   DateTime  @default(now())

    // RELATIONS
    progress      CourseProgress  @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson        Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@map("lesson_completion_records")
}


model Quiz {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  maxAttempts   Int?
  contentBlockId String       @unique
  
  // RELATIONS
  contentBlock  ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id      String    @id @default(cuid())
  text    String    @db.Text
  type    QuestionType @default(SINGLE_CHOICE)
  order   Int
  quizId  String
  
  // RELATIONS
  quiz    Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[]

  @@map("questions")
}

model AnswerOption {
  id            String    @id @default(cuid())
  text          String
  isCorrect     Boolean   @default(false)
  feedback      String?   @db.Text
  points        Int       @default(0)
  questionId    String
  
  // RELATIONS
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
  
  @@map("answer_options")
}

model QuizAttempt {
    id            String    @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime  @default(now())

    // RELATIONS
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@map("quiz_attempts")
}

model AnswerAttempt {
    id                String        @id @default(cuid())
    quizAttemptId     String
    questionId        String
    selectedOptionId  String
    
    // RELATIONS
    quizAttempt       QuizAttempt   @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question          Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption    AnswerOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@map("answer_attempts")
}

model UserNote {
    id        String    @id @default(cuid())
    userId    String
    lessonId  String
    content   String    @db.Text
    color     String    @default("yellow")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    // RELATIONS
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
    @@map("user_notes")
}


model Resource {
  id           String       @id @default(cuid())
  title        String
  description  String?      @db.Text
  type         ResourceType @default(DOCUMENT)
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime     @default(now())
  pin          String?      
  ispublic     Boolean      @default(true)
  
  uploaderId   String
  uploader     User         @relation("UploaderResources", fields: [uploaderId], references: [id], onDelete: Cascade)

  parentId     String?
  parent       Resource?    @relation("FolderContent", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children     Resource[]   @relation("FolderContent")

  sharedWith   User[]       @relation("SharedResource")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  date        DateTime @default(now())
  authorId    String
  audience    String   @default("ALL") // Can store 'ALL' or a comma-separated list of roles
  priority    String?  @default("Normal")
  
  // RELATIONS
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

model CalendarEvent {
    id        String   @id @default(cuid())
    title     String
    description String? @db.Text
    start     DateTime
    end       DateTime
    allDay    Boolean  @default(false)
    location  String?
    videoConferenceLink String?
    attachments Json?
    color     String?
    audienceType EventAudienceType @default(ALL)

    creatorId String
    creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    attendees User[]    @relation("EventAttendees")

    @@map("calendar_events")
}


model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  allowPublicRegistration   Boolean   @default(true)
  emailWhitelist            String?
  enableEmailNotifications  Boolean   @default(true)

  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(true)

  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)

  require2faForAdmins       Boolean   @default(false)

  resourceCategories        String?   @default("Recursos Humanos,TI y Seguridad,Marketing,Ventas,Legal,Operaciones,Finanzas,Formación Interna,Documentación de Producto,General")

  // Theme settings
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  fontHeadline              String?
  fontBody                  String?
  primaryColorDark          String?
  backgroundColorDark       String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?

  updatedAt                 DateTime  @updatedAt
  
  @@map("platform_settings")
}


model SecurityLog {
    id            String    @id @default(cuid())
    event         SecurityLogEvent
    userId        String?
    emailAttempt  String?
    ipAddress     String?
    userAgent     String?
    country       String?
    city          String?
    details       String?   @db.Text
    createdAt     DateTime  @default(now())

    user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("security_logs")
}

model LessonTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String?
  type            String      // SYSTEM or USER
  creatorId       String?
  
  // RELATIONS
  creator         User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]

  @@map("lesson_templates")
}

model TemplateBlock {
  id              String      @id @default(cuid())
  type            LessonType
  order           Int
  templateId      String
  
  // RELATIONS
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_blocks")
}


model Form {
    id            String    @id @default(cuid())
    title         String
    description   String?   @db.Text
    status        FormStatus @default(DRAFT)
    isQuiz        Boolean   @default(false)
    creatorId     String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // RELATIONS
    creator       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields        FormField[]
    responses     FormResponse[]
    sharedWith    User[]    @relation("SharedForm")

    @@map("forms")
}

model FormField {
    id            String        @id @default(cuid())
    label         String
    type          FormFieldType @default(SHORT_TEXT)
    options       Json? // For SINGLE_CHOICE, MULTIPLE_CHOICE
    required      Boolean       @default(false)
    placeholder   String?
    order         Int
    formId        String

    // RELATIONS
    form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]

    @@map("form_fields")
}

model FormResponse {
    id            String    @id @default(cuid())
    formId        String
    userId        String
    submittedAt   DateTime  @default(now())
    score         Float? // For quizzes

    // RELATIONS
    form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers       FormAnswer[]

    @@map("form_responses")
}

model FormAnswer {
    id              String    @id @default(cuid())
    responseId      String
    fieldId         String
    value           String    @db.Text // Can store single value or JSON array of values

    // RELATIONS
    response        FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field           FormField     @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@map("form_answers")
}

model Achievement {
    id            String    @id @default(cuid())
    slug          AchievementSlug @unique
    name          String
    description   String
    icon          String?
    points        Int       @default(0)
    
    // RELATIONS
    users         UserAchievement[]
    
    @@map("achievements")
}

model UserAchievement {
    id            String    @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime    @default(now())
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@map("user_achievements")
}
