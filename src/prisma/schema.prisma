// Este es tu archivo de esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// --- Modelos de Usuario y Autenticación ---

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  name                  String
  password              String
  avatar                String?
  role                  UserRole      @default(STUDENT)
  isActive              Boolean       @default(true)
  isTwoFactorEnabled    Boolean       @default(false)
  twoFactorSecret       String?
  registeredDate        DateTime      @default(now())
  lastLogin             DateTime?
  xp                    Int           @default(0)

  // Relaciones
  createdCourses        Course[]
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]         @relation("UserProgress")
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
  createdAnnouncements  Announcement[]
  createdEvents         CalendarEvent[]
  uploadedResources     Resource[]
  notes                 UserNote[]
  notifications         Notification[] // Relación inversa añadida aquí
  achievements          UserAchievement[]
  createdTemplates      LessonTemplate[]
  formResponses         FormResponse[]
  sharedResources       Resource[]               @relation("ResourceSharedWith")
  sharedForms           Form[]                   @relation("FormSharedWith")
  attendedEvents        CalendarEvent[]          @relation("EventAttendees")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMINISTRATOR
}


// --- Modelos de Contenido del Curso ---

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  category        String?
  imageUrl        String?
  status          CourseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicationDate DateTime?

  // Relaciones
  instructorId    String?
  instructor      User?       @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  modules         Module[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relaciones
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  order     Int
  moduleId  String
  
  // Relaciones
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  notes         UserNote[]
}

model ContentBlock {
  id          String     @id @default(cuid())
  type        LessonType
  content     String?    @db.Text
  order       Int
  lessonId    String
  
  // Relaciones
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

// --- Modelos de Evaluaciones (Quizzes) ---

model Quiz {
  id           String    @id @default(cuid())
  title        String
  description  String?
  maxAttempts  Int?
  contentBlockId String    @unique
  
  // Relaciones
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String
  
  // Relaciones
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  answerAttempts AnswerAttempt[] // Relación inversa añadida aquí
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  feedback   String?
  questionId String
  
  // Relaciones
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerAttempt AnswerAttempt[]
}

// --- Modelos de Progreso del Estudiante ---

model Enrollment {
  id          String      @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime    @default(now())
  
  // Relaciones
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                 String      @id @default(cuid())
  userId             String
  courseId           String
  enrollmentId       String      @unique
  progressPercentage Float       @default(0)
  completedAt        DateTime?
  lastActivity       DateTime?   @updatedAt

  // Relaciones
  enrollment       Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user             User       @relation("UserProgress", fields: [userId], references: [id], onDelete: Cascade)
  course           Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLessons LessonCompletionRecord[]
  
  @@unique([userId, courseId])
}

model LessonCompletionRecord {
  id          String      @id @default(cuid())
  progressId  String
  lessonId    String
  completedAt DateTime    @default(now())
  type        String      // "view", "quiz", "video"
  score       Float?      // Score obtained if it was a quiz
  
  // Relaciones
  progress    CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId])
}

model QuizAttempt {
  id            String    @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int
  score         Float     // Percentage score
  submittedAt   DateTime  @default(now())
  
  // Relaciones
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       AnswerAttempt[]
}

model AnswerAttempt {
  id               String @id @default(cuid())
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String

  // Relación
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

// --- Modelos de Contenido General ---

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String?    @db.Text
  type         ResourceType
  category     String?
  tags         String?
  url          String?
  uploadDate   DateTime   @default(now())
  uploaderId   String?
  hasPin       Boolean    @default(false)
  pin          String?
  ispublic     Boolean    @default(true)
  parentId     String?

  // Relaciones
  parent       Resource?  @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Resource[] @relation("FolderContent")
  uploader     User?      @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  sharedWith   User[]     @relation("ResourceSharedWith")
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  String   // 'ALL' o un array de UserRole en formato string
  priority  String   @default("Normal") // "Normal", "Urgente"
  
  // Relaciones
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id                  String     @id @default(cuid())
  title               String
  description         String?    @db.Text
  location            String?
  start               DateTime
  end                 DateTime
  allDay              Boolean    @default(false)
  audienceType        String     // 'ALL', 'ADMINISTRATOR', 'INSTRUCTOR', 'STUDENT', 'SPECIFIC'
  color               String     @default("blue")
  creatorId           String
  videoConferenceLink String?
  attachments         Json       @default("[]")
  
  // Relaciones
  creator             User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]     @relation("EventAttendees")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model SecurityLog {
  id           String           @id @default(cuid())
  event        SecurityLogEvent
  ipAddress    String?
  userId       String?
  user         User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  emailAttempt String?
  details      String?          @db.Text
  userAgent    String?          @db.Text
  city         String?
  country      String?
  createdAt    DateTime         @default(now())
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String   @db.Text
  color     String   @default("yellow")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
}


model LessonTemplate {
  id             String    @id @default(cuid())
  name           String
  description    String?
  type           String    // "SYSTEM" o "USER"
  creatorId      String?
  creator        User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks TemplateBlock[]
}

model TemplateBlock {
  id         String   @id @default(cuid())
  type       LessonType
  order      Int
  templateId String
  
  // Relaciones
  template   LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- Formularios y Evaluaciones ---
model Form {
  id           String         @id @default(cuid())
  title        String
  description  String?
  status       FormStatus     @default(DRAFT)
  isQuiz       Boolean        @default(false)
  creatorId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       FormField[]
  responses    FormResponse[]
  sharedWith   User[]         @relation("FormSharedWith")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model FormField {
  id          String        @id @default(cuid())
  label       String
  type        FormFieldType
  options     Json          @default("[]") // Para SINGLE_CHOICE y MULTIPLE_CHOICE
  required    Boolean       @default(false)
  placeholder String?
  order       Int
  formId      String
  
  form        Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model FormResponse {
  id          String       @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime     @default(now())
  score       Float?       // Para quizzes
  
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
}

model FormAnswer {
  id         String   @id @default(cuid())
  responseId String
  fieldId    String
  value      String   @db.Text
  
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}


// --- Gamification ---

model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  points      Int
  icon        String?

  userAchievements UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@id([userId, achievementId])
}


// --- Configuración Global ---
model PlatformSettings {
  id                        String   @id @default(cuid())
  updatedAt                 DateTime @updatedAt
  
  // General
  platformName              String   @default("NexusAlpri")
  allowPublicRegistration   Boolean  @default(true)
  enableEmailNotifications  Boolean  @default(true)
  emailWhitelist            String?  @db.Text
  
  // Categorías
  resourceCategories        String   @db.Text
  
  // Seguridad
  passwordMinLength         Int      @default(8)
  passwordRequireUppercase  Boolean  @default(true)
  passwordRequireLowercase  Boolean  @default(true)
  passwordRequireNumber     Boolean  @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean  @default(true)
  idleTimeoutMinutes        Int      @default(20)
  require2faForAdmins       Boolean  @default(false)

  // Apariencia
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
}
