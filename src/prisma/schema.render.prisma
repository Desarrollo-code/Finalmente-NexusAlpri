// prisma/schema.render.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  FILE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}

enum ResourceType {
  FOLDER
  DOCUMENT
  GUIDE
  MANUAL
  POLICY
  VIDEO
  EXTERNAL_LINK
  OTHER
}

enum EventAudienceType {
  ALL
  ADMINISTRATOR
  INSTRUCTOR
  STUDENT
  SPECIFIC
}

enum SecurityLogEvent {
  SUCCESSFUL_LOGIN
  FAILED_LOGIN_ATTEMPT
  PASSWORD_CHANGE_SUCCESS
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  USER_ROLE_CHANGED
}

enum AchievementSlug {
  FIRST_ENROLLMENT
  FIRST_COURSE_COMPLETED
  PERFECT_QUIZ_SCORE
  FIVE_COURSES_COMPLETED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// --- MODELS ---

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String
  password              String
  role                  UserRole              @default(STUDENT)
  avatar                String?
  registeredDate        DateTime              @default(now())
  lastLogin             DateTime?
  isActive              Boolean               @default(true)
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorSecret       String?
  xp                    Int                   @default(0)

  // Relationships
  createdCourses        Course[]              @relation("CreatedCourses")
  enrollments           Enrollment[]
  courseProgress        CourseProgress[]
  achievements          UserAchievement[]
  uploadedResources     Resource[]            @relation("UploadedBy")
  sharedResources       Resource[]            @relation("SharedWith")
  createdEvents         CalendarEvent[]
  attendedEvents        CalendarEvent[]       @relation("EventAttendees")
  authoredAnnouncements Announcement[]
  notifications         Notification[]
  userNotes             UserNote[]
  createdForms          Form[]
  formResponses         FormResponse[]
  quizAttempts          QuizAttempt[]
  securityLogs          SecurityLog[]
}

model Course {
  id               String          @id @default(cuid())
  title            String          @db.VarChar(255)
  description      String?         @db.Text
  category         String?
  imageUrl         String?
  status           CourseStatus    @default(DRAFT)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  publicationDate  DateTime?
  
  // Relationships
  instructorId     String?
  instructor       User?           @relation("CreatedCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  modules          Module[]
  enrollments      Enrollment[]
  progress         CourseProgress[]

  @@index([instructorId])
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  
  // Relationships
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  order       Int
  moduleId    String
  
  // Relationships
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentBlocks ContentBlock[]
  completions   LessonCompletionRecord[]
  userNotes     UserNote[]

  @@index([moduleId])
}

model ContentBlock {
  id        String     @id @default(cuid())
  type      LessonType
  content   String?    @db.Text
  order     Int
  lessonId  String

  // Relationships
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz      Quiz?

  @@index([lessonId])
}

model Quiz {
  id              String        @id @default(cuid())
  title           String
  description     String?
  maxAttempts     Int?
  contentBlockId  String        @unique

  // Relationships
  contentBlock    ContentBlock  @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
  questions       Question[]
  attempts        QuizAttempt[]
}

model Question {
  id      String         @id @default(cuid())
  text    String
  order   Int
  quizId  String
  
  // Relationships
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options AnswerOption[]
  attempts AnswerAttempt[]

  @@index([quizId])
}

model AnswerOption {
  id          String  @id @default(cuid())
  text        String
  isCorrect   Boolean @default(false)
  feedback    String?
  questionId  String

  // Relationships
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    AnswerAttempt[]

  @@index([questionId])
}


model QuizAttempt {
    id            String @id @default(cuid())
    userId        String
    quizId        String
    attemptNumber Int
    score         Float
    submittedAt   DateTime @default(now())

    // Relationships
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz          Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers       AnswerAttempt[]

    @@index([userId])
    @@index([quizId])
}

model AnswerAttempt {
    id                  String @id @default(cuid())
    quizAttemptId       String
    questionId          String
    selectedOptionId    String

    // Relationships
    quizAttempt         QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    question            Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOption      AnswerOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@index([quizAttemptId])
    @@index([questionId])
    @@index([selectedOptionId])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    CourseProgress?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseProgress {
  id                  String    @id @default(cuid())
  userId              String
  courseId            String
  progressPercentage  Float     @default(0)
  completedAt         DateTime?
  enrollmentId        String?   @unique
  
  // Relationships
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment?              @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  completedLessons  LessonCompletionRecord[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LessonCompletionRecord {
    id              String    @id @default(cuid())
    progressId      String
    lessonId        String
    completedAt     DateTime  @default(now())
    type            String // 'view', 'quiz', 'video'
    score           Float?
    
    // Relationships
    progress        CourseProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
    lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([progressId, lessonId])
    @@index([progressId])
    @@index([lessonId])
}


model Resource {
  id            String       @id @default(cuid())
  title         String
  description   String?
  type          ResourceType
  url           String?
  category      String?
  tags          String?
  uploadDate    DateTime     @default(now())
  uploaderId    String?
  pin           String?
  ispublic      Boolean      @default(true)
  sharedWith    User[]       @relation("SharedWith")

  // Self-relation for folders
  parentId      String?
  parent        Resource?    @relation("FolderContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Resource[]   @relation("FolderContent")

  // Relationships
  uploader      User?        @relation("UploadedBy", fields: [uploaderId], references: [id], onDelete: SetNull)

  @@index([parentId])
  @@index([uploaderId])
}


model CalendarEvent {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  start               DateTime
  end                 DateTime
  allDay              Boolean           @default(false)
  audienceType        EventAudienceType @default(ALL)
  color               String?
  location            String?
  videoConferenceLink String?
  attachments         Json?
  creatorId           String

  // Relationships
  creator             User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendees           User[]            @relation("EventAttendees")

  @@index([creatorId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  date      DateTime @default(now())
  authorId  String
  audience  String   // Puede ser "ALL" o un UserRole como string.
  priority  String?  @default("Normal") // Ej: "Normal", "Urgente"

  // Relationships
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                        String    @id @default(cuid())
  platformName              String    @default("NexusAlpri")
  logoUrl                   String?
  watermarkUrl              String?
  landingImageUrl           String?
  authImageUrl              String?
  aboutImageUrl             String?
  benefitsImageUrl          String?
  allowPublicRegistration   Boolean   @default(true)
  enableEmailNotifications  Boolean   @default(true)
  emailWhitelist            String?   // Comma-separated list of allowed domains
  resourceCategories        String?   // Comma-separated list
  passwordMinLength         Int       @default(8)
  passwordRequireUppercase  Boolean   @default(true)
  passwordRequireLowercase  Boolean   @default(true)
  passwordRequireNumber     Boolean   @default(true)
  passwordRequireSpecialChar Boolean  @default(false)
  enableIdleTimeout         Boolean   @default(true)
  idleTimeoutMinutes        Int       @default(20)
  require2faForAdmins       Boolean   @default(false)
  primaryColor              String?
  secondaryColor            String?
  accentColor               String?
  backgroundColorLight      String?
  primaryColorDark          String?
  backgroundColorDark       String?
  fontHeadline              String?
  fontBody                  String?
  updatedAt                 DateTime  @updatedAt
}

model SecurityLog {
  id           String            @id @default(cuid())
  userId       String?
  emailAttempt String?
  event        SecurityLogEvent
  ipAddress    String?
  userAgent    String?
  city         String?
  country      String?
  details      String?
  createdAt    DateTime          @default(now())
  
  // Relationships
  user         User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

model Achievement {
    id              String @id @default(cuid())
    slug            AchievementSlug @unique
    name            String
    description     String
    icon            String
    points          Int
    
    // Relationships
    users           UserAchievement[]
}

model UserAchievement {
    id              String @id @default(cuid())
    userId          String
    achievementId   String
    unlockedAt      DateTime @default(now())
    
    // Relationships
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
}

model UserNote {
    id          String   @id @default(cuid())
    userId      String
    lessonId    String
    content     String   @db.Text
    color       String   @default("yellow")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relationships
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@unique([userId, lessonId])
}

model LessonTemplate {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            String           // "SYSTEM" or "USER"
  creatorId       String?
  
  // Relationships
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  templateBlocks  TemplateBlock[]
}

model TemplateBlock {
  id              String   @id @default(cuid())
  type            LessonType
  order           Int
  templateId      String
  
  // Relationships
  template        LessonTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

// --- Form Models ---
model Form {
    id          String         @id @default(cuid())
    title       String
    description String?
    status      FormStatus     @default(DRAFT)
    isQuiz      Boolean        @default(false)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    creatorId   String

    // Relationships
    creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    fields      FormField[]
    responses   FormResponse[]
    sharedWith  User[]         @relation("SharedForms")

    @@index([creatorId])
}

model FormField {
  id            String        @id @default(cuid())
  label         String
  type          FormFieldType
  required      Boolean       @default(false)
  placeholder   String?
  options       Json? // [{ id, text, isCorrect, points }, ...]
  order         Int
  formId        String
  
  // Relationships
  form          Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       FormAnswer[]

  @@index([formId])
}

model FormResponse {
  id          String          @id @default(cuid())
  formId      String
  userId      String
  submittedAt DateTime        @default(now())
  score       Float? // Percentage score if it's a quiz
  
  // Relationships
  form        Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@index([formId])
  @@index([userId])
}

model FormAnswer {
    id              String      @id @default(cuid())
    responseId      String
    fieldId         String
    value           String      @db.Text // Storing single values or JSON array for multi-choice

    // Relationships
    response        FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
    field           FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@index([responseId])
    @@index([fieldId])
}
